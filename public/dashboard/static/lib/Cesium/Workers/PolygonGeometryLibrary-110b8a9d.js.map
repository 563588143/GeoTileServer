{"version":3,"file":"PolygonGeometryLibrary-110b8a9d.js","sources":["../../../../Source/Core/Queue.js","../../../../Source/Core/PolygonGeometryLibrary.js"],"sourcesContent":["/**\n * A queue that can enqueue items at the end, and dequeue items from the front.\n *\n * @alias Queue\n * @constructor\n */\nfunction Queue() {\n  this._array = [];\n  this._offset = 0;\n  this._length = 0;\n}\n\nObject.defineProperties(Queue.prototype, {\n  /**\n   * The length of the queue.\n   *\n   * @memberof Queue.prototype\n   *\n   * @type {Number}\n   * @readonly\n   */\n  length: {\n    get: function () {\n      return this._length;\n    },\n  },\n});\n\n/**\n * Enqueues the specified item.\n *\n * @param {*} item The item to enqueue.\n */\nQueue.prototype.enqueue = function (item) {\n  this._array.push(item);\n  this._length++;\n};\n\n/**\n * Dequeues an item.  Returns undefined if the queue is empty.\n *\n * @returns {*} The the dequeued item.\n */\nQueue.prototype.dequeue = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  var array = this._array;\n  var offset = this._offset;\n  var item = array[offset];\n  array[offset] = undefined;\n\n  offset++;\n  if (offset > 10 && offset * 2 > array.length) {\n    //compact array\n    this._array = array.slice(offset);\n    offset = 0;\n  }\n\n  this._offset = offset;\n  this._length--;\n\n  return item;\n};\n\n/**\n * Returns the item at the front of the queue.  Returns undefined if the queue is empty.\n *\n * @returns {*} The item at the front of the queue.\n */\nQueue.prototype.peek = function () {\n  if (this._length === 0) {\n    return undefined;\n  }\n\n  return this._array[this._offset];\n};\n\n/**\n * Check whether this queue contains the specified item.\n *\n * @param {*} item The item to search for.\n */\nQueue.prototype.contains = function (item) {\n  return this._array.indexOf(item) !== -1;\n};\n\n/**\n * Remove all items from the queue.\n */\nQueue.prototype.clear = function () {\n  this._array.length = this._offset = this._length = 0;\n};\n\n/**\n * Sort the items in the queue in-place.\n *\n * @param {Queue.Comparator} compareFunction A function that defines the sort order.\n */\nQueue.prototype.sort = function (compareFunction) {\n  if (this._offset > 0) {\n    //compact array\n    this._array = this._array.slice(this._offset);\n    this._offset = 0;\n  }\n\n  this._array.sort(compareFunction);\n};\n\n/**\n * A function used to compare two items while sorting a queue.\n * @callback Queue.Comparator\n *\n * @param {*} a An item in the array.\n * @param {*} b An item in the array.\n * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n *          a positive value if <code>a</code> is greater than <code>b</code>, or\n *          0 if <code>a</code> is equal to <code>b</code>.\n *\n * @example\n * function compareNumbers(a, b) {\n *     return a - b;\n * }\n */\nexport default Queue;\n","import ArcType from \"./ArcType.js\";\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport EllipsoidRhumbLine from \"./EllipsoidRhumbLine.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport Queue from \"./Queue.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\n/**\n * @private\n */\nvar PolygonGeometryLibrary = {};\n\nPolygonGeometryLibrary.computeHierarchyPackedLength = function (\n  polygonHierarchy\n) {\n  var numComponents = 0;\n  var stack = [polygonHierarchy];\n  while (stack.length > 0) {\n    var hierarchy = stack.pop();\n    if (!defined(hierarchy)) {\n      continue;\n    }\n\n    numComponents += 2;\n\n    var positions = hierarchy.positions;\n    var holes = hierarchy.holes;\n\n    if (defined(positions)) {\n      numComponents += positions.length * Cartesian3.packedLength;\n    }\n\n    if (defined(holes)) {\n      var length = holes.length;\n      for (var i = 0; i < length; ++i) {\n        stack.push(holes[i]);\n      }\n    }\n  }\n\n  return numComponents;\n};\n\nPolygonGeometryLibrary.packPolygonHierarchy = function (\n  polygonHierarchy,\n  array,\n  startingIndex\n) {\n  var stack = [polygonHierarchy];\n  while (stack.length > 0) {\n    var hierarchy = stack.pop();\n    if (!defined(hierarchy)) {\n      continue;\n    }\n\n    var positions = hierarchy.positions;\n    var holes = hierarchy.holes;\n\n    array[startingIndex++] = defined(positions) ? positions.length : 0;\n    array[startingIndex++] = defined(holes) ? holes.length : 0;\n\n    if (defined(positions)) {\n      var positionsLength = positions.length;\n      for (var i = 0; i < positionsLength; ++i, startingIndex += 3) {\n        Cartesian3.pack(positions[i], array, startingIndex);\n      }\n    }\n\n    if (defined(holes)) {\n      var holesLength = holes.length;\n      for (var j = 0; j < holesLength; ++j) {\n        stack.push(holes[j]);\n      }\n    }\n  }\n\n  return startingIndex;\n};\n\nPolygonGeometryLibrary.unpackPolygonHierarchy = function (\n  array,\n  startingIndex\n) {\n  var positionsLength = array[startingIndex++];\n  var holesLength = array[startingIndex++];\n\n  var positions = new Array(positionsLength);\n  var holes = holesLength > 0 ? new Array(holesLength) : undefined;\n\n  for (\n    var i = 0;\n    i < positionsLength;\n    ++i, startingIndex += Cartesian3.packedLength\n  ) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  for (var j = 0; j < holesLength; ++j) {\n    holes[j] = PolygonGeometryLibrary.unpackPolygonHierarchy(\n      array,\n      startingIndex\n    );\n    startingIndex = holes[j].startingIndex;\n    delete holes[j].startingIndex;\n  }\n\n  return {\n    positions: positions,\n    holes: holes,\n    startingIndex: startingIndex,\n  };\n};\n\nvar distanceScratch = new Cartesian3();\nfunction getPointAtDistance(p0, p1, distance, length) {\n  Cartesian3.subtract(p1, p0, distanceScratch);\n  Cartesian3.multiplyByScalar(\n    distanceScratch,\n    distance / length,\n    distanceScratch\n  );\n  Cartesian3.add(p0, distanceScratch, distanceScratch);\n  return [distanceScratch.x, distanceScratch.y, distanceScratch.z];\n}\n\nPolygonGeometryLibrary.subdivideLineCount = function (p0, p1, minDistance) {\n  var distance = Cartesian3.distance(p0, p1);\n  var n = distance / minDistance;\n  var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\n  return Math.pow(2, countDivide);\n};\n\nvar scratchCartographic0 = new Cartographic();\nvar scratchCartographic1 = new Cartographic();\nvar scratchCartographic2 = new Cartographic();\nvar scratchCartesian0 = new Cartesian3();\nPolygonGeometryLibrary.subdivideRhumbLineCount = function (\n  ellipsoid,\n  p0,\n  p1,\n  minDistance\n) {\n  var c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\n  var c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\n  var rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\n  var n = rhumb.surfaceDistance / minDistance;\n  var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\n  return Math.pow(2, countDivide);\n};\n\nPolygonGeometryLibrary.subdivideLine = function (p0, p1, minDistance, result) {\n  var numVertices = PolygonGeometryLibrary.subdivideLineCount(\n    p0,\n    p1,\n    minDistance\n  );\n  var length = Cartesian3.distance(p0, p1);\n  var distanceBetweenVertices = length / numVertices;\n\n  if (!defined(result)) {\n    result = [];\n  }\n\n  var positions = result;\n  positions.length = numVertices * 3;\n\n  var index = 0;\n  for (var i = 0; i < numVertices; i++) {\n    var p = getPointAtDistance(p0, p1, i * distanceBetweenVertices, length);\n    positions[index++] = p[0];\n    positions[index++] = p[1];\n    positions[index++] = p[2];\n  }\n\n  return positions;\n};\n\nPolygonGeometryLibrary.subdivideRhumbLine = function (\n  ellipsoid,\n  p0,\n  p1,\n  minDistance,\n  result\n) {\n  var c0 = ellipsoid.cartesianToCartographic(p0, scratchCartographic0);\n  var c1 = ellipsoid.cartesianToCartographic(p1, scratchCartographic1);\n  var rhumb = new EllipsoidRhumbLine(c0, c1, ellipsoid);\n\n  var n = rhumb.surfaceDistance / minDistance;\n  var countDivide = Math.max(0, Math.ceil(CesiumMath.log2(n)));\n  var numVertices = Math.pow(2, countDivide);\n  var distanceBetweenVertices = rhumb.surfaceDistance / numVertices;\n\n  if (!defined(result)) {\n    result = [];\n  }\n\n  var positions = result;\n  positions.length = numVertices * 3;\n\n  var index = 0;\n  for (var i = 0; i < numVertices; i++) {\n    var c = rhumb.interpolateUsingSurfaceDistance(\n      i * distanceBetweenVertices,\n      scratchCartographic2\n    );\n    var p = ellipsoid.cartographicToCartesian(c, scratchCartesian0);\n    positions[index++] = p.x;\n    positions[index++] = p.y;\n    positions[index++] = p.z;\n  }\n\n  return positions;\n};\n\nvar scaleToGeodeticHeightN1 = new Cartesian3();\nvar scaleToGeodeticHeightN2 = new Cartesian3();\nvar scaleToGeodeticHeightP1 = new Cartesian3();\nvar scaleToGeodeticHeightP2 = new Cartesian3();\n\nPolygonGeometryLibrary.scaleToGeodeticHeightExtruded = function (\n  geometry,\n  maxHeight,\n  minHeight,\n  ellipsoid,\n  perPositionHeight\n) {\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n  var n1 = scaleToGeodeticHeightN1;\n  var n2 = scaleToGeodeticHeightN2;\n  var p = scaleToGeodeticHeightP1;\n  var p2 = scaleToGeodeticHeightP2;\n\n  if (\n    defined(geometry) &&\n    defined(geometry.attributes) &&\n    defined(geometry.attributes.position)\n  ) {\n    var positions = geometry.attributes.position.values;\n    var length = positions.length / 2;\n\n    for (var i = 0; i < length; i += 3) {\n      Cartesian3.fromArray(positions, i, p);\n\n      ellipsoid.geodeticSurfaceNormal(p, n1);\n      p2 = ellipsoid.scaleToGeodeticSurface(p, p2);\n      n2 = Cartesian3.multiplyByScalar(n1, minHeight, n2);\n      n2 = Cartesian3.add(p2, n2, n2);\n      positions[i + length] = n2.x;\n      positions[i + 1 + length] = n2.y;\n      positions[i + 2 + length] = n2.z;\n\n      if (perPositionHeight) {\n        p2 = Cartesian3.clone(p, p2);\n      }\n      n2 = Cartesian3.multiplyByScalar(n1, maxHeight, n2);\n      n2 = Cartesian3.add(p2, n2, n2);\n      positions[i] = n2.x;\n      positions[i + 1] = n2.y;\n      positions[i + 2] = n2.z;\n    }\n  }\n  return geometry;\n};\n\nPolygonGeometryLibrary.polygonOutlinesFromHierarchy = function (\n  polygonHierarchy,\n  scaleToEllipsoidSurface,\n  ellipsoid\n) {\n  // create from a polygon hierarchy\n  // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\n  var polygons = [];\n  var queue = new Queue();\n  queue.enqueue(polygonHierarchy);\n  var i;\n  var j;\n  var length;\n  while (queue.length !== 0) {\n    var outerNode = queue.dequeue();\n    var outerRing = outerNode.positions;\n    if (scaleToEllipsoidSurface) {\n      length = outerRing.length;\n      for (i = 0; i < length; i++) {\n        ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\n      }\n    }\n    outerRing = arrayRemoveDuplicates(\n      outerRing,\n      Cartesian3.equalsEpsilon,\n      true\n    );\n    if (outerRing.length < 3) {\n      continue;\n    }\n\n    var numChildren = outerNode.holes ? outerNode.holes.length : 0;\n    // The outer polygon contains inner polygons\n    for (i = 0; i < numChildren; i++) {\n      var hole = outerNode.holes[i];\n      var holePositions = hole.positions;\n      if (scaleToEllipsoidSurface) {\n        length = holePositions.length;\n        for (j = 0; j < length; ++j) {\n          ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\n        }\n      }\n      holePositions = arrayRemoveDuplicates(\n        holePositions,\n        Cartesian3.equalsEpsilon,\n        true\n      );\n      if (holePositions.length < 3) {\n        continue;\n      }\n      polygons.push(holePositions);\n\n      var numGrandchildren = 0;\n      if (defined(hole.holes)) {\n        numGrandchildren = hole.holes.length;\n      }\n\n      for (j = 0; j < numGrandchildren; j++) {\n        queue.enqueue(hole.holes[j]);\n      }\n    }\n\n    polygons.push(outerRing);\n  }\n\n  return polygons;\n};\n\nPolygonGeometryLibrary.polygonsFromHierarchy = function (\n  polygonHierarchy,\n  projectPointsTo2D,\n  scaleToEllipsoidSurface,\n  ellipsoid\n) {\n  // create from a polygon hierarchy\n  // Algorithm adapted from http://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf\n  var hierarchy = [];\n  var polygons = [];\n\n  var queue = new Queue();\n  queue.enqueue(polygonHierarchy);\n\n  while (queue.length !== 0) {\n    var outerNode = queue.dequeue();\n    var outerRing = outerNode.positions;\n    var holes = outerNode.holes;\n\n    var i;\n    var length;\n    if (scaleToEllipsoidSurface) {\n      length = outerRing.length;\n      for (i = 0; i < length; i++) {\n        ellipsoid.scaleToGeodeticSurface(outerRing[i], outerRing[i]);\n      }\n    }\n\n    outerRing = arrayRemoveDuplicates(\n      outerRing,\n      Cartesian3.equalsEpsilon,\n      true\n    );\n    if (outerRing.length < 3) {\n      continue;\n    }\n\n    var positions2D = projectPointsTo2D(outerRing);\n    if (!defined(positions2D)) {\n      continue;\n    }\n    var holeIndices = [];\n\n    var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(\n      positions2D\n    );\n    if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n      positions2D.reverse();\n      outerRing = outerRing.slice().reverse();\n    }\n\n    var positions = outerRing.slice();\n    var numChildren = defined(holes) ? holes.length : 0;\n    var polygonHoles = [];\n    var j;\n\n    for (i = 0; i < numChildren; i++) {\n      var hole = holes[i];\n      var holePositions = hole.positions;\n      if (scaleToEllipsoidSurface) {\n        length = holePositions.length;\n        for (j = 0; j < length; ++j) {\n          ellipsoid.scaleToGeodeticSurface(holePositions[j], holePositions[j]);\n        }\n      }\n\n      holePositions = arrayRemoveDuplicates(\n        holePositions,\n        Cartesian3.equalsEpsilon,\n        true\n      );\n      if (holePositions.length < 3) {\n        continue;\n      }\n\n      var holePositions2D = projectPointsTo2D(holePositions);\n      if (!defined(holePositions2D)) {\n        continue;\n      }\n\n      originalWindingOrder = PolygonPipeline.computeWindingOrder2D(\n        holePositions2D\n      );\n      if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n        holePositions2D.reverse();\n        holePositions = holePositions.slice().reverse();\n      }\n\n      polygonHoles.push(holePositions);\n      holeIndices.push(positions.length);\n      positions = positions.concat(holePositions);\n      positions2D = positions2D.concat(holePositions2D);\n\n      var numGrandchildren = 0;\n      if (defined(hole.holes)) {\n        numGrandchildren = hole.holes.length;\n      }\n\n      for (j = 0; j < numGrandchildren; j++) {\n        queue.enqueue(hole.holes[j]);\n      }\n    }\n\n    hierarchy.push({\n      outerRing: outerRing,\n      holes: polygonHoles,\n    });\n    polygons.push({\n      positions: positions,\n      positions2D: positions2D,\n      holes: holeIndices,\n    });\n  }\n\n  return {\n    hierarchy: hierarchy,\n    polygons: polygons,\n  };\n};\n\nvar computeBoundingRectangleCartesian2 = new Cartesian2();\nvar computeBoundingRectangleCartesian3 = new Cartesian3();\nvar computeBoundingRectangleQuaternion = new Quaternion();\nvar computeBoundingRectangleMatrix3 = new Matrix3();\nPolygonGeometryLibrary.computeBoundingRectangle = function (\n  planeNormal,\n  projectPointTo2D,\n  positions,\n  angle,\n  result\n) {\n  var rotation = Quaternion.fromAxisAngle(\n    planeNormal,\n    angle,\n    computeBoundingRectangleQuaternion\n  );\n  var textureMatrix = Matrix3.fromQuaternion(\n    rotation,\n    computeBoundingRectangleMatrix3\n  );\n\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = Number.NEGATIVE_INFINITY;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = Number.NEGATIVE_INFINITY;\n\n  var length = positions.length;\n  for (var i = 0; i < length; ++i) {\n    var p = Cartesian3.clone(positions[i], computeBoundingRectangleCartesian3);\n    Matrix3.multiplyByVector(textureMatrix, p, p);\n    var st = projectPointTo2D(p, computeBoundingRectangleCartesian2);\n\n    if (defined(st)) {\n      minX = Math.min(minX, st.x);\n      maxX = Math.max(maxX, st.x);\n\n      minY = Math.min(minY, st.y);\n      maxY = Math.max(maxY, st.y);\n    }\n  }\n\n  result.x = minX;\n  result.y = minY;\n  result.width = maxX - minX;\n  result.height = maxY - minY;\n  return result;\n};\n\nPolygonGeometryLibrary.createGeometryFromPositions = function (\n  ellipsoid,\n  polygon,\n  granularity,\n  perPositionHeight,\n  vertexFormat,\n  arcType\n) {\n  var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n  /* If polygon is completely unrenderable, just use the first three vertices */\n  if (indices.length < 3) {\n    indices = [0, 1, 2];\n  }\n\n  var positions = polygon.positions;\n\n  if (perPositionHeight) {\n    var length = positions.length;\n    var flattenedPositions = new Array(length * 3);\n    var index = 0;\n    for (var i = 0; i < length; i++) {\n      var p = positions[i];\n      flattenedPositions[index++] = p.x;\n      flattenedPositions[index++] = p.y;\n      flattenedPositions[index++] = p.z;\n    }\n    var geometry = new Geometry({\n      attributes: {\n        position: new GeometryAttribute({\n          componentDatatype: ComponentDatatype.DOUBLE,\n          componentsPerAttribute: 3,\n          values: flattenedPositions,\n        }),\n      },\n      indices: indices,\n      primitiveType: PrimitiveType.TRIANGLES,\n    });\n\n    if (vertexFormat.normal) {\n      return GeometryPipeline.computeNormal(geometry);\n    }\n\n    return geometry;\n  }\n\n  if (arcType === ArcType.GEODESIC) {\n    return PolygonPipeline.computeSubdivision(\n      ellipsoid,\n      positions,\n      indices,\n      granularity\n    );\n  } else if (arcType === ArcType.RHUMB) {\n    return PolygonPipeline.computeRhumbLineSubdivision(\n      ellipsoid,\n      positions,\n      indices,\n      granularity\n    );\n  }\n};\n\nvar computeWallIndicesSubdivided = [];\nvar p1Scratch = new Cartesian3();\nvar p2Scratch = new Cartesian3();\n\nPolygonGeometryLibrary.computeWallGeometry = function (\n  positions,\n  ellipsoid,\n  granularity,\n  perPositionHeight,\n  arcType\n) {\n  var edgePositions;\n  var topEdgeLength;\n  var i;\n  var p1;\n  var p2;\n\n  var length = positions.length;\n  var index = 0;\n\n  if (!perPositionHeight) {\n    var minDistance = CesiumMath.chordLength(\n      granularity,\n      ellipsoid.maximumRadius\n    );\n\n    var numVertices = 0;\n    if (arcType === ArcType.GEODESIC) {\n      for (i = 0; i < length; i++) {\n        numVertices += PolygonGeometryLibrary.subdivideLineCount(\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance\n        );\n      }\n    } else if (arcType === ArcType.RHUMB) {\n      for (i = 0; i < length; i++) {\n        numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(\n          ellipsoid,\n          positions[i],\n          positions[(i + 1) % length],\n          minDistance\n        );\n      }\n    }\n\n    topEdgeLength = (numVertices + length) * 3;\n    edgePositions = new Array(topEdgeLength * 2);\n    for (i = 0; i < length; i++) {\n      p1 = positions[i];\n      p2 = positions[(i + 1) % length];\n\n      var tempPositions;\n      if (arcType === ArcType.GEODESIC) {\n        tempPositions = PolygonGeometryLibrary.subdivideLine(\n          p1,\n          p2,\n          minDistance,\n          computeWallIndicesSubdivided\n        );\n      } else if (arcType === ArcType.RHUMB) {\n        tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(\n          ellipsoid,\n          p1,\n          p2,\n          minDistance,\n          computeWallIndicesSubdivided\n        );\n      }\n      var tempPositionsLength = tempPositions.length;\n      for (var j = 0; j < tempPositionsLength; ++j, ++index) {\n        edgePositions[index] = tempPositions[j];\n        edgePositions[index + topEdgeLength] = tempPositions[j];\n      }\n\n      edgePositions[index] = p2.x;\n      edgePositions[index + topEdgeLength] = p2.x;\n      ++index;\n\n      edgePositions[index] = p2.y;\n      edgePositions[index + topEdgeLength] = p2.y;\n      ++index;\n\n      edgePositions[index] = p2.z;\n      edgePositions[index + topEdgeLength] = p2.z;\n      ++index;\n    }\n  } else {\n    topEdgeLength = length * 3 * 2;\n    edgePositions = new Array(topEdgeLength * 2);\n    for (i = 0; i < length; i++) {\n      p1 = positions[i];\n      p2 = positions[(i + 1) % length];\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p1.x;\n      ++index;\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p1.y;\n      ++index;\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p1.z;\n      ++index;\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p2.x;\n      ++index;\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p2.y;\n      ++index;\n      edgePositions[index] = edgePositions[index + topEdgeLength] = p2.z;\n      ++index;\n    }\n  }\n\n  length = edgePositions.length;\n  var indices = IndexDatatype.createTypedArray(\n    length / 3,\n    length - positions.length * 6\n  );\n  var edgeIndex = 0;\n  length /= 6;\n\n  for (i = 0; i < length; i++) {\n    var UL = i;\n    var UR = UL + 1;\n    var LL = UL + length;\n    var LR = LL + 1;\n\n    p1 = Cartesian3.fromArray(edgePositions, UL * 3, p1Scratch);\n    p2 = Cartesian3.fromArray(edgePositions, UR * 3, p2Scratch);\n    if (\n      Cartesian3.equalsEpsilon(\n        p1,\n        p2,\n        CesiumMath.EPSILON10,\n        CesiumMath.EPSILON10\n      )\n    ) {\n      //skip corner\n      continue;\n    }\n\n    indices[edgeIndex++] = UL;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = UR;\n    indices[edgeIndex++] = LL;\n    indices[edgeIndex++] = LR;\n  }\n\n  return new Geometry({\n    attributes: new GeometryAttributes({\n      position: new GeometryAttribute({\n        componentDatatype: ComponentDatatype.DOUBLE,\n        componentsPerAttribute: 3,\n        values: edgePositions,\n      }),\n    }),\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n};\nexport default PolygonGeometryLibrary;\n"],"names":["Queue","this","_array","_offset","_length","Object","defineProperties","prototype","length","get","enqueue","item","push","dequeue","array","offset","undefined","slice","peek","contains","indexOf","clear","sort","compareFunction","PolygonGeometryLibrary","polygonHierarchy","numComponents","stack","hierarchy","pop","defined","positions","holes","Cartesian3","packedLength","i","startingIndex","positionsLength","pack","holesLength","j","Array","unpack","unpackPolygonHierarchy","distanceScratch","getPointAtDistance","p0","p1","distance","subtract","multiplyByScalar","add","x","y","z","subdivideLineCount","minDistance","n","countDivide","Math","max","ceil","CesiumMath","log2","pow","scratchCartographic0","Cartographic","scratchCartographic1","scratchCartographic2","scratchCartesian0","subdivideRhumbLineCount","ellipsoid","c0","cartesianToCartographic","c1","EllipsoidRhumbLine","surfaceDistance","subdivideLine","result","numVertices","distanceBetweenVertices","index","p","subdivideRhumbLine","rhumb","c","interpolateUsingSurfaceDistance","cartographicToCartesian","scaleToGeodeticHeightN1","scaleToGeodeticHeightN2","scaleToGeodeticHeightP1","scaleToGeodeticHeightP2","scaleToGeodeticHeightExtruded","geometry","maxHeight","minHeight","perPositionHeight","defaultValue","Ellipsoid","WGS84","n1","n2","p2","attributes","position","values","fromArray","geodeticSurfaceNormal","scaleToGeodeticSurface","clone","polygonOutlinesFromHierarchy","scaleToEllipsoidSurface","polygons","queue","outerNode","outerRing","arrayRemoveDuplicates","equalsEpsilon","numChildren","hole","holePositions","numGrandchildren","polygonsFromHierarchy","projectPointsTo2D","positions2D","holeIndices","originalWindingOrder","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","reverse","polygonHoles","holePositions2D","concat","computeBoundingRectangleCartesian2","Cartesian2","computeBoundingRectangleCartesian3","computeBoundingRectangleQuaternion","Quaternion","computeBoundingRectangleMatrix3","Matrix3","computeBoundingRectangle","planeNormal","projectPointTo2D","angle","rotation","fromAxisAngle","textureMatrix","fromQuaternion","minX","Number","POSITIVE_INFINITY","maxX","NEGATIVE_INFINITY","minY","maxY","multiplyByVector","st","min","width","height","createGeometryFromPositions","polygon","granularity","vertexFormat","arcType","indices","triangulate","flattenedPositions","Geometry","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","primitiveType","PrimitiveType","TRIANGLES","normal","GeometryPipeline","computeNormal","ArcType","GEODESIC","computeSubdivision","RHUMB","computeRhumbLineSubdivision","computeWallIndicesSubdivided","p1Scratch","p2Scratch","computeWallGeometry","edgePositions","topEdgeLength","chordLength","maximumRadius","tempPositions","tempPositionsLength","IndexDatatype","createTypedArray","edgeIndex","UL","UR","LL","LR","EPSILON10","GeometryAttributes"],"mappings":"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"}