{"version":3,"file":"GeometryPipeline-e3097c85.js","sources":["../../../../Source/Core/barycentricCoordinates.js","../../../../Source/Core/Tipsify.js","../../../../Source/Core/GeometryPipeline.js"],"sourcesContent":["import Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\n\nvar scratchCartesian1 = new Cartesian3();\nvar scratchCartesian2 = new Cartesian3();\nvar scratchCartesian3 = new Cartesian3();\n\n/**\n * Computes the barycentric coordinates for a point with respect to a triangle.\n *\n * @function\n *\n * @param {Cartesian2|Cartesian3} point The point to test.\n * @param {Cartesian2|Cartesian3} p0 The first point of the triangle, corresponding to the barycentric x-axis.\n * @param {Cartesian2|Cartesian3} p1 The second point of the triangle, corresponding to the barycentric y-axis.\n * @param {Cartesian2|Cartesian3} p2 The third point of the triangle, corresponding to the barycentric z-axis.\n * @param {Cartesian3} [result] The object onto which to store the result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\n *\n * @example\n * // Returns Cartesian3.UNIT_X\n * var p = new Cesium.Cartesian3(-1.0, 0.0, 0.0);\n * var b = Cesium.barycentricCoordinates(p,\n *   new Cesium.Cartesian3(-1.0, 0.0, 0.0),\n *   new Cesium.Cartesian3( 1.0, 0.0, 0.0),\n *   new Cesium.Cartesian3( 0.0, 1.0, 1.0));\n */\nfunction barycentricCoordinates(point, p0, p1, p2, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"point\", point);\n  Check.defined(\"p0\", p0);\n  Check.defined(\"p1\", p1);\n  Check.defined(\"p2\", p2);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  // Implementation based on http://www.blackpawn.com/texts/pointinpoly/default.html.\n  var v0;\n  var v1;\n  var v2;\n  var dot00;\n  var dot01;\n  var dot02;\n  var dot11;\n  var dot12;\n\n  if (!defined(p0.z)) {\n    if (Cartesian2.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_X, result);\n    }\n    if (Cartesian2.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Y, result);\n    }\n    if (Cartesian2.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Z, result);\n    }\n\n    v0 = Cartesian2.subtract(p1, p0, scratchCartesian1);\n    v1 = Cartesian2.subtract(p2, p0, scratchCartesian2);\n    v2 = Cartesian2.subtract(point, p0, scratchCartesian3);\n\n    dot00 = Cartesian2.dot(v0, v0);\n    dot01 = Cartesian2.dot(v0, v1);\n    dot02 = Cartesian2.dot(v0, v2);\n    dot11 = Cartesian2.dot(v1, v1);\n    dot12 = Cartesian2.dot(v1, v2);\n  } else {\n    if (Cartesian3.equalsEpsilon(point, p0, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_X, result);\n    }\n    if (Cartesian3.equalsEpsilon(point, p1, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Y, result);\n    }\n    if (Cartesian3.equalsEpsilon(point, p2, CesiumMath.EPSILON14)) {\n      return Cartesian3.clone(Cartesian3.UNIT_Z, result);\n    }\n\n    v0 = Cartesian3.subtract(p1, p0, scratchCartesian1);\n    v1 = Cartesian3.subtract(p2, p0, scratchCartesian2);\n    v2 = Cartesian3.subtract(point, p0, scratchCartesian3);\n\n    dot00 = Cartesian3.dot(v0, v0);\n    dot01 = Cartesian3.dot(v0, v1);\n    dot02 = Cartesian3.dot(v0, v2);\n    dot11 = Cartesian3.dot(v1, v1);\n    dot12 = Cartesian3.dot(v1, v2);\n  }\n\n  result.y = dot11 * dot02 - dot01 * dot12;\n  result.z = dot00 * dot12 - dot01 * dot02;\n  var q = dot00 * dot11 - dot01 * dot01;\n\n  // This is done to avoid dividing by infinity causing a NaN\n  if (result.y !== 0) {\n    result.y /= q;\n  }\n  if (result.z !== 0) {\n    result.z /= q;\n  }\n\n  result.x = 1.0 - result.y - result.z;\n  return result;\n}\nexport default barycentricCoordinates;\n","import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Encapsulates an algorithm to optimize triangles for the post\n * vertex-shader cache.  This is based on the 2007 SIGGRAPH paper\n * 'Fast Triangle Reordering for Vertex Locality and Reduced Overdraw.'\n * The runtime is linear but several passes are made.\n *\n * @namespace Tipsify\n *\n * @see <a href='http://gfx.cs.princeton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf'>\n * Fast Triangle Reordering for Vertex Locality and Reduced Overdraw</a>\n * by Sander, Nehab, and Barczak\n *\n * @private\n */\nvar Tipsify = {};\n\n/**\n * Calculates the average cache miss ratio (ACMR) for a given set of indices.\n *\n * @param {Object} options Object with the following properties:\n * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\n *                        in the vertex buffer that define the geometry's triangles.\n * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\n *                                     If not supplied, this value will be computed.\n * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\n * @returns {Number} The average cache miss ratio (ACMR).\n *\n * @exception {DeveloperError} indices length must be a multiple of three.\n * @exception {DeveloperError} cacheSize must be greater than two.\n *\n * @example\n * var indices = [0, 1, 2, 3, 4, 5];\n * var maxIndex = 5;\n * var cacheSize = 3;\n * var acmr = Cesium.Tipsify.calculateACMR({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\n */\nTipsify.calculateACMR = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var indices = options.indices;\n  var maximumIndex = options.maximumIndex;\n  var cacheSize = defaultValue(options.cacheSize, 24);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(indices)) {\n    throw new DeveloperError(\"indices is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var numIndices = indices.length;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (numIndices < 3 || numIndices % 3 !== 0) {\n    throw new DeveloperError(\"indices length must be a multiple of three.\");\n  }\n  if (maximumIndex <= 0) {\n    throw new DeveloperError(\"maximumIndex must be greater than zero.\");\n  }\n  if (cacheSize < 3) {\n    throw new DeveloperError(\"cacheSize must be greater than two.\");\n  }\n  //>>includeEnd('debug');\n\n  // Compute the maximumIndex if not given\n  if (!defined(maximumIndex)) {\n    maximumIndex = 0;\n    var currentIndex = 0;\n    var intoIndices = indices[currentIndex];\n    while (currentIndex < numIndices) {\n      if (intoIndices > maximumIndex) {\n        maximumIndex = intoIndices;\n      }\n      ++currentIndex;\n      intoIndices = indices[currentIndex];\n    }\n  }\n\n  // Vertex time stamps\n  var vertexTimeStamps = [];\n  for (var i = 0; i < maximumIndex + 1; i++) {\n    vertexTimeStamps[i] = 0;\n  }\n\n  // Cache processing\n  var s = cacheSize + 1;\n  for (var j = 0; j < numIndices; ++j) {\n    if (s - vertexTimeStamps[indices[j]] > cacheSize) {\n      vertexTimeStamps[indices[j]] = s;\n      ++s;\n    }\n  }\n\n  return (s - cacheSize + 1) / (numIndices / 3);\n};\n\n/**\n * Optimizes triangles for the post-vertex shader cache.\n *\n * @param {Object} options Object with the following properties:\n * @param {Number[]} options.indices Lists triads of numbers corresponding to the indices of the vertices\n *                        in the vertex buffer that define the geometry's triangles.\n * @param {Number} [options.maximumIndex] The maximum value of the elements in <code>args.indices</code>.\n *                                     If not supplied, this value will be computed.\n * @param {Number} [options.cacheSize=24] The number of vertices that can be stored in the cache at any one time.\n * @returns {Number[]} A list of the input indices in an optimized order.\n *\n * @exception {DeveloperError} indices length must be a multiple of three.\n * @exception {DeveloperError} cacheSize must be greater than two.\n *\n * @example\n * var indices = [0, 1, 2, 3, 4, 5];\n * var maxIndex = 5;\n * var cacheSize = 3;\n * var reorderedIndices = Cesium.Tipsify.tipsify({indices : indices, maxIndex : maxIndex, cacheSize : cacheSize});\n */\nTipsify.tipsify = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var indices = options.indices;\n  var maximumIndex = options.maximumIndex;\n  var cacheSize = defaultValue(options.cacheSize, 24);\n\n  var cursor;\n\n  function skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne) {\n    while (deadEnd.length >= 1) {\n      // while the stack is not empty\n      var d = deadEnd[deadEnd.length - 1]; // top of the stack\n      deadEnd.splice(deadEnd.length - 1, 1); // pop the stack\n\n      if (vertices[d].numLiveTriangles > 0) {\n        return d;\n      }\n    }\n\n    while (cursor < maximumIndexPlusOne) {\n      if (vertices[cursor].numLiveTriangles > 0) {\n        ++cursor;\n        return cursor - 1;\n      }\n      ++cursor;\n    }\n    return -1;\n  }\n\n  function getNextVertex(\n    indices,\n    cacheSize,\n    oneRing,\n    vertices,\n    s,\n    deadEnd,\n    maximumIndexPlusOne\n  ) {\n    var n = -1;\n    var p;\n    var m = -1;\n    var itOneRing = 0;\n    while (itOneRing < oneRing.length) {\n      var index = oneRing[itOneRing];\n      if (vertices[index].numLiveTriangles) {\n        p = 0;\n        if (\n          s -\n            vertices[index].timeStamp +\n            2 * vertices[index].numLiveTriangles <=\n          cacheSize\n        ) {\n          p = s - vertices[index].timeStamp;\n        }\n        if (p > m || m === -1) {\n          m = p;\n          n = index;\n        }\n      }\n      ++itOneRing;\n    }\n    if (n === -1) {\n      return skipDeadEnd(vertices, deadEnd, indices, maximumIndexPlusOne);\n    }\n    return n;\n  }\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(indices)) {\n    throw new DeveloperError(\"indices is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var numIndices = indices.length;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (numIndices < 3 || numIndices % 3 !== 0) {\n    throw new DeveloperError(\"indices length must be a multiple of three.\");\n  }\n  if (maximumIndex <= 0) {\n    throw new DeveloperError(\"maximumIndex must be greater than zero.\");\n  }\n  if (cacheSize < 3) {\n    throw new DeveloperError(\"cacheSize must be greater than two.\");\n  }\n  //>>includeEnd('debug');\n\n  // Determine maximum index\n  var maximumIndexPlusOne = 0;\n  var currentIndex = 0;\n  var intoIndices = indices[currentIndex];\n  var endIndex = numIndices;\n  if (defined(maximumIndex)) {\n    maximumIndexPlusOne = maximumIndex + 1;\n  } else {\n    while (currentIndex < endIndex) {\n      if (intoIndices > maximumIndexPlusOne) {\n        maximumIndexPlusOne = intoIndices;\n      }\n      ++currentIndex;\n      intoIndices = indices[currentIndex];\n    }\n    if (maximumIndexPlusOne === -1) {\n      return 0;\n    }\n    ++maximumIndexPlusOne;\n  }\n\n  // Vertices\n  var vertices = [];\n  var i;\n  for (i = 0; i < maximumIndexPlusOne; i++) {\n    vertices[i] = {\n      numLiveTriangles: 0,\n      timeStamp: 0,\n      vertexTriangles: [],\n    };\n  }\n  currentIndex = 0;\n  var triangle = 0;\n  while (currentIndex < endIndex) {\n    vertices[indices[currentIndex]].vertexTriangles.push(triangle);\n    ++vertices[indices[currentIndex]].numLiveTriangles;\n    vertices[indices[currentIndex + 1]].vertexTriangles.push(triangle);\n    ++vertices[indices[currentIndex + 1]].numLiveTriangles;\n    vertices[indices[currentIndex + 2]].vertexTriangles.push(triangle);\n    ++vertices[indices[currentIndex + 2]].numLiveTriangles;\n    ++triangle;\n    currentIndex += 3;\n  }\n\n  // Starting index\n  var f = 0;\n\n  // Time Stamp\n  var s = cacheSize + 1;\n  cursor = 1;\n\n  // Process\n  var oneRing = [];\n  var deadEnd = []; //Stack\n  var vertex;\n  var intoVertices;\n  var currentOutputIndex = 0;\n  var outputIndices = [];\n  var numTriangles = numIndices / 3;\n  var triangleEmitted = [];\n  for (i = 0; i < numTriangles; i++) {\n    triangleEmitted[i] = false;\n  }\n  var index;\n  var limit;\n  while (f !== -1) {\n    oneRing = [];\n    intoVertices = vertices[f];\n    limit = intoVertices.vertexTriangles.length;\n    for (var k = 0; k < limit; ++k) {\n      triangle = intoVertices.vertexTriangles[k];\n      if (!triangleEmitted[triangle]) {\n        triangleEmitted[triangle] = true;\n        currentIndex = triangle + triangle + triangle;\n        for (var j = 0; j < 3; ++j) {\n          // Set this index as a possible next index\n          index = indices[currentIndex];\n          oneRing.push(index);\n          deadEnd.push(index);\n\n          // Output index\n          outputIndices[currentOutputIndex] = index;\n          ++currentOutputIndex;\n\n          // Cache processing\n          vertex = vertices[index];\n          --vertex.numLiveTriangles;\n          if (s - vertex.timeStamp > cacheSize) {\n            vertex.timeStamp = s;\n            ++s;\n          }\n          ++currentIndex;\n        }\n      }\n    }\n    f = getNextVertex(\n      indices,\n      cacheSize,\n      oneRing,\n      vertices,\n      s,\n      deadEnd,\n      maximumIndexPlusOne\n    );\n  }\n\n  return outputIndices;\n};\nexport default Tipsify;\n","import AttributeCompression from \"./AttributeCompression.js\";\nimport barycentricCoordinates from \"./barycentricCoordinates.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport EncodedCartesian3 from \"./EncodedCartesian3.js\";\nimport GeographicProjection from \"./GeographicProjection.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryType from \"./GeometryType.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport Intersect from \"./Intersect.js\";\nimport IntersectionTests from \"./IntersectionTests.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport Matrix4 from \"./Matrix4.js\";\nimport Plane from \"./Plane.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Tipsify from \"./Tipsify.js\";\n\n/**\n * Content pipeline functions for geometries.\n *\n * @namespace GeometryPipeline\n *\n * @see Geometry\n */\nvar GeometryPipeline = {};\n\nfunction addTriangle(lines, index, i0, i1, i2) {\n  lines[index++] = i0;\n  lines[index++] = i1;\n\n  lines[index++] = i1;\n  lines[index++] = i2;\n\n  lines[index++] = i2;\n  lines[index] = i0;\n}\n\nfunction trianglesToLines(triangles) {\n  var count = triangles.length;\n  var size = (count / 3) * 6;\n  var lines = IndexDatatype.createTypedArray(count, size);\n\n  var index = 0;\n  for (var i = 0; i < count; i += 3, index += 6) {\n    addTriangle(lines, index, triangles[i], triangles[i + 1], triangles[i + 2]);\n  }\n\n  return lines;\n}\n\nfunction triangleStripToLines(triangles) {\n  var count = triangles.length;\n  if (count >= 3) {\n    var size = (count - 2) * 6;\n    var lines = IndexDatatype.createTypedArray(count, size);\n\n    addTriangle(lines, 0, triangles[0], triangles[1], triangles[2]);\n    var index = 6;\n\n    for (var i = 3; i < count; ++i, index += 6) {\n      addTriangle(\n        lines,\n        index,\n        triangles[i - 1],\n        triangles[i],\n        triangles[i - 2]\n      );\n    }\n\n    return lines;\n  }\n\n  return new Uint16Array();\n}\n\nfunction triangleFanToLines(triangles) {\n  if (triangles.length > 0) {\n    var count = triangles.length - 1;\n    var size = (count - 1) * 6;\n    var lines = IndexDatatype.createTypedArray(count, size);\n\n    var base = triangles[0];\n    var index = 0;\n    for (var i = 1; i < count; ++i, index += 6) {\n      addTriangle(lines, index, base, triangles[i], triangles[i + 1]);\n    }\n\n    return lines;\n  }\n\n  return new Uint16Array();\n}\n\n/**\n * Converts a geometry's triangle indices to line indices.  If the geometry has an <code>indices</code>\n * and its <code>primitiveType</code> is <code>TRIANGLES</code>, <code>TRIANGLE_STRIP</code>,\n * <code>TRIANGLE_FAN</code>, it is converted to <code>LINES</code>; otherwise, the geometry is not changed.\n * <p>\n * This is commonly used to create a wireframe geometry for visual debugging.\n * </p>\n *\n * @param {Geometry} geometry The geometry to modify.\n * @returns {Geometry} The modified <code>geometry</code> argument, with its triangle indices converted to lines.\n *\n * @exception {DeveloperError} geometry.primitiveType must be TRIANGLES, TRIANGLE_STRIP, or TRIANGLE_FAN.\n *\n * @example\n * geometry = Cesium.GeometryPipeline.toWireframe(geometry);\n */\nGeometryPipeline.toWireframe = function (geometry) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var indices = geometry.indices;\n  if (defined(indices)) {\n    switch (geometry.primitiveType) {\n      case PrimitiveType.TRIANGLES:\n        geometry.indices = trianglesToLines(indices);\n        break;\n      case PrimitiveType.TRIANGLE_STRIP:\n        geometry.indices = triangleStripToLines(indices);\n        break;\n      case PrimitiveType.TRIANGLE_FAN:\n        geometry.indices = triangleFanToLines(indices);\n        break;\n      //>>includeStart('debug', pragmas.debug);\n      default:\n        throw new DeveloperError(\n          \"geometry.primitiveType must be TRIANGLES, TRIANGLE_STRIP, or TRIANGLE_FAN.\"\n        );\n      //>>includeEnd('debug');\n    }\n\n    geometry.primitiveType = PrimitiveType.LINES;\n  }\n\n  return geometry;\n};\n\n/**\n * Creates a new {@link Geometry} with <code>LINES</code> representing the provided\n * attribute (<code>attributeName</code>) for the provided geometry.  This is used to\n * visualize vector attributes like normals, tangents, and bitangents.\n *\n * @param {Geometry} geometry The <code>Geometry</code> instance with the attribute.\n * @param {String} [attributeName='normal'] The name of the attribute.\n * @param {Number} [length=10000.0] The length of each line segment in meters.  This can be negative to point the vector in the opposite direction.\n * @returns {Geometry} A new <code>Geometry</code> instance with line segments for the vector.\n *\n * @exception {DeveloperError} geometry.attributes must have an attribute with the same name as the attributeName parameter.\n *\n * @example\n * var geometry = Cesium.GeometryPipeline.createLineSegmentsForVectors(instance.geometry, 'bitangent', 100000.0);\n */\nGeometryPipeline.createLineSegmentsForVectors = function (\n  geometry,\n  attributeName,\n  length\n) {\n  attributeName = defaultValue(attributeName, \"normal\");\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  if (!defined(geometry.attributes.position)) {\n    throw new DeveloperError(\"geometry.attributes.position is required.\");\n  }\n  if (!defined(geometry.attributes[attributeName])) {\n    throw new DeveloperError(\n      \"geometry.attributes must have an attribute with the same name as the attributeName parameter, \" +\n        attributeName +\n        \".\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  length = defaultValue(length, 10000.0);\n\n  var positions = geometry.attributes.position.values;\n  var vectors = geometry.attributes[attributeName].values;\n  var positionsLength = positions.length;\n\n  var newPositions = new Float64Array(2 * positionsLength);\n\n  var j = 0;\n  for (var i = 0; i < positionsLength; i += 3) {\n    newPositions[j++] = positions[i];\n    newPositions[j++] = positions[i + 1];\n    newPositions[j++] = positions[i + 2];\n\n    newPositions[j++] = positions[i] + vectors[i] * length;\n    newPositions[j++] = positions[i + 1] + vectors[i + 1] * length;\n    newPositions[j++] = positions[i + 2] + vectors[i + 2] * length;\n  }\n\n  var newBoundingSphere;\n  var bs = geometry.boundingSphere;\n  if (defined(bs)) {\n    newBoundingSphere = new BoundingSphere(bs.center, bs.radius + length);\n  }\n\n  return new Geometry({\n    attributes: {\n      position: new GeometryAttribute({\n        componentDatatype: ComponentDatatype.DOUBLE,\n        componentsPerAttribute: 3,\n        values: newPositions,\n      }),\n    },\n    primitiveType: PrimitiveType.LINES,\n    boundingSphere: newBoundingSphere,\n  });\n};\n\n/**\n * Creates an object that maps attribute names to unique locations (indices)\n * for matching vertex attributes and shader programs.\n *\n * @param {Geometry} geometry The geometry, which is not modified, to create the object for.\n * @returns {Object} An object with attribute name / index pairs.\n *\n * @example\n * var attributeLocations = Cesium.GeometryPipeline.createAttributeLocations(geometry);\n * // Example output\n * // {\n * //   'position' : 0,\n * //   'normal' : 1\n * // }\n */\nGeometryPipeline.createAttributeLocations = function (geometry) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  //>>includeEnd('debug')\n\n  // There can be a WebGL performance hit when attribute 0 is disabled, so\n  // assign attribute locations to well-known attributes.\n  var semantics = [\n    \"position\",\n    \"positionHigh\",\n    \"positionLow\",\n\n    // From VertexFormat.position - after 2D projection and high-precision encoding\n    \"position3DHigh\",\n    \"position3DLow\",\n    \"position2DHigh\",\n    \"position2DLow\",\n\n    // From Primitive\n    \"pickColor\",\n\n    // From VertexFormat\n    \"normal\",\n    \"st\",\n    \"tangent\",\n    \"bitangent\",\n\n    // For shadow volumes\n    \"extrudeDirection\",\n\n    // From compressing texture coordinates and normals\n    \"compressedAttributes\",\n  ];\n\n  var attributes = geometry.attributes;\n  var indices = {};\n  var j = 0;\n  var i;\n  var len = semantics.length;\n\n  // Attribute locations for well-known attributes\n  for (i = 0; i < len; ++i) {\n    var semantic = semantics[i];\n\n    if (defined(attributes[semantic])) {\n      indices[semantic] = j++;\n    }\n  }\n\n  // Locations for custom attributes\n  for (var name in attributes) {\n    if (attributes.hasOwnProperty(name) && !defined(indices[name])) {\n      indices[name] = j++;\n    }\n  }\n\n  return indices;\n};\n\n/**\n * Reorders a geometry's attributes and <code>indices</code> to achieve better performance from the GPU's pre-vertex-shader cache.\n *\n * @param {Geometry} geometry The geometry to modify.\n * @returns {Geometry} The modified <code>geometry</code> argument, with its attributes and indices reordered for the GPU's pre-vertex-shader cache.\n *\n * @exception {DeveloperError} Each attribute array in geometry.attributes must have the same number of attributes.\n *\n *\n * @example\n * geometry = Cesium.GeometryPipeline.reorderForPreVertexCache(geometry);\n *\n * @see GeometryPipeline.reorderForPostVertexCache\n */\nGeometryPipeline.reorderForPreVertexCache = function (geometry) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var numVertices = Geometry.computeNumberOfVertices(geometry);\n\n  var indices = geometry.indices;\n  if (defined(indices)) {\n    var indexCrossReferenceOldToNew = new Int32Array(numVertices);\n    for (var i = 0; i < numVertices; i++) {\n      indexCrossReferenceOldToNew[i] = -1;\n    }\n\n    // Construct cross reference and reorder indices\n    var indicesIn = indices;\n    var numIndices = indicesIn.length;\n    var indicesOut = IndexDatatype.createTypedArray(numVertices, numIndices);\n\n    var intoIndicesIn = 0;\n    var intoIndicesOut = 0;\n    var nextIndex = 0;\n    var tempIndex;\n    while (intoIndicesIn < numIndices) {\n      tempIndex = indexCrossReferenceOldToNew[indicesIn[intoIndicesIn]];\n      if (tempIndex !== -1) {\n        indicesOut[intoIndicesOut] = tempIndex;\n      } else {\n        tempIndex = indicesIn[intoIndicesIn];\n        indexCrossReferenceOldToNew[tempIndex] = nextIndex;\n\n        indicesOut[intoIndicesOut] = nextIndex;\n        ++nextIndex;\n      }\n      ++intoIndicesIn;\n      ++intoIndicesOut;\n    }\n    geometry.indices = indicesOut;\n\n    // Reorder attributes\n    var attributes = geometry.attributes;\n    for (var property in attributes) {\n      if (\n        attributes.hasOwnProperty(property) &&\n        defined(attributes[property]) &&\n        defined(attributes[property].values)\n      ) {\n        var attribute = attributes[property];\n        var elementsIn = attribute.values;\n        var intoElementsIn = 0;\n        var numComponents = attribute.componentsPerAttribute;\n        var elementsOut = ComponentDatatype.createTypedArray(\n          attribute.componentDatatype,\n          nextIndex * numComponents\n        );\n        while (intoElementsIn < numVertices) {\n          var temp = indexCrossReferenceOldToNew[intoElementsIn];\n          if (temp !== -1) {\n            for (var j = 0; j < numComponents; j++) {\n              elementsOut[numComponents * temp + j] =\n                elementsIn[numComponents * intoElementsIn + j];\n            }\n          }\n          ++intoElementsIn;\n        }\n        attribute.values = elementsOut;\n      }\n    }\n  }\n\n  return geometry;\n};\n\n/**\n * Reorders a geometry's <code>indices</code> to achieve better performance from the GPU's\n * post vertex-shader cache by using the Tipsify algorithm.  If the geometry <code>primitiveType</code>\n * is not <code>TRIANGLES</code> or the geometry does not have an <code>indices</code>, this function has no effect.\n *\n * @param {Geometry} geometry The geometry to modify.\n * @param {Number} [cacheCapacity=24] The number of vertices that can be held in the GPU's vertex cache.\n * @returns {Geometry} The modified <code>geometry</code> argument, with its indices reordered for the post-vertex-shader cache.\n *\n * @exception {DeveloperError} cacheCapacity must be greater than two.\n *\n *\n * @example\n * geometry = Cesium.GeometryPipeline.reorderForPostVertexCache(geometry);\n *\n * @see GeometryPipeline.reorderForPreVertexCache\n * @see {@link http://gfx.cs.princ0eton.edu/pubs/Sander_2007_%3ETR/tipsy.pdf|Fast Triangle Reordering for Vertex Locality and Reduced Overdraw}\n * by Sander, Nehab, and Barczak\n */\nGeometryPipeline.reorderForPostVertexCache = function (\n  geometry,\n  cacheCapacity\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var indices = geometry.indices;\n  if (geometry.primitiveType === PrimitiveType.TRIANGLES && defined(indices)) {\n    var numIndices = indices.length;\n    var maximumIndex = 0;\n    for (var j = 0; j < numIndices; j++) {\n      if (indices[j] > maximumIndex) {\n        maximumIndex = indices[j];\n      }\n    }\n    geometry.indices = Tipsify.tipsify({\n      indices: indices,\n      maximumIndex: maximumIndex,\n      cacheSize: cacheCapacity,\n    });\n  }\n\n  return geometry;\n};\n\nfunction copyAttributesDescriptions(attributes) {\n  var newAttributes = {};\n\n  for (var attribute in attributes) {\n    if (\n      attributes.hasOwnProperty(attribute) &&\n      defined(attributes[attribute]) &&\n      defined(attributes[attribute].values)\n    ) {\n      var attr = attributes[attribute];\n      newAttributes[attribute] = new GeometryAttribute({\n        componentDatatype: attr.componentDatatype,\n        componentsPerAttribute: attr.componentsPerAttribute,\n        normalize: attr.normalize,\n        values: [],\n      });\n    }\n  }\n\n  return newAttributes;\n}\n\nfunction copyVertex(destinationAttributes, sourceAttributes, index) {\n  for (var attribute in sourceAttributes) {\n    if (\n      sourceAttributes.hasOwnProperty(attribute) &&\n      defined(sourceAttributes[attribute]) &&\n      defined(sourceAttributes[attribute].values)\n    ) {\n      var attr = sourceAttributes[attribute];\n\n      for (var k = 0; k < attr.componentsPerAttribute; ++k) {\n        destinationAttributes[attribute].values.push(\n          attr.values[index * attr.componentsPerAttribute + k]\n        );\n      }\n    }\n  }\n}\n\n/**\n * Splits a geometry into multiple geometries, if necessary, to ensure that indices in the\n * <code>indices</code> fit into unsigned shorts.  This is used to meet the WebGL requirements\n * when unsigned int indices are not supported.\n * <p>\n * If the geometry does not have any <code>indices</code>, this function has no effect.\n * </p>\n *\n * @param {Geometry} geometry The geometry to be split into multiple geometries.\n * @returns {Geometry[]} An array of geometries, each with indices that fit into unsigned shorts.\n *\n * @exception {DeveloperError} geometry.primitiveType must equal to PrimitiveType.TRIANGLES, PrimitiveType.LINES, or PrimitiveType.POINTS\n * @exception {DeveloperError} All geometry attribute lists must have the same number of attributes.\n *\n * @example\n * var geometries = Cesium.GeometryPipeline.fitToUnsignedShortIndices(geometry);\n */\nGeometryPipeline.fitToUnsignedShortIndices = function (geometry) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  if (\n    defined(geometry.indices) &&\n    geometry.primitiveType !== PrimitiveType.TRIANGLES &&\n    geometry.primitiveType !== PrimitiveType.LINES &&\n    geometry.primitiveType !== PrimitiveType.POINTS\n  ) {\n    throw new DeveloperError(\n      \"geometry.primitiveType must equal to PrimitiveType.TRIANGLES, PrimitiveType.LINES, or PrimitiveType.POINTS.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var geometries = [];\n\n  // If there's an index list and more than 64K attributes, it is possible that\n  // some indices are outside the range of unsigned short [0, 64K - 1]\n  var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n  if (\n    defined(geometry.indices) &&\n    numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES\n  ) {\n    var oldToNewIndex = [];\n    var newIndices = [];\n    var currentIndex = 0;\n    var newAttributes = copyAttributesDescriptions(geometry.attributes);\n\n    var originalIndices = geometry.indices;\n    var numberOfIndices = originalIndices.length;\n\n    var indicesPerPrimitive;\n\n    if (geometry.primitiveType === PrimitiveType.TRIANGLES) {\n      indicesPerPrimitive = 3;\n    } else if (geometry.primitiveType === PrimitiveType.LINES) {\n      indicesPerPrimitive = 2;\n    } else if (geometry.primitiveType === PrimitiveType.POINTS) {\n      indicesPerPrimitive = 1;\n    }\n\n    for (var j = 0; j < numberOfIndices; j += indicesPerPrimitive) {\n      for (var k = 0; k < indicesPerPrimitive; ++k) {\n        var x = originalIndices[j + k];\n        var i = oldToNewIndex[x];\n        if (!defined(i)) {\n          i = currentIndex++;\n          oldToNewIndex[x] = i;\n          copyVertex(newAttributes, geometry.attributes, x);\n        }\n        newIndices.push(i);\n      }\n\n      if (\n        currentIndex + indicesPerPrimitive >=\n        CesiumMath.SIXTY_FOUR_KILOBYTES\n      ) {\n        geometries.push(\n          new Geometry({\n            attributes: newAttributes,\n            indices: newIndices,\n            primitiveType: geometry.primitiveType,\n            boundingSphere: geometry.boundingSphere,\n            boundingSphereCV: geometry.boundingSphereCV,\n          })\n        );\n\n        // Reset for next vertex-array\n        oldToNewIndex = [];\n        newIndices = [];\n        currentIndex = 0;\n        newAttributes = copyAttributesDescriptions(geometry.attributes);\n      }\n    }\n\n    if (newIndices.length !== 0) {\n      geometries.push(\n        new Geometry({\n          attributes: newAttributes,\n          indices: newIndices,\n          primitiveType: geometry.primitiveType,\n          boundingSphere: geometry.boundingSphere,\n          boundingSphereCV: geometry.boundingSphereCV,\n        })\n      );\n    }\n  } else {\n    // No need to split into multiple geometries\n    geometries.push(geometry);\n  }\n\n  return geometries;\n};\n\nvar scratchProjectTo2DCartesian3 = new Cartesian3();\nvar scratchProjectTo2DCartographic = new Cartographic();\n\n/**\n * Projects a geometry's 3D <code>position</code> attribute to 2D, replacing the <code>position</code>\n * attribute with separate <code>position3D</code> and <code>position2D</code> attributes.\n * <p>\n * If the geometry does not have a <code>position</code>, this function has no effect.\n * </p>\n *\n * @param {Geometry} geometry The geometry to modify.\n * @param {String} attributeName The name of the attribute.\n * @param {String} attributeName3D The name of the attribute in 3D.\n * @param {String} attributeName2D The name of the attribute in 2D.\n * @param {Object} [projection=new GeographicProjection()] The projection to use.\n * @returns {Geometry} The modified <code>geometry</code> argument with <code>position3D</code> and <code>position2D</code> attributes.\n *\n * @exception {DeveloperError} geometry must have attribute matching the attributeName argument.\n * @exception {DeveloperError} The attribute componentDatatype must be ComponentDatatype.DOUBLE.\n * @exception {DeveloperError} Could not project a point to 2D.\n *\n * @example\n * geometry = Cesium.GeometryPipeline.projectTo2D(geometry, 'position', 'position3D', 'position2D');\n */\nGeometryPipeline.projectTo2D = function (\n  geometry,\n  attributeName,\n  attributeName3D,\n  attributeName2D,\n  projection\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  if (!defined(attributeName)) {\n    throw new DeveloperError(\"attributeName is required.\");\n  }\n  if (!defined(attributeName3D)) {\n    throw new DeveloperError(\"attributeName3D is required.\");\n  }\n  if (!defined(attributeName2D)) {\n    throw new DeveloperError(\"attributeName2D is required.\");\n  }\n  if (!defined(geometry.attributes[attributeName])) {\n    throw new DeveloperError(\n      \"geometry must have attribute matching the attributeName argument: \" +\n        attributeName +\n        \".\"\n    );\n  }\n  if (\n    geometry.attributes[attributeName].componentDatatype !==\n    ComponentDatatype.DOUBLE\n  ) {\n    throw new DeveloperError(\n      \"The attribute componentDatatype must be ComponentDatatype.DOUBLE.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var attribute = geometry.attributes[attributeName];\n  projection = defined(projection) ? projection : new GeographicProjection();\n  var ellipsoid = projection.ellipsoid;\n\n  // Project original values to 2D.\n  var values3D = attribute.values;\n  var projectedValues = new Float64Array(values3D.length);\n  var index = 0;\n\n  for (var i = 0; i < values3D.length; i += 3) {\n    var value = Cartesian3.fromArray(values3D, i, scratchProjectTo2DCartesian3);\n\n    var lonLat = ellipsoid.cartesianToCartographic(\n      value,\n      scratchProjectTo2DCartographic\n    );\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(lonLat)) {\n      throw new DeveloperError(\n        \"Could not project point (\" +\n          value.x +\n          \", \" +\n          value.y +\n          \", \" +\n          value.z +\n          \") to 2D.\"\n      );\n    }\n    //>>includeEnd('debug');\n\n    var projectedLonLat = projection.project(\n      lonLat,\n      scratchProjectTo2DCartesian3\n    );\n\n    projectedValues[index++] = projectedLonLat.x;\n    projectedValues[index++] = projectedLonLat.y;\n    projectedValues[index++] = projectedLonLat.z;\n  }\n\n  // Rename original cartesians to WGS84 cartesians.\n  geometry.attributes[attributeName3D] = attribute;\n\n  // Replace original cartesians with 2D projected cartesians\n  geometry.attributes[attributeName2D] = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: projectedValues,\n  });\n  delete geometry.attributes[attributeName];\n\n  return geometry;\n};\n\nvar encodedResult = {\n  high: 0.0,\n  low: 0.0,\n};\n\n/**\n * Encodes floating-point geometry attribute values as two separate attributes to improve\n * rendering precision.\n * <p>\n * This is commonly used to create high-precision position vertex attributes.\n * </p>\n *\n * @param {Geometry} geometry The geometry to modify.\n * @param {String} attributeName The name of the attribute.\n * @param {String} attributeHighName The name of the attribute for the encoded high bits.\n * @param {String} attributeLowName The name of the attribute for the encoded low bits.\n * @returns {Geometry} The modified <code>geometry</code> argument, with its encoded attribute.\n *\n * @exception {DeveloperError} geometry must have attribute matching the attributeName argument.\n * @exception {DeveloperError} The attribute componentDatatype must be ComponentDatatype.DOUBLE.\n *\n * @example\n * geometry = Cesium.GeometryPipeline.encodeAttribute(geometry, 'position3D', 'position3DHigh', 'position3DLow');\n */\nGeometryPipeline.encodeAttribute = function (\n  geometry,\n  attributeName,\n  attributeHighName,\n  attributeLowName\n) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  if (!defined(attributeName)) {\n    throw new DeveloperError(\"attributeName is required.\");\n  }\n  if (!defined(attributeHighName)) {\n    throw new DeveloperError(\"attributeHighName is required.\");\n  }\n  if (!defined(attributeLowName)) {\n    throw new DeveloperError(\"attributeLowName is required.\");\n  }\n  if (!defined(geometry.attributes[attributeName])) {\n    throw new DeveloperError(\n      \"geometry must have attribute matching the attributeName argument: \" +\n        attributeName +\n        \".\"\n    );\n  }\n  if (\n    geometry.attributes[attributeName].componentDatatype !==\n    ComponentDatatype.DOUBLE\n  ) {\n    throw new DeveloperError(\n      \"The attribute componentDatatype must be ComponentDatatype.DOUBLE.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var attribute = geometry.attributes[attributeName];\n  var values = attribute.values;\n  var length = values.length;\n  var highValues = new Float32Array(length);\n  var lowValues = new Float32Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    EncodedCartesian3.encode(values[i], encodedResult);\n    highValues[i] = encodedResult.high;\n    lowValues[i] = encodedResult.low;\n  }\n\n  var componentsPerAttribute = attribute.componentsPerAttribute;\n\n  geometry.attributes[attributeHighName] = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.FLOAT,\n    componentsPerAttribute: componentsPerAttribute,\n    values: highValues,\n  });\n  geometry.attributes[attributeLowName] = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.FLOAT,\n    componentsPerAttribute: componentsPerAttribute,\n    values: lowValues,\n  });\n  delete geometry.attributes[attributeName];\n\n  return geometry;\n};\n\nvar scratchCartesian3 = new Cartesian3();\n\nfunction transformPoint(matrix, attribute) {\n  if (defined(attribute)) {\n    var values = attribute.values;\n    var length = values.length;\n    for (var i = 0; i < length; i += 3) {\n      Cartesian3.unpack(values, i, scratchCartesian3);\n      Matrix4.multiplyByPoint(matrix, scratchCartesian3, scratchCartesian3);\n      Cartesian3.pack(scratchCartesian3, values, i);\n    }\n  }\n}\n\nfunction transformVector(matrix, attribute) {\n  if (defined(attribute)) {\n    var values = attribute.values;\n    var length = values.length;\n    for (var i = 0; i < length; i += 3) {\n      Cartesian3.unpack(values, i, scratchCartesian3);\n      Matrix3.multiplyByVector(matrix, scratchCartesian3, scratchCartesian3);\n      scratchCartesian3 = Cartesian3.normalize(\n        scratchCartesian3,\n        scratchCartesian3\n      );\n      Cartesian3.pack(scratchCartesian3, values, i);\n    }\n  }\n}\n\nvar inverseTranspose = new Matrix4();\nvar normalMatrix = new Matrix3();\n\n/**\n * Transforms a geometry instance to world coordinates.  This changes\n * the instance's <code>modelMatrix</code> to {@link Matrix4.IDENTITY} and transforms the\n * following attributes if they are present: <code>position</code>, <code>normal</code>,\n * <code>tangent</code>, and <code>bitangent</code>.\n *\n * @param {GeometryInstance} instance The geometry instance to modify.\n * @returns {GeometryInstance} The modified <code>instance</code> argument, with its attributes transforms to world coordinates.\n *\n * @example\n * Cesium.GeometryPipeline.transformToWorldCoordinates(instance);\n */\nGeometryPipeline.transformToWorldCoordinates = function (instance) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(instance)) {\n    throw new DeveloperError(\"instance is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var modelMatrix = instance.modelMatrix;\n\n  if (Matrix4.equals(modelMatrix, Matrix4.IDENTITY)) {\n    // Already in world coordinates\n    return instance;\n  }\n\n  var attributes = instance.geometry.attributes;\n\n  // Transform attributes in known vertex formats\n  transformPoint(modelMatrix, attributes.position);\n  transformPoint(modelMatrix, attributes.prevPosition);\n  transformPoint(modelMatrix, attributes.nextPosition);\n\n  if (\n    defined(attributes.normal) ||\n    defined(attributes.tangent) ||\n    defined(attributes.bitangent)\n  ) {\n    Matrix4.inverse(modelMatrix, inverseTranspose);\n    Matrix4.transpose(inverseTranspose, inverseTranspose);\n    Matrix4.getMatrix3(inverseTranspose, normalMatrix);\n\n    transformVector(normalMatrix, attributes.normal);\n    transformVector(normalMatrix, attributes.tangent);\n    transformVector(normalMatrix, attributes.bitangent);\n  }\n\n  var boundingSphere = instance.geometry.boundingSphere;\n  if (defined(boundingSphere)) {\n    instance.geometry.boundingSphere = BoundingSphere.transform(\n      boundingSphere,\n      modelMatrix,\n      boundingSphere\n    );\n  }\n\n  instance.modelMatrix = Matrix4.clone(Matrix4.IDENTITY);\n\n  return instance;\n};\n\nfunction findAttributesInAllGeometries(instances, propertyName) {\n  var length = instances.length;\n\n  var attributesInAllGeometries = {};\n\n  var attributes0 = instances[0][propertyName].attributes;\n  var name;\n\n  for (name in attributes0) {\n    if (\n      attributes0.hasOwnProperty(name) &&\n      defined(attributes0[name]) &&\n      defined(attributes0[name].values)\n    ) {\n      var attribute = attributes0[name];\n      var numberOfComponents = attribute.values.length;\n      var inAllGeometries = true;\n\n      // Does this same attribute exist in all geometries?\n      for (var i = 1; i < length; ++i) {\n        var otherAttribute = instances[i][propertyName].attributes[name];\n\n        if (\n          !defined(otherAttribute) ||\n          attribute.componentDatatype !== otherAttribute.componentDatatype ||\n          attribute.componentsPerAttribute !==\n            otherAttribute.componentsPerAttribute ||\n          attribute.normalize !== otherAttribute.normalize\n        ) {\n          inAllGeometries = false;\n          break;\n        }\n\n        numberOfComponents += otherAttribute.values.length;\n      }\n\n      if (inAllGeometries) {\n        attributesInAllGeometries[name] = new GeometryAttribute({\n          componentDatatype: attribute.componentDatatype,\n          componentsPerAttribute: attribute.componentsPerAttribute,\n          normalize: attribute.normalize,\n          values: ComponentDatatype.createTypedArray(\n            attribute.componentDatatype,\n            numberOfComponents\n          ),\n        });\n      }\n    }\n  }\n\n  return attributesInAllGeometries;\n}\n\nvar tempScratch = new Cartesian3();\n\nfunction combineGeometries(instances, propertyName) {\n  var length = instances.length;\n\n  var name;\n  var i;\n  var j;\n  var k;\n\n  var m = instances[0].modelMatrix;\n  var haveIndices = defined(instances[0][propertyName].indices);\n  var primitiveType = instances[0][propertyName].primitiveType;\n\n  //>>includeStart('debug', pragmas.debug);\n  for (i = 1; i < length; ++i) {\n    if (!Matrix4.equals(instances[i].modelMatrix, m)) {\n      throw new DeveloperError(\"All instances must have the same modelMatrix.\");\n    }\n    if (defined(instances[i][propertyName].indices) !== haveIndices) {\n      throw new DeveloperError(\n        \"All instance geometries must have an indices or not have one.\"\n      );\n    }\n    if (instances[i][propertyName].primitiveType !== primitiveType) {\n      throw new DeveloperError(\n        \"All instance geometries must have the same primitiveType.\"\n      );\n    }\n  }\n  //>>includeEnd('debug');\n\n  // Find subset of attributes in all geometries\n  var attributes = findAttributesInAllGeometries(instances, propertyName);\n  var values;\n  var sourceValues;\n  var sourceValuesLength;\n\n  // Combine attributes from each geometry into a single typed array\n  for (name in attributes) {\n    if (attributes.hasOwnProperty(name)) {\n      values = attributes[name].values;\n\n      k = 0;\n      for (i = 0; i < length; ++i) {\n        sourceValues = instances[i][propertyName].attributes[name].values;\n        sourceValuesLength = sourceValues.length;\n\n        for (j = 0; j < sourceValuesLength; ++j) {\n          values[k++] = sourceValues[j];\n        }\n      }\n    }\n  }\n\n  // Combine index lists\n  var indices;\n\n  if (haveIndices) {\n    var numberOfIndices = 0;\n    for (i = 0; i < length; ++i) {\n      numberOfIndices += instances[i][propertyName].indices.length;\n    }\n\n    var numberOfVertices = Geometry.computeNumberOfVertices(\n      new Geometry({\n        attributes: attributes,\n        primitiveType: PrimitiveType.POINTS,\n      })\n    );\n    var destIndices = IndexDatatype.createTypedArray(\n      numberOfVertices,\n      numberOfIndices\n    );\n\n    var destOffset = 0;\n    var offset = 0;\n\n    for (i = 0; i < length; ++i) {\n      var sourceIndices = instances[i][propertyName].indices;\n      var sourceIndicesLen = sourceIndices.length;\n\n      for (k = 0; k < sourceIndicesLen; ++k) {\n        destIndices[destOffset++] = offset + sourceIndices[k];\n      }\n\n      offset += Geometry.computeNumberOfVertices(instances[i][propertyName]);\n    }\n\n    indices = destIndices;\n  }\n\n  // Create bounding sphere that includes all instances\n  var center = new Cartesian3();\n  var radius = 0.0;\n  var bs;\n\n  for (i = 0; i < length; ++i) {\n    bs = instances[i][propertyName].boundingSphere;\n    if (!defined(bs)) {\n      // If any geometries have an undefined bounding sphere, then so does the combined geometry\n      center = undefined;\n      break;\n    }\n\n    Cartesian3.add(bs.center, center, center);\n  }\n\n  if (defined(center)) {\n    Cartesian3.divideByScalar(center, length, center);\n\n    for (i = 0; i < length; ++i) {\n      bs = instances[i][propertyName].boundingSphere;\n      var tempRadius =\n        Cartesian3.magnitude(\n          Cartesian3.subtract(bs.center, center, tempScratch)\n        ) + bs.radius;\n\n      if (tempRadius > radius) {\n        radius = tempRadius;\n      }\n    }\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: primitiveType,\n    boundingSphere: defined(center)\n      ? new BoundingSphere(center, radius)\n      : undefined,\n  });\n}\n\n/**\n * Combines geometry from several {@link GeometryInstance} objects into one geometry.\n * This concatenates the attributes, concatenates and adjusts the indices, and creates\n * a bounding sphere encompassing all instances.\n * <p>\n * If the instances do not have the same attributes, a subset of attributes common\n * to all instances is used, and the others are ignored.\n * </p>\n * <p>\n * This is used by {@link Primitive} to efficiently render a large amount of static data.\n * </p>\n *\n * @private\n *\n * @param {GeometryInstance[]} [instances] The array of {@link GeometryInstance} objects whose geometry will be combined.\n * @returns {Geometry} A single geometry created from the provided geometry instances.\n *\n * @exception {DeveloperError} All instances must have the same modelMatrix.\n * @exception {DeveloperError} All instance geometries must have an indices or not have one.\n * @exception {DeveloperError} All instance geometries must have the same primitiveType.\n *\n *\n * @example\n * for (var i = 0; i < instances.length; ++i) {\n *   Cesium.GeometryPipeline.transformToWorldCoordinates(instances[i]);\n * }\n * var geometries = Cesium.GeometryPipeline.combineInstances(instances);\n *\n * @see GeometryPipeline.transformToWorldCoordinates\n */\nGeometryPipeline.combineInstances = function (instances) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(instances) || instances.length < 1) {\n    throw new DeveloperError(\n      \"instances is required and must have length greater than zero.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var instanceGeometry = [];\n  var instanceSplitGeometry = [];\n  var length = instances.length;\n  for (var i = 0; i < length; ++i) {\n    var instance = instances[i];\n\n    if (defined(instance.geometry)) {\n      instanceGeometry.push(instance);\n    } else if (\n      defined(instance.westHemisphereGeometry) &&\n      defined(instance.eastHemisphereGeometry)\n    ) {\n      instanceSplitGeometry.push(instance);\n    }\n  }\n\n  var geometries = [];\n  if (instanceGeometry.length > 0) {\n    geometries.push(combineGeometries(instanceGeometry, \"geometry\"));\n  }\n\n  if (instanceSplitGeometry.length > 0) {\n    geometries.push(\n      combineGeometries(instanceSplitGeometry, \"westHemisphereGeometry\")\n    );\n    geometries.push(\n      combineGeometries(instanceSplitGeometry, \"eastHemisphereGeometry\")\n    );\n  }\n\n  return geometries;\n};\n\nvar normal = new Cartesian3();\nvar v0 = new Cartesian3();\nvar v1 = new Cartesian3();\nvar v2 = new Cartesian3();\n\n/**\n * Computes per-vertex normals for a geometry containing <code>TRIANGLES</code> by averaging the normals of\n * all triangles incident to the vertex.  The result is a new <code>normal</code> attribute added to the geometry.\n * This assumes a counter-clockwise winding order.\n *\n * @param {Geometry} geometry The geometry to modify.\n * @returns {Geometry} The modified <code>geometry</code> argument with the computed <code>normal</code> attribute.\n *\n * @exception {DeveloperError} geometry.indices length must be greater than 0 and be a multiple of 3.\n * @exception {DeveloperError} geometry.primitiveType must be {@link PrimitiveType.TRIANGLES}.\n *\n * @example\n * Cesium.GeometryPipeline.computeNormal(geometry);\n */\nGeometryPipeline.computeNormal = function (geometry) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  if (\n    !defined(geometry.attributes.position) ||\n    !defined(geometry.attributes.position.values)\n  ) {\n    throw new DeveloperError(\n      \"geometry.attributes.position.values is required.\"\n    );\n  }\n  if (!defined(geometry.indices)) {\n    throw new DeveloperError(\"geometry.indices is required.\");\n  }\n  if (geometry.indices.length < 2 || geometry.indices.length % 3 !== 0) {\n    throw new DeveloperError(\n      \"geometry.indices length must be greater than 0 and be a multiple of 3.\"\n    );\n  }\n  if (geometry.primitiveType !== PrimitiveType.TRIANGLES) {\n    throw new DeveloperError(\n      \"geometry.primitiveType must be PrimitiveType.TRIANGLES.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var indices = geometry.indices;\n  var attributes = geometry.attributes;\n  var vertices = attributes.position.values;\n  var numVertices = attributes.position.values.length / 3;\n  var numIndices = indices.length;\n  var normalsPerVertex = new Array(numVertices);\n  var normalsPerTriangle = new Array(numIndices / 3);\n  var normalIndices = new Array(numIndices);\n  var i;\n  for (i = 0; i < numVertices; i++) {\n    normalsPerVertex[i] = {\n      indexOffset: 0,\n      count: 0,\n      currentCount: 0,\n    };\n  }\n\n  var j = 0;\n  for (i = 0; i < numIndices; i += 3) {\n    var i0 = indices[i];\n    var i1 = indices[i + 1];\n    var i2 = indices[i + 2];\n    var i03 = i0 * 3;\n    var i13 = i1 * 3;\n    var i23 = i2 * 3;\n\n    v0.x = vertices[i03];\n    v0.y = vertices[i03 + 1];\n    v0.z = vertices[i03 + 2];\n    v1.x = vertices[i13];\n    v1.y = vertices[i13 + 1];\n    v1.z = vertices[i13 + 2];\n    v2.x = vertices[i23];\n    v2.y = vertices[i23 + 1];\n    v2.z = vertices[i23 + 2];\n\n    normalsPerVertex[i0].count++;\n    normalsPerVertex[i1].count++;\n    normalsPerVertex[i2].count++;\n\n    Cartesian3.subtract(v1, v0, v1);\n    Cartesian3.subtract(v2, v0, v2);\n    normalsPerTriangle[j] = Cartesian3.cross(v1, v2, new Cartesian3());\n    j++;\n  }\n\n  var indexOffset = 0;\n  for (i = 0; i < numVertices; i++) {\n    normalsPerVertex[i].indexOffset += indexOffset;\n    indexOffset += normalsPerVertex[i].count;\n  }\n\n  j = 0;\n  var vertexNormalData;\n  for (i = 0; i < numIndices; i += 3) {\n    vertexNormalData = normalsPerVertex[indices[i]];\n    var index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\n    normalIndices[index] = j;\n    vertexNormalData.currentCount++;\n\n    vertexNormalData = normalsPerVertex[indices[i + 1]];\n    index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\n    normalIndices[index] = j;\n    vertexNormalData.currentCount++;\n\n    vertexNormalData = normalsPerVertex[indices[i + 2]];\n    index = vertexNormalData.indexOffset + vertexNormalData.currentCount;\n    normalIndices[index] = j;\n    vertexNormalData.currentCount++;\n\n    j++;\n  }\n\n  var normalValues = new Float32Array(numVertices * 3);\n  for (i = 0; i < numVertices; i++) {\n    var i3 = i * 3;\n    vertexNormalData = normalsPerVertex[i];\n    Cartesian3.clone(Cartesian3.ZERO, normal);\n    if (vertexNormalData.count > 0) {\n      for (j = 0; j < vertexNormalData.count; j++) {\n        Cartesian3.add(\n          normal,\n          normalsPerTriangle[normalIndices[vertexNormalData.indexOffset + j]],\n          normal\n        );\n      }\n\n      // We can run into an issue where a vertex is used with 2 primitives that have opposite winding order.\n      if (\n        Cartesian3.equalsEpsilon(Cartesian3.ZERO, normal, CesiumMath.EPSILON10)\n      ) {\n        Cartesian3.clone(\n          normalsPerTriangle[normalIndices[vertexNormalData.indexOffset]],\n          normal\n        );\n      }\n    }\n\n    // We end up with a zero vector probably because of a degenerate triangle\n    if (\n      Cartesian3.equalsEpsilon(Cartesian3.ZERO, normal, CesiumMath.EPSILON10)\n    ) {\n      // Default to (0,0,1)\n      normal.z = 1.0;\n    }\n\n    Cartesian3.normalize(normal, normal);\n    normalValues[i3] = normal.x;\n    normalValues[i3 + 1] = normal.y;\n    normalValues[i3 + 2] = normal.z;\n  }\n\n  geometry.attributes.normal = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.FLOAT,\n    componentsPerAttribute: 3,\n    values: normalValues,\n  });\n\n  return geometry;\n};\n\nvar normalScratch = new Cartesian3();\nvar normalScale = new Cartesian3();\nvar tScratch = new Cartesian3();\n\n/**\n * Computes per-vertex tangents and bitangents for a geometry containing <code>TRIANGLES</code>.\n * The result is new <code>tangent</code> and <code>bitangent</code> attributes added to the geometry.\n * This assumes a counter-clockwise winding order.\n * <p>\n * Based on <a href=\"http://www.terathon.com/code/tangent.html\">Computing Tangent Space Basis Vectors\n * for an Arbitrary Mesh</a> by Eric Lengyel.\n * </p>\n *\n * @param {Geometry} geometry The geometry to modify.\n * @returns {Geometry} The modified <code>geometry</code> argument with the computed <code>tangent</code> and <code>bitangent</code> attributes.\n *\n * @exception {DeveloperError} geometry.indices length must be greater than 0 and be a multiple of 3.\n * @exception {DeveloperError} geometry.primitiveType must be {@link PrimitiveType.TRIANGLES}.\n *\n * @example\n * Cesium.GeometryPipeline.computeTangentAndBiTangent(geometry);\n */\nGeometryPipeline.computeTangentAndBitangent = function (geometry) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var attributes = geometry.attributes;\n  var indices = geometry.indices;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(attributes.position) || !defined(attributes.position.values)) {\n    throw new DeveloperError(\n      \"geometry.attributes.position.values is required.\"\n    );\n  }\n  if (!defined(attributes.normal) || !defined(attributes.normal.values)) {\n    throw new DeveloperError(\"geometry.attributes.normal.values is required.\");\n  }\n  if (!defined(attributes.st) || !defined(attributes.st.values)) {\n    throw new DeveloperError(\"geometry.attributes.st.values is required.\");\n  }\n  if (!defined(indices)) {\n    throw new DeveloperError(\"geometry.indices is required.\");\n  }\n  if (indices.length < 2 || indices.length % 3 !== 0) {\n    throw new DeveloperError(\n      \"geometry.indices length must be greater than 0 and be a multiple of 3.\"\n    );\n  }\n  if (geometry.primitiveType !== PrimitiveType.TRIANGLES) {\n    throw new DeveloperError(\n      \"geometry.primitiveType must be PrimitiveType.TRIANGLES.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var vertices = geometry.attributes.position.values;\n  var normals = geometry.attributes.normal.values;\n  var st = geometry.attributes.st.values;\n\n  var numVertices = geometry.attributes.position.values.length / 3;\n  var numIndices = indices.length;\n  var tan1 = new Array(numVertices * 3);\n\n  var i;\n  for (i = 0; i < tan1.length; i++) {\n    tan1[i] = 0;\n  }\n\n  var i03;\n  var i13;\n  var i23;\n  for (i = 0; i < numIndices; i += 3) {\n    var i0 = indices[i];\n    var i1 = indices[i + 1];\n    var i2 = indices[i + 2];\n    i03 = i0 * 3;\n    i13 = i1 * 3;\n    i23 = i2 * 3;\n    var i02 = i0 * 2;\n    var i12 = i1 * 2;\n    var i22 = i2 * 2;\n\n    var ux = vertices[i03];\n    var uy = vertices[i03 + 1];\n    var uz = vertices[i03 + 2];\n\n    var wx = st[i02];\n    var wy = st[i02 + 1];\n    var t1 = st[i12 + 1] - wy;\n    var t2 = st[i22 + 1] - wy;\n\n    var r = 1.0 / ((st[i12] - wx) * t2 - (st[i22] - wx) * t1);\n    var sdirx = (t2 * (vertices[i13] - ux) - t1 * (vertices[i23] - ux)) * r;\n    var sdiry =\n      (t2 * (vertices[i13 + 1] - uy) - t1 * (vertices[i23 + 1] - uy)) * r;\n    var sdirz =\n      (t2 * (vertices[i13 + 2] - uz) - t1 * (vertices[i23 + 2] - uz)) * r;\n\n    tan1[i03] += sdirx;\n    tan1[i03 + 1] += sdiry;\n    tan1[i03 + 2] += sdirz;\n\n    tan1[i13] += sdirx;\n    tan1[i13 + 1] += sdiry;\n    tan1[i13 + 2] += sdirz;\n\n    tan1[i23] += sdirx;\n    tan1[i23 + 1] += sdiry;\n    tan1[i23 + 2] += sdirz;\n  }\n\n  var tangentValues = new Float32Array(numVertices * 3);\n  var bitangentValues = new Float32Array(numVertices * 3);\n\n  for (i = 0; i < numVertices; i++) {\n    i03 = i * 3;\n    i13 = i03 + 1;\n    i23 = i03 + 2;\n\n    var n = Cartesian3.fromArray(normals, i03, normalScratch);\n    var t = Cartesian3.fromArray(tan1, i03, tScratch);\n    var scalar = Cartesian3.dot(n, t);\n    Cartesian3.multiplyByScalar(n, scalar, normalScale);\n    Cartesian3.normalize(Cartesian3.subtract(t, normalScale, t), t);\n\n    tangentValues[i03] = t.x;\n    tangentValues[i13] = t.y;\n    tangentValues[i23] = t.z;\n\n    Cartesian3.normalize(Cartesian3.cross(n, t, t), t);\n\n    bitangentValues[i03] = t.x;\n    bitangentValues[i13] = t.y;\n    bitangentValues[i23] = t.z;\n  }\n\n  geometry.attributes.tangent = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.FLOAT,\n    componentsPerAttribute: 3,\n    values: tangentValues,\n  });\n\n  geometry.attributes.bitangent = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.FLOAT,\n    componentsPerAttribute: 3,\n    values: bitangentValues,\n  });\n\n  return geometry;\n};\n\nvar scratchCartesian2 = new Cartesian2();\nvar toEncode1 = new Cartesian3();\nvar toEncode2 = new Cartesian3();\nvar toEncode3 = new Cartesian3();\nvar encodeResult2 = new Cartesian2();\n/**\n * Compresses and packs geometry normal attribute values to save memory.\n *\n * @param {Geometry} geometry The geometry to modify.\n * @returns {Geometry} The modified <code>geometry</code> argument, with its normals compressed and packed.\n *\n * @example\n * geometry = Cesium.GeometryPipeline.compressVertices(geometry);\n */\nGeometryPipeline.compressVertices = function (geometry) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(geometry)) {\n    throw new DeveloperError(\"geometry is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var extrudeAttribute = geometry.attributes.extrudeDirection;\n  var i;\n  var numVertices;\n  if (defined(extrudeAttribute)) {\n    //only shadow volumes use extrudeDirection, and shadow volumes use vertexFormat: POSITION_ONLY so we don't need to check other attributes\n    var extrudeDirections = extrudeAttribute.values;\n    numVertices = extrudeDirections.length / 3.0;\n    var compressedDirections = new Float32Array(numVertices * 2);\n\n    var i2 = 0;\n    for (i = 0; i < numVertices; ++i) {\n      Cartesian3.fromArray(extrudeDirections, i * 3.0, toEncode1);\n      if (Cartesian3.equals(toEncode1, Cartesian3.ZERO)) {\n        i2 += 2;\n        continue;\n      }\n      encodeResult2 = AttributeCompression.octEncodeInRange(\n        toEncode1,\n        65535,\n        encodeResult2\n      );\n      compressedDirections[i2++] = encodeResult2.x;\n      compressedDirections[i2++] = encodeResult2.y;\n    }\n\n    geometry.attributes.compressedAttributes = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: compressedDirections,\n    });\n    delete geometry.attributes.extrudeDirection;\n    return geometry;\n  }\n\n  var normalAttribute = geometry.attributes.normal;\n  var stAttribute = geometry.attributes.st;\n\n  var hasNormal = defined(normalAttribute);\n  var hasSt = defined(stAttribute);\n  if (!hasNormal && !hasSt) {\n    return geometry;\n  }\n\n  var tangentAttribute = geometry.attributes.tangent;\n  var bitangentAttribute = geometry.attributes.bitangent;\n\n  var hasTangent = defined(tangentAttribute);\n  var hasBitangent = defined(bitangentAttribute);\n\n  var normals;\n  var st;\n  var tangents;\n  var bitangents;\n\n  if (hasNormal) {\n    normals = normalAttribute.values;\n  }\n  if (hasSt) {\n    st = stAttribute.values;\n  }\n  if (hasTangent) {\n    tangents = tangentAttribute.values;\n  }\n  if (hasBitangent) {\n    bitangents = bitangentAttribute.values;\n  }\n\n  var length = hasNormal ? normals.length : st.length;\n  var numComponents = hasNormal ? 3.0 : 2.0;\n  numVertices = length / numComponents;\n\n  var compressedLength = numVertices;\n  var numCompressedComponents = hasSt && hasNormal ? 2.0 : 1.0;\n  numCompressedComponents += hasTangent || hasBitangent ? 1.0 : 0.0;\n  compressedLength *= numCompressedComponents;\n\n  var compressedAttributes = new Float32Array(compressedLength);\n\n  var normalIndex = 0;\n  for (i = 0; i < numVertices; ++i) {\n    if (hasSt) {\n      Cartesian2.fromArray(st, i * 2.0, scratchCartesian2);\n      compressedAttributes[\n        normalIndex++\n      ] = AttributeCompression.compressTextureCoordinates(scratchCartesian2);\n    }\n\n    var index = i * 3.0;\n    if (hasNormal && defined(tangents) && defined(bitangents)) {\n      Cartesian3.fromArray(normals, index, toEncode1);\n      Cartesian3.fromArray(tangents, index, toEncode2);\n      Cartesian3.fromArray(bitangents, index, toEncode3);\n\n      AttributeCompression.octPack(\n        toEncode1,\n        toEncode2,\n        toEncode3,\n        scratchCartesian2\n      );\n      compressedAttributes[normalIndex++] = scratchCartesian2.x;\n      compressedAttributes[normalIndex++] = scratchCartesian2.y;\n    } else {\n      if (hasNormal) {\n        Cartesian3.fromArray(normals, index, toEncode1);\n        compressedAttributes[\n          normalIndex++\n        ] = AttributeCompression.octEncodeFloat(toEncode1);\n      }\n\n      if (hasTangent) {\n        Cartesian3.fromArray(tangents, index, toEncode1);\n        compressedAttributes[\n          normalIndex++\n        ] = AttributeCompression.octEncodeFloat(toEncode1);\n      }\n\n      if (hasBitangent) {\n        Cartesian3.fromArray(bitangents, index, toEncode1);\n        compressedAttributes[\n          normalIndex++\n        ] = AttributeCompression.octEncodeFloat(toEncode1);\n      }\n    }\n  }\n\n  geometry.attributes.compressedAttributes = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.FLOAT,\n    componentsPerAttribute: numCompressedComponents,\n    values: compressedAttributes,\n  });\n\n  if (hasNormal) {\n    delete geometry.attributes.normal;\n  }\n  if (hasSt) {\n    delete geometry.attributes.st;\n  }\n  if (hasBitangent) {\n    delete geometry.attributes.bitangent;\n  }\n  if (hasTangent) {\n    delete geometry.attributes.tangent;\n  }\n\n  return geometry;\n};\n\nfunction indexTriangles(geometry) {\n  if (defined(geometry.indices)) {\n    return geometry;\n  }\n  var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (numberOfVertices < 3) {\n    throw new DeveloperError(\"The number of vertices must be at least three.\");\n  }\n  if (numberOfVertices % 3 !== 0) {\n    throw new DeveloperError(\n      \"The number of vertices must be a multiple of three.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var indices = IndexDatatype.createTypedArray(\n    numberOfVertices,\n    numberOfVertices\n  );\n  for (var i = 0; i < numberOfVertices; ++i) {\n    indices[i] = i;\n  }\n\n  geometry.indices = indices;\n  return geometry;\n}\n\nfunction indexTriangleFan(geometry) {\n  var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (numberOfVertices < 3) {\n    throw new DeveloperError(\"The number of vertices must be at least three.\");\n  }\n  //>>includeEnd('debug');\n\n  var indices = IndexDatatype.createTypedArray(\n    numberOfVertices,\n    (numberOfVertices - 2) * 3\n  );\n  indices[0] = 1;\n  indices[1] = 0;\n  indices[2] = 2;\n\n  var indicesIndex = 3;\n  for (var i = 3; i < numberOfVertices; ++i) {\n    indices[indicesIndex++] = i - 1;\n    indices[indicesIndex++] = 0;\n    indices[indicesIndex++] = i;\n  }\n\n  geometry.indices = indices;\n  geometry.primitiveType = PrimitiveType.TRIANGLES;\n  return geometry;\n}\n\nfunction indexTriangleStrip(geometry) {\n  var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (numberOfVertices < 3) {\n    throw new DeveloperError(\"The number of vertices must be at least 3.\");\n  }\n  //>>includeEnd('debug');\n\n  var indices = IndexDatatype.createTypedArray(\n    numberOfVertices,\n    (numberOfVertices - 2) * 3\n  );\n  indices[0] = 0;\n  indices[1] = 1;\n  indices[2] = 2;\n\n  if (numberOfVertices > 3) {\n    indices[3] = 0;\n    indices[4] = 2;\n    indices[5] = 3;\n  }\n\n  var indicesIndex = 6;\n  for (var i = 3; i < numberOfVertices - 1; i += 2) {\n    indices[indicesIndex++] = i;\n    indices[indicesIndex++] = i - 1;\n    indices[indicesIndex++] = i + 1;\n\n    if (i + 2 < numberOfVertices) {\n      indices[indicesIndex++] = i;\n      indices[indicesIndex++] = i + 1;\n      indices[indicesIndex++] = i + 2;\n    }\n  }\n\n  geometry.indices = indices;\n  geometry.primitiveType = PrimitiveType.TRIANGLES;\n  return geometry;\n}\n\nfunction indexLines(geometry) {\n  if (defined(geometry.indices)) {\n    return geometry;\n  }\n  var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (numberOfVertices < 2) {\n    throw new DeveloperError(\"The number of vertices must be at least two.\");\n  }\n  if (numberOfVertices % 2 !== 0) {\n    throw new DeveloperError(\"The number of vertices must be a multiple of 2.\");\n  }\n  //>>includeEnd('debug');\n\n  var indices = IndexDatatype.createTypedArray(\n    numberOfVertices,\n    numberOfVertices\n  );\n  for (var i = 0; i < numberOfVertices; ++i) {\n    indices[i] = i;\n  }\n\n  geometry.indices = indices;\n  return geometry;\n}\n\nfunction indexLineStrip(geometry) {\n  var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (numberOfVertices < 2) {\n    throw new DeveloperError(\"The number of vertices must be at least two.\");\n  }\n  //>>includeEnd('debug');\n\n  var indices = IndexDatatype.createTypedArray(\n    numberOfVertices,\n    (numberOfVertices - 1) * 2\n  );\n  indices[0] = 0;\n  indices[1] = 1;\n  var indicesIndex = 2;\n  for (var i = 2; i < numberOfVertices; ++i) {\n    indices[indicesIndex++] = i - 1;\n    indices[indicesIndex++] = i;\n  }\n\n  geometry.indices = indices;\n  geometry.primitiveType = PrimitiveType.LINES;\n  return geometry;\n}\n\nfunction indexLineLoop(geometry) {\n  var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (numberOfVertices < 2) {\n    throw new DeveloperError(\"The number of vertices must be at least two.\");\n  }\n  //>>includeEnd('debug');\n\n  var indices = IndexDatatype.createTypedArray(\n    numberOfVertices,\n    numberOfVertices * 2\n  );\n\n  indices[0] = 0;\n  indices[1] = 1;\n\n  var indicesIndex = 2;\n  for (var i = 2; i < numberOfVertices; ++i) {\n    indices[indicesIndex++] = i - 1;\n    indices[indicesIndex++] = i;\n  }\n\n  indices[indicesIndex++] = numberOfVertices - 1;\n  indices[indicesIndex] = 0;\n\n  geometry.indices = indices;\n  geometry.primitiveType = PrimitiveType.LINES;\n  return geometry;\n}\n\nfunction indexPrimitive(geometry) {\n  switch (geometry.primitiveType) {\n    case PrimitiveType.TRIANGLE_FAN:\n      return indexTriangleFan(geometry);\n    case PrimitiveType.TRIANGLE_STRIP:\n      return indexTriangleStrip(geometry);\n    case PrimitiveType.TRIANGLES:\n      return indexTriangles(geometry);\n    case PrimitiveType.LINE_STRIP:\n      return indexLineStrip(geometry);\n    case PrimitiveType.LINE_LOOP:\n      return indexLineLoop(geometry);\n    case PrimitiveType.LINES:\n      return indexLines(geometry);\n  }\n\n  return geometry;\n}\n\nfunction offsetPointFromXZPlane(p, isBehind) {\n  if (Math.abs(p.y) < CesiumMath.EPSILON6) {\n    if (isBehind) {\n      p.y = -CesiumMath.EPSILON6;\n    } else {\n      p.y = CesiumMath.EPSILON6;\n    }\n  }\n}\n\nfunction offsetTriangleFromXZPlane(p0, p1, p2) {\n  if (p0.y !== 0.0 && p1.y !== 0.0 && p2.y !== 0.0) {\n    offsetPointFromXZPlane(p0, p0.y < 0.0);\n    offsetPointFromXZPlane(p1, p1.y < 0.0);\n    offsetPointFromXZPlane(p2, p2.y < 0.0);\n    return;\n  }\n\n  var p0y = Math.abs(p0.y);\n  var p1y = Math.abs(p1.y);\n  var p2y = Math.abs(p2.y);\n\n  var sign;\n  if (p0y > p1y) {\n    if (p0y > p2y) {\n      sign = CesiumMath.sign(p0.y);\n    } else {\n      sign = CesiumMath.sign(p2.y);\n    }\n  } else if (p1y > p2y) {\n    sign = CesiumMath.sign(p1.y);\n  } else {\n    sign = CesiumMath.sign(p2.y);\n  }\n\n  var isBehind = sign < 0.0;\n  offsetPointFromXZPlane(p0, isBehind);\n  offsetPointFromXZPlane(p1, isBehind);\n  offsetPointFromXZPlane(p2, isBehind);\n}\n\nvar c3 = new Cartesian3();\nfunction getXZIntersectionOffsetPoints(p, p1, u1, v1) {\n  Cartesian3.add(\n    p,\n    Cartesian3.multiplyByScalar(\n      Cartesian3.subtract(p1, p, c3),\n      p.y / (p.y - p1.y),\n      c3\n    ),\n    u1\n  );\n  Cartesian3.clone(u1, v1);\n  offsetPointFromXZPlane(u1, true);\n  offsetPointFromXZPlane(v1, false);\n}\n\nvar u1 = new Cartesian3();\nvar u2 = new Cartesian3();\nvar q1 = new Cartesian3();\nvar q2 = new Cartesian3();\n\nvar splitTriangleResult = {\n  positions: new Array(7),\n  indices: new Array(3 * 3),\n};\n\nfunction splitTriangle(p0, p1, p2) {\n  // In WGS84 coordinates, for a triangle approximately on the\n  // ellipsoid to cross the IDL, first it needs to be on the\n  // negative side of the plane x = 0.\n  if (p0.x >= 0.0 || p1.x >= 0.0 || p2.x >= 0.0) {\n    return undefined;\n  }\n\n  offsetTriangleFromXZPlane(p0, p1, p2);\n\n  var p0Behind = p0.y < 0.0;\n  var p1Behind = p1.y < 0.0;\n  var p2Behind = p2.y < 0.0;\n\n  var numBehind = 0;\n  numBehind += p0Behind ? 1 : 0;\n  numBehind += p1Behind ? 1 : 0;\n  numBehind += p2Behind ? 1 : 0;\n\n  var indices = splitTriangleResult.indices;\n\n  if (numBehind === 1) {\n    indices[1] = 3;\n    indices[2] = 4;\n    indices[5] = 6;\n    indices[7] = 6;\n    indices[8] = 5;\n\n    if (p0Behind) {\n      getXZIntersectionOffsetPoints(p0, p1, u1, q1);\n      getXZIntersectionOffsetPoints(p0, p2, u2, q2);\n\n      indices[0] = 0;\n      indices[3] = 1;\n      indices[4] = 2;\n      indices[6] = 1;\n    } else if (p1Behind) {\n      getXZIntersectionOffsetPoints(p1, p2, u1, q1);\n      getXZIntersectionOffsetPoints(p1, p0, u2, q2);\n\n      indices[0] = 1;\n      indices[3] = 2;\n      indices[4] = 0;\n      indices[6] = 2;\n    } else if (p2Behind) {\n      getXZIntersectionOffsetPoints(p2, p0, u1, q1);\n      getXZIntersectionOffsetPoints(p2, p1, u2, q2);\n\n      indices[0] = 2;\n      indices[3] = 0;\n      indices[4] = 1;\n      indices[6] = 0;\n    }\n  } else if (numBehind === 2) {\n    indices[2] = 4;\n    indices[4] = 4;\n    indices[5] = 3;\n    indices[7] = 5;\n    indices[8] = 6;\n\n    if (!p0Behind) {\n      getXZIntersectionOffsetPoints(p0, p1, u1, q1);\n      getXZIntersectionOffsetPoints(p0, p2, u2, q2);\n\n      indices[0] = 1;\n      indices[1] = 2;\n      indices[3] = 1;\n      indices[6] = 0;\n    } else if (!p1Behind) {\n      getXZIntersectionOffsetPoints(p1, p2, u1, q1);\n      getXZIntersectionOffsetPoints(p1, p0, u2, q2);\n\n      indices[0] = 2;\n      indices[1] = 0;\n      indices[3] = 2;\n      indices[6] = 1;\n    } else if (!p2Behind) {\n      getXZIntersectionOffsetPoints(p2, p0, u1, q1);\n      getXZIntersectionOffsetPoints(p2, p1, u2, q2);\n\n      indices[0] = 0;\n      indices[1] = 1;\n      indices[3] = 0;\n      indices[6] = 2;\n    }\n  }\n\n  var positions = splitTriangleResult.positions;\n  positions[0] = p0;\n  positions[1] = p1;\n  positions[2] = p2;\n  positions.length = 3;\n\n  if (numBehind === 1 || numBehind === 2) {\n    positions[3] = u1;\n    positions[4] = u2;\n    positions[5] = q1;\n    positions[6] = q2;\n    positions.length = 7;\n  }\n\n  return splitTriangleResult;\n}\n\nfunction updateGeometryAfterSplit(geometry, computeBoundingSphere) {\n  var attributes = geometry.attributes;\n\n  if (attributes.position.values.length === 0) {\n    return undefined;\n  }\n\n  for (var property in attributes) {\n    if (\n      attributes.hasOwnProperty(property) &&\n      defined(attributes[property]) &&\n      defined(attributes[property].values)\n    ) {\n      var attribute = attributes[property];\n      attribute.values = ComponentDatatype.createTypedArray(\n        attribute.componentDatatype,\n        attribute.values\n      );\n    }\n  }\n\n  var numberOfVertices = Geometry.computeNumberOfVertices(geometry);\n  geometry.indices = IndexDatatype.createTypedArray(\n    numberOfVertices,\n    geometry.indices\n  );\n\n  if (computeBoundingSphere) {\n    geometry.boundingSphere = BoundingSphere.fromVertices(\n      attributes.position.values\n    );\n  }\n\n  return geometry;\n}\n\nfunction copyGeometryForSplit(geometry) {\n  var attributes = geometry.attributes;\n  var copiedAttributes = {};\n\n  for (var property in attributes) {\n    if (\n      attributes.hasOwnProperty(property) &&\n      defined(attributes[property]) &&\n      defined(attributes[property].values)\n    ) {\n      var attribute = attributes[property];\n      copiedAttributes[property] = new GeometryAttribute({\n        componentDatatype: attribute.componentDatatype,\n        componentsPerAttribute: attribute.componentsPerAttribute,\n        normalize: attribute.normalize,\n        values: [],\n      });\n    }\n  }\n\n  return new Geometry({\n    attributes: copiedAttributes,\n    indices: [],\n    primitiveType: geometry.primitiveType,\n  });\n}\n\nfunction updateInstanceAfterSplit(instance, westGeometry, eastGeometry) {\n  var computeBoundingSphere = defined(instance.geometry.boundingSphere);\n\n  westGeometry = updateGeometryAfterSplit(westGeometry, computeBoundingSphere);\n  eastGeometry = updateGeometryAfterSplit(eastGeometry, computeBoundingSphere);\n\n  if (defined(eastGeometry) && !defined(westGeometry)) {\n    instance.geometry = eastGeometry;\n  } else if (!defined(eastGeometry) && defined(westGeometry)) {\n    instance.geometry = westGeometry;\n  } else {\n    instance.westHemisphereGeometry = westGeometry;\n    instance.eastHemisphereGeometry = eastGeometry;\n    instance.geometry = undefined;\n  }\n}\n\nfunction generateBarycentricInterpolateFunction(\n  CartesianType,\n  numberOfComponents\n) {\n  var v0Scratch = new CartesianType();\n  var v1Scratch = new CartesianType();\n  var v2Scratch = new CartesianType();\n\n  return function (\n    i0,\n    i1,\n    i2,\n    coords,\n    sourceValues,\n    currentValues,\n    insertedIndex,\n    normalize\n  ) {\n    var v0 = CartesianType.fromArray(\n      sourceValues,\n      i0 * numberOfComponents,\n      v0Scratch\n    );\n    var v1 = CartesianType.fromArray(\n      sourceValues,\n      i1 * numberOfComponents,\n      v1Scratch\n    );\n    var v2 = CartesianType.fromArray(\n      sourceValues,\n      i2 * numberOfComponents,\n      v2Scratch\n    );\n\n    CartesianType.multiplyByScalar(v0, coords.x, v0);\n    CartesianType.multiplyByScalar(v1, coords.y, v1);\n    CartesianType.multiplyByScalar(v2, coords.z, v2);\n\n    var value = CartesianType.add(v0, v1, v0);\n    CartesianType.add(value, v2, value);\n\n    if (normalize) {\n      CartesianType.normalize(value, value);\n    }\n\n    CartesianType.pack(\n      value,\n      currentValues,\n      insertedIndex * numberOfComponents\n    );\n  };\n}\n\nvar interpolateAndPackCartesian4 = generateBarycentricInterpolateFunction(\n  Cartesian4,\n  4\n);\nvar interpolateAndPackCartesian3 = generateBarycentricInterpolateFunction(\n  Cartesian3,\n  3\n);\nvar interpolateAndPackCartesian2 = generateBarycentricInterpolateFunction(\n  Cartesian2,\n  2\n);\nvar interpolateAndPackBoolean = function (\n  i0,\n  i1,\n  i2,\n  coords,\n  sourceValues,\n  currentValues,\n  insertedIndex\n) {\n  var v1 = sourceValues[i0] * coords.x;\n  var v2 = sourceValues[i1] * coords.y;\n  var v3 = sourceValues[i2] * coords.z;\n  currentValues[insertedIndex] = v1 + v2 + v3 > CesiumMath.EPSILON6 ? 1 : 0;\n};\n\nvar p0Scratch = new Cartesian3();\nvar p1Scratch = new Cartesian3();\nvar p2Scratch = new Cartesian3();\nvar barycentricScratch = new Cartesian3();\n\nfunction computeTriangleAttributes(\n  i0,\n  i1,\n  i2,\n  point,\n  positions,\n  normals,\n  tangents,\n  bitangents,\n  texCoords,\n  extrudeDirections,\n  applyOffset,\n  currentAttributes,\n  customAttributeNames,\n  customAttributesLength,\n  allAttributes,\n  insertedIndex\n) {\n  if (\n    !defined(normals) &&\n    !defined(tangents) &&\n    !defined(bitangents) &&\n    !defined(texCoords) &&\n    !defined(extrudeDirections) &&\n    customAttributesLength === 0\n  ) {\n    return;\n  }\n\n  var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\n  var p1 = Cartesian3.fromArray(positions, i1 * 3, p1Scratch);\n  var p2 = Cartesian3.fromArray(positions, i2 * 3, p2Scratch);\n  var coords = barycentricCoordinates(point, p0, p1, p2, barycentricScratch);\n\n  if (defined(normals)) {\n    interpolateAndPackCartesian3(\n      i0,\n      i1,\n      i2,\n      coords,\n      normals,\n      currentAttributes.normal.values,\n      insertedIndex,\n      true\n    );\n  }\n\n  if (defined(extrudeDirections)) {\n    var d0 = Cartesian3.fromArray(extrudeDirections, i0 * 3, p0Scratch);\n    var d1 = Cartesian3.fromArray(extrudeDirections, i1 * 3, p1Scratch);\n    var d2 = Cartesian3.fromArray(extrudeDirections, i2 * 3, p2Scratch);\n\n    Cartesian3.multiplyByScalar(d0, coords.x, d0);\n    Cartesian3.multiplyByScalar(d1, coords.y, d1);\n    Cartesian3.multiplyByScalar(d2, coords.z, d2);\n\n    var direction;\n    if (\n      !Cartesian3.equals(d0, Cartesian3.ZERO) ||\n      !Cartesian3.equals(d1, Cartesian3.ZERO) ||\n      !Cartesian3.equals(d2, Cartesian3.ZERO)\n    ) {\n      direction = Cartesian3.add(d0, d1, d0);\n      Cartesian3.add(direction, d2, direction);\n      Cartesian3.normalize(direction, direction);\n    } else {\n      direction = p0Scratch;\n      direction.x = 0;\n      direction.y = 0;\n      direction.z = 0;\n    }\n    Cartesian3.pack(\n      direction,\n      currentAttributes.extrudeDirection.values,\n      insertedIndex * 3\n    );\n  }\n\n  if (defined(applyOffset)) {\n    interpolateAndPackBoolean(\n      i0,\n      i1,\n      i2,\n      coords,\n      applyOffset,\n      currentAttributes.applyOffset.values,\n      insertedIndex\n    );\n  }\n\n  if (defined(tangents)) {\n    interpolateAndPackCartesian3(\n      i0,\n      i1,\n      i2,\n      coords,\n      tangents,\n      currentAttributes.tangent.values,\n      insertedIndex,\n      true\n    );\n  }\n\n  if (defined(bitangents)) {\n    interpolateAndPackCartesian3(\n      i0,\n      i1,\n      i2,\n      coords,\n      bitangents,\n      currentAttributes.bitangent.values,\n      insertedIndex,\n      true\n    );\n  }\n\n  if (defined(texCoords)) {\n    interpolateAndPackCartesian2(\n      i0,\n      i1,\n      i2,\n      coords,\n      texCoords,\n      currentAttributes.st.values,\n      insertedIndex\n    );\n  }\n\n  if (customAttributesLength > 0) {\n    for (var i = 0; i < customAttributesLength; i++) {\n      var attributeName = customAttributeNames[i];\n      genericInterpolate(\n        i0,\n        i1,\n        i2,\n        coords,\n        insertedIndex,\n        allAttributes[attributeName],\n        currentAttributes[attributeName]\n      );\n    }\n  }\n}\n\nfunction genericInterpolate(\n  i0,\n  i1,\n  i2,\n  coords,\n  insertedIndex,\n  sourceAttribute,\n  currentAttribute\n) {\n  var componentsPerAttribute = sourceAttribute.componentsPerAttribute;\n  var sourceValues = sourceAttribute.values;\n  var currentValues = currentAttribute.values;\n  switch (componentsPerAttribute) {\n    case 4:\n      interpolateAndPackCartesian4(\n        i0,\n        i1,\n        i2,\n        coords,\n        sourceValues,\n        currentValues,\n        insertedIndex,\n        false\n      );\n      break;\n    case 3:\n      interpolateAndPackCartesian3(\n        i0,\n        i1,\n        i2,\n        coords,\n        sourceValues,\n        currentValues,\n        insertedIndex,\n        false\n      );\n      break;\n    case 2:\n      interpolateAndPackCartesian2(\n        i0,\n        i1,\n        i2,\n        coords,\n        sourceValues,\n        currentValues,\n        insertedIndex,\n        false\n      );\n      break;\n    default:\n      currentValues[insertedIndex] =\n        sourceValues[i0] * coords.x +\n        sourceValues[i1] * coords.y +\n        sourceValues[i2] * coords.z;\n  }\n}\n\nfunction insertSplitPoint(\n  currentAttributes,\n  currentIndices,\n  currentIndexMap,\n  indices,\n  currentIndex,\n  point\n) {\n  var insertIndex = currentAttributes.position.values.length / 3;\n\n  if (currentIndex !== -1) {\n    var prevIndex = indices[currentIndex];\n    var newIndex = currentIndexMap[prevIndex];\n\n    if (newIndex === -1) {\n      currentIndexMap[prevIndex] = insertIndex;\n      currentAttributes.position.values.push(point.x, point.y, point.z);\n      currentIndices.push(insertIndex);\n      return insertIndex;\n    }\n\n    currentIndices.push(newIndex);\n    return newIndex;\n  }\n\n  currentAttributes.position.values.push(point.x, point.y, point.z);\n  currentIndices.push(insertIndex);\n  return insertIndex;\n}\n\nvar NAMED_ATTRIBUTES = {\n  position: true,\n  normal: true,\n  bitangent: true,\n  tangent: true,\n  st: true,\n  extrudeDirection: true,\n  applyOffset: true,\n};\nfunction splitLongitudeTriangles(instance) {\n  var geometry = instance.geometry;\n  var attributes = geometry.attributes;\n  var positions = attributes.position.values;\n  var normals = defined(attributes.normal)\n    ? attributes.normal.values\n    : undefined;\n  var bitangents = defined(attributes.bitangent)\n    ? attributes.bitangent.values\n    : undefined;\n  var tangents = defined(attributes.tangent)\n    ? attributes.tangent.values\n    : undefined;\n  var texCoords = defined(attributes.st) ? attributes.st.values : undefined;\n  var extrudeDirections = defined(attributes.extrudeDirection)\n    ? attributes.extrudeDirection.values\n    : undefined;\n  var applyOffset = defined(attributes.applyOffset)\n    ? attributes.applyOffset.values\n    : undefined;\n  var indices = geometry.indices;\n\n  var customAttributeNames = [];\n  for (var attributeName in attributes) {\n    if (\n      attributes.hasOwnProperty(attributeName) &&\n      !NAMED_ATTRIBUTES[attributeName] &&\n      defined(attributes[attributeName])\n    ) {\n      customAttributeNames.push(attributeName);\n    }\n  }\n  var customAttributesLength = customAttributeNames.length;\n\n  var eastGeometry = copyGeometryForSplit(geometry);\n  var westGeometry = copyGeometryForSplit(geometry);\n\n  var currentAttributes;\n  var currentIndices;\n  var currentIndexMap;\n  var insertedIndex;\n  var i;\n\n  var westGeometryIndexMap = [];\n  westGeometryIndexMap.length = positions.length / 3;\n\n  var eastGeometryIndexMap = [];\n  eastGeometryIndexMap.length = positions.length / 3;\n\n  for (i = 0; i < westGeometryIndexMap.length; ++i) {\n    westGeometryIndexMap[i] = -1;\n    eastGeometryIndexMap[i] = -1;\n  }\n\n  var len = indices.length;\n  for (i = 0; i < len; i += 3) {\n    var i0 = indices[i];\n    var i1 = indices[i + 1];\n    var i2 = indices[i + 2];\n\n    var p0 = Cartesian3.fromArray(positions, i0 * 3);\n    var p1 = Cartesian3.fromArray(positions, i1 * 3);\n    var p2 = Cartesian3.fromArray(positions, i2 * 3);\n\n    var result = splitTriangle(p0, p1, p2);\n    if (defined(result) && result.positions.length > 3) {\n      var resultPositions = result.positions;\n      var resultIndices = result.indices;\n      var resultLength = resultIndices.length;\n\n      for (var j = 0; j < resultLength; ++j) {\n        var resultIndex = resultIndices[j];\n        var point = resultPositions[resultIndex];\n\n        if (point.y < 0.0) {\n          currentAttributes = westGeometry.attributes;\n          currentIndices = westGeometry.indices;\n          currentIndexMap = westGeometryIndexMap;\n        } else {\n          currentAttributes = eastGeometry.attributes;\n          currentIndices = eastGeometry.indices;\n          currentIndexMap = eastGeometryIndexMap;\n        }\n\n        insertedIndex = insertSplitPoint(\n          currentAttributes,\n          currentIndices,\n          currentIndexMap,\n          indices,\n          resultIndex < 3 ? i + resultIndex : -1,\n          point\n        );\n        computeTriangleAttributes(\n          i0,\n          i1,\n          i2,\n          point,\n          positions,\n          normals,\n          tangents,\n          bitangents,\n          texCoords,\n          extrudeDirections,\n          applyOffset,\n          currentAttributes,\n          customAttributeNames,\n          customAttributesLength,\n          attributes,\n          insertedIndex\n        );\n      }\n    } else {\n      if (defined(result)) {\n        p0 = result.positions[0];\n        p1 = result.positions[1];\n        p2 = result.positions[2];\n      }\n\n      if (p0.y < 0.0) {\n        currentAttributes = westGeometry.attributes;\n        currentIndices = westGeometry.indices;\n        currentIndexMap = westGeometryIndexMap;\n      } else {\n        currentAttributes = eastGeometry.attributes;\n        currentIndices = eastGeometry.indices;\n        currentIndexMap = eastGeometryIndexMap;\n      }\n\n      insertedIndex = insertSplitPoint(\n        currentAttributes,\n        currentIndices,\n        currentIndexMap,\n        indices,\n        i,\n        p0\n      );\n      computeTriangleAttributes(\n        i0,\n        i1,\n        i2,\n        p0,\n        positions,\n        normals,\n        tangents,\n        bitangents,\n        texCoords,\n        extrudeDirections,\n        applyOffset,\n        currentAttributes,\n        customAttributeNames,\n        customAttributesLength,\n        attributes,\n        insertedIndex\n      );\n\n      insertedIndex = insertSplitPoint(\n        currentAttributes,\n        currentIndices,\n        currentIndexMap,\n        indices,\n        i + 1,\n        p1\n      );\n      computeTriangleAttributes(\n        i0,\n        i1,\n        i2,\n        p1,\n        positions,\n        normals,\n        tangents,\n        bitangents,\n        texCoords,\n        extrudeDirections,\n        applyOffset,\n        currentAttributes,\n        customAttributeNames,\n        customAttributesLength,\n        attributes,\n        insertedIndex\n      );\n\n      insertedIndex = insertSplitPoint(\n        currentAttributes,\n        currentIndices,\n        currentIndexMap,\n        indices,\n        i + 2,\n        p2\n      );\n      computeTriangleAttributes(\n        i0,\n        i1,\n        i2,\n        p2,\n        positions,\n        normals,\n        tangents,\n        bitangents,\n        texCoords,\n        extrudeDirections,\n        applyOffset,\n        currentAttributes,\n        customAttributeNames,\n        customAttributesLength,\n        attributes,\n        insertedIndex\n      );\n    }\n  }\n\n  updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\n}\n\nvar xzPlane = Plane.fromPointNormal(Cartesian3.ZERO, Cartesian3.UNIT_Y);\n\nvar offsetScratch = new Cartesian3();\nvar offsetPointScratch = new Cartesian3();\n\nfunction computeLineAttributes(\n  i0,\n  i1,\n  point,\n  positions,\n  insertIndex,\n  currentAttributes,\n  applyOffset\n) {\n  if (!defined(applyOffset)) {\n    return;\n  }\n\n  var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\n  if (Cartesian3.equalsEpsilon(p0, point, CesiumMath.EPSILON10)) {\n    currentAttributes.applyOffset.values[insertIndex] = applyOffset[i0];\n  } else {\n    currentAttributes.applyOffset.values[insertIndex] = applyOffset[i1];\n  }\n}\n\nfunction splitLongitudeLines(instance) {\n  var geometry = instance.geometry;\n  var attributes = geometry.attributes;\n  var positions = attributes.position.values;\n  var applyOffset = defined(attributes.applyOffset)\n    ? attributes.applyOffset.values\n    : undefined;\n  var indices = geometry.indices;\n\n  var eastGeometry = copyGeometryForSplit(geometry);\n  var westGeometry = copyGeometryForSplit(geometry);\n\n  var i;\n  var length = indices.length;\n\n  var westGeometryIndexMap = [];\n  westGeometryIndexMap.length = positions.length / 3;\n\n  var eastGeometryIndexMap = [];\n  eastGeometryIndexMap.length = positions.length / 3;\n\n  for (i = 0; i < westGeometryIndexMap.length; ++i) {\n    westGeometryIndexMap[i] = -1;\n    eastGeometryIndexMap[i] = -1;\n  }\n\n  for (i = 0; i < length; i += 2) {\n    var i0 = indices[i];\n    var i1 = indices[i + 1];\n\n    var p0 = Cartesian3.fromArray(positions, i0 * 3, p0Scratch);\n    var p1 = Cartesian3.fromArray(positions, i1 * 3, p1Scratch);\n    var insertIndex;\n\n    if (Math.abs(p0.y) < CesiumMath.EPSILON6) {\n      if (p0.y < 0.0) {\n        p0.y = -CesiumMath.EPSILON6;\n      } else {\n        p0.y = CesiumMath.EPSILON6;\n      }\n    }\n\n    if (Math.abs(p1.y) < CesiumMath.EPSILON6) {\n      if (p1.y < 0.0) {\n        p1.y = -CesiumMath.EPSILON6;\n      } else {\n        p1.y = CesiumMath.EPSILON6;\n      }\n    }\n\n    var p0Attributes = eastGeometry.attributes;\n    var p0Indices = eastGeometry.indices;\n    var p0IndexMap = eastGeometryIndexMap;\n    var p1Attributes = westGeometry.attributes;\n    var p1Indices = westGeometry.indices;\n    var p1IndexMap = westGeometryIndexMap;\n\n    var intersection = IntersectionTests.lineSegmentPlane(\n      p0,\n      p1,\n      xzPlane,\n      p2Scratch\n    );\n    if (defined(intersection)) {\n      // move point on the xz-plane slightly away from the plane\n      var offset = Cartesian3.multiplyByScalar(\n        Cartesian3.UNIT_Y,\n        5.0 * CesiumMath.EPSILON9,\n        offsetScratch\n      );\n      if (p0.y < 0.0) {\n        Cartesian3.negate(offset, offset);\n\n        p0Attributes = westGeometry.attributes;\n        p0Indices = westGeometry.indices;\n        p0IndexMap = westGeometryIndexMap;\n        p1Attributes = eastGeometry.attributes;\n        p1Indices = eastGeometry.indices;\n        p1IndexMap = eastGeometryIndexMap;\n      }\n\n      var offsetPoint = Cartesian3.add(\n        intersection,\n        offset,\n        offsetPointScratch\n      );\n\n      insertIndex = insertSplitPoint(\n        p0Attributes,\n        p0Indices,\n        p0IndexMap,\n        indices,\n        i,\n        p0\n      );\n      computeLineAttributes(\n        i0,\n        i1,\n        p0,\n        positions,\n        insertIndex,\n        p0Attributes,\n        applyOffset\n      );\n\n      insertIndex = insertSplitPoint(\n        p0Attributes,\n        p0Indices,\n        p0IndexMap,\n        indices,\n        -1,\n        offsetPoint\n      );\n      computeLineAttributes(\n        i0,\n        i1,\n        offsetPoint,\n        positions,\n        insertIndex,\n        p0Attributes,\n        applyOffset\n      );\n\n      Cartesian3.negate(offset, offset);\n      Cartesian3.add(intersection, offset, offsetPoint);\n      insertIndex = insertSplitPoint(\n        p1Attributes,\n        p1Indices,\n        p1IndexMap,\n        indices,\n        -1,\n        offsetPoint\n      );\n      computeLineAttributes(\n        i0,\n        i1,\n        offsetPoint,\n        positions,\n        insertIndex,\n        p1Attributes,\n        applyOffset\n      );\n\n      insertIndex = insertSplitPoint(\n        p1Attributes,\n        p1Indices,\n        p1IndexMap,\n        indices,\n        i + 1,\n        p1\n      );\n      computeLineAttributes(\n        i0,\n        i1,\n        p1,\n        positions,\n        insertIndex,\n        p1Attributes,\n        applyOffset\n      );\n    } else {\n      var currentAttributes;\n      var currentIndices;\n      var currentIndexMap;\n\n      if (p0.y < 0.0) {\n        currentAttributes = westGeometry.attributes;\n        currentIndices = westGeometry.indices;\n        currentIndexMap = westGeometryIndexMap;\n      } else {\n        currentAttributes = eastGeometry.attributes;\n        currentIndices = eastGeometry.indices;\n        currentIndexMap = eastGeometryIndexMap;\n      }\n\n      insertIndex = insertSplitPoint(\n        currentAttributes,\n        currentIndices,\n        currentIndexMap,\n        indices,\n        i,\n        p0\n      );\n      computeLineAttributes(\n        i0,\n        i1,\n        p0,\n        positions,\n        insertIndex,\n        currentAttributes,\n        applyOffset\n      );\n\n      insertIndex = insertSplitPoint(\n        currentAttributes,\n        currentIndices,\n        currentIndexMap,\n        indices,\n        i + 1,\n        p1\n      );\n      computeLineAttributes(\n        i0,\n        i1,\n        p1,\n        positions,\n        insertIndex,\n        currentAttributes,\n        applyOffset\n      );\n    }\n  }\n\n  updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\n}\n\nvar cartesian2Scratch0 = new Cartesian2();\nvar cartesian2Scratch1 = new Cartesian2();\n\nvar cartesian3Scratch0 = new Cartesian3();\nvar cartesian3Scratch2 = new Cartesian3();\nvar cartesian3Scratch3 = new Cartesian3();\nvar cartesian3Scratch4 = new Cartesian3();\nvar cartesian3Scratch5 = new Cartesian3();\nvar cartesian3Scratch6 = new Cartesian3();\n\nvar cartesian4Scratch0 = new Cartesian4();\n\nfunction updateAdjacencyAfterSplit(geometry) {\n  var attributes = geometry.attributes;\n  var positions = attributes.position.values;\n  var prevPositions = attributes.prevPosition.values;\n  var nextPositions = attributes.nextPosition.values;\n\n  var length = positions.length;\n  for (var j = 0; j < length; j += 3) {\n    var position = Cartesian3.unpack(positions, j, cartesian3Scratch0);\n    if (position.x > 0.0) {\n      continue;\n    }\n\n    var prevPosition = Cartesian3.unpack(prevPositions, j, cartesian3Scratch2);\n    if (\n      (position.y < 0.0 && prevPosition.y > 0.0) ||\n      (position.y > 0.0 && prevPosition.y < 0.0)\n    ) {\n      if (j - 3 > 0) {\n        prevPositions[j] = positions[j - 3];\n        prevPositions[j + 1] = positions[j - 2];\n        prevPositions[j + 2] = positions[j - 1];\n      } else {\n        Cartesian3.pack(position, prevPositions, j);\n      }\n    }\n\n    var nextPosition = Cartesian3.unpack(nextPositions, j, cartesian3Scratch3);\n    if (\n      (position.y < 0.0 && nextPosition.y > 0.0) ||\n      (position.y > 0.0 && nextPosition.y < 0.0)\n    ) {\n      if (j + 3 < length) {\n        nextPositions[j] = positions[j + 3];\n        nextPositions[j + 1] = positions[j + 4];\n        nextPositions[j + 2] = positions[j + 5];\n      } else {\n        Cartesian3.pack(position, nextPositions, j);\n      }\n    }\n  }\n}\n\nvar offsetScalar = 5.0 * CesiumMath.EPSILON9;\nvar coplanarOffset = CesiumMath.EPSILON6;\n\nfunction splitLongitudePolyline(instance) {\n  var geometry = instance.geometry;\n  var attributes = geometry.attributes;\n  var positions = attributes.position.values;\n  var prevPositions = attributes.prevPosition.values;\n  var nextPositions = attributes.nextPosition.values;\n  var expandAndWidths = attributes.expandAndWidth.values;\n\n  var texCoords = defined(attributes.st) ? attributes.st.values : undefined;\n  var colors = defined(attributes.color) ? attributes.color.values : undefined;\n\n  var eastGeometry = copyGeometryForSplit(geometry);\n  var westGeometry = copyGeometryForSplit(geometry);\n\n  var i;\n  var j;\n  var index;\n\n  var intersectionFound = false;\n\n  var length = positions.length / 3;\n  for (i = 0; i < length; i += 4) {\n    var i0 = i;\n    var i2 = i + 2;\n\n    var p0 = Cartesian3.fromArray(positions, i0 * 3, cartesian3Scratch0);\n    var p2 = Cartesian3.fromArray(positions, i2 * 3, cartesian3Scratch2);\n\n    // Offset points that are close to the 180 longitude and change the previous/next point\n    // to be the same offset point so it can be projected to 2D. There is special handling in the\n    // shader for when position == prevPosition || position == nextPosition.\n    if (Math.abs(p0.y) < coplanarOffset) {\n      p0.y = coplanarOffset * (p2.y < 0.0 ? -1.0 : 1.0);\n      positions[i * 3 + 1] = p0.y;\n      positions[(i + 1) * 3 + 1] = p0.y;\n\n      for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {\n        prevPositions[j] = positions[i * 3];\n        prevPositions[j + 1] = positions[i * 3 + 1];\n        prevPositions[j + 2] = positions[i * 3 + 2];\n      }\n    }\n\n    // Do the same but for when the line crosses 180 longitude in the opposite direction.\n    if (Math.abs(p2.y) < coplanarOffset) {\n      p2.y = coplanarOffset * (p0.y < 0.0 ? -1.0 : 1.0);\n      positions[(i + 2) * 3 + 1] = p2.y;\n      positions[(i + 3) * 3 + 1] = p2.y;\n\n      for (j = i0 * 3; j < i0 * 3 + 4 * 3; j += 3) {\n        nextPositions[j] = positions[(i + 2) * 3];\n        nextPositions[j + 1] = positions[(i + 2) * 3 + 1];\n        nextPositions[j + 2] = positions[(i + 2) * 3 + 2];\n      }\n    }\n\n    var p0Attributes = eastGeometry.attributes;\n    var p0Indices = eastGeometry.indices;\n    var p2Attributes = westGeometry.attributes;\n    var p2Indices = westGeometry.indices;\n\n    var intersection = IntersectionTests.lineSegmentPlane(\n      p0,\n      p2,\n      xzPlane,\n      cartesian3Scratch4\n    );\n    if (defined(intersection)) {\n      intersectionFound = true;\n\n      // move point on the xz-plane slightly away from the plane\n      var offset = Cartesian3.multiplyByScalar(\n        Cartesian3.UNIT_Y,\n        offsetScalar,\n        cartesian3Scratch5\n      );\n      if (p0.y < 0.0) {\n        Cartesian3.negate(offset, offset);\n        p0Attributes = westGeometry.attributes;\n        p0Indices = westGeometry.indices;\n        p2Attributes = eastGeometry.attributes;\n        p2Indices = eastGeometry.indices;\n      }\n\n      var offsetPoint = Cartesian3.add(\n        intersection,\n        offset,\n        cartesian3Scratch6\n      );\n      p0Attributes.position.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);\n      p0Attributes.position.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n      p0Attributes.position.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n\n      p0Attributes.prevPosition.values.push(\n        prevPositions[i0 * 3],\n        prevPositions[i0 * 3 + 1],\n        prevPositions[i0 * 3 + 2]\n      );\n      p0Attributes.prevPosition.values.push(\n        prevPositions[i0 * 3 + 3],\n        prevPositions[i0 * 3 + 4],\n        prevPositions[i0 * 3 + 5]\n      );\n      p0Attributes.prevPosition.values.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z);\n\n      p0Attributes.nextPosition.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n      p0Attributes.nextPosition.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n      p0Attributes.nextPosition.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n      p0Attributes.nextPosition.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n\n      Cartesian3.negate(offset, offset);\n      Cartesian3.add(intersection, offset, offsetPoint);\n      p2Attributes.position.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n      p2Attributes.position.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n      p2Attributes.position.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);\n\n      p2Attributes.prevPosition.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n      p2Attributes.prevPosition.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n      p2Attributes.prevPosition.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n      p2Attributes.prevPosition.values.push(\n        offsetPoint.x,\n        offsetPoint.y,\n        offsetPoint.z\n      );\n\n      p2Attributes.nextPosition.values.push(p2.x, p2.y, p2.z, p2.x, p2.y, p2.z);\n      p2Attributes.nextPosition.values.push(\n        nextPositions[i2 * 3],\n        nextPositions[i2 * 3 + 1],\n        nextPositions[i2 * 3 + 2]\n      );\n      p2Attributes.nextPosition.values.push(\n        nextPositions[i2 * 3 + 3],\n        nextPositions[i2 * 3 + 4],\n        nextPositions[i2 * 3 + 5]\n      );\n\n      var ew0 = Cartesian2.fromArray(\n        expandAndWidths,\n        i0 * 2,\n        cartesian2Scratch0\n      );\n      var width = Math.abs(ew0.y);\n\n      p0Attributes.expandAndWidth.values.push(-1, width, 1, width);\n      p0Attributes.expandAndWidth.values.push(-1, -width, 1, -width);\n      p2Attributes.expandAndWidth.values.push(-1, width, 1, width);\n      p2Attributes.expandAndWidth.values.push(-1, -width, 1, -width);\n\n      var t = Cartesian3.magnitudeSquared(\n        Cartesian3.subtract(intersection, p0, cartesian3Scratch3)\n      );\n      t /= Cartesian3.magnitudeSquared(\n        Cartesian3.subtract(p2, p0, cartesian3Scratch3)\n      );\n\n      if (defined(colors)) {\n        var c0 = Cartesian4.fromArray(colors, i0 * 4, cartesian4Scratch0);\n        var c2 = Cartesian4.fromArray(colors, i2 * 4, cartesian4Scratch0);\n\n        var r = CesiumMath.lerp(c0.x, c2.x, t);\n        var g = CesiumMath.lerp(c0.y, c2.y, t);\n        var b = CesiumMath.lerp(c0.z, c2.z, t);\n        var a = CesiumMath.lerp(c0.w, c2.w, t);\n\n        for (j = i0 * 4; j < i0 * 4 + 2 * 4; ++j) {\n          p0Attributes.color.values.push(colors[j]);\n        }\n        p0Attributes.color.values.push(r, g, b, a);\n        p0Attributes.color.values.push(r, g, b, a);\n        p2Attributes.color.values.push(r, g, b, a);\n        p2Attributes.color.values.push(r, g, b, a);\n        for (j = i2 * 4; j < i2 * 4 + 2 * 4; ++j) {\n          p2Attributes.color.values.push(colors[j]);\n        }\n      }\n\n      if (defined(texCoords)) {\n        var s0 = Cartesian2.fromArray(texCoords, i0 * 2, cartesian2Scratch0);\n        var s3 = Cartesian2.fromArray(\n          texCoords,\n          (i + 3) * 2,\n          cartesian2Scratch1\n        );\n\n        var sx = CesiumMath.lerp(s0.x, s3.x, t);\n\n        for (j = i0 * 2; j < i0 * 2 + 2 * 2; ++j) {\n          p0Attributes.st.values.push(texCoords[j]);\n        }\n        p0Attributes.st.values.push(sx, s0.y);\n        p0Attributes.st.values.push(sx, s3.y);\n        p2Attributes.st.values.push(sx, s0.y);\n        p2Attributes.st.values.push(sx, s3.y);\n        for (j = i2 * 2; j < i2 * 2 + 2 * 2; ++j) {\n          p2Attributes.st.values.push(texCoords[j]);\n        }\n      }\n\n      index = p0Attributes.position.values.length / 3 - 4;\n      p0Indices.push(index, index + 2, index + 1);\n      p0Indices.push(index + 1, index + 2, index + 3);\n\n      index = p2Attributes.position.values.length / 3 - 4;\n      p2Indices.push(index, index + 2, index + 1);\n      p2Indices.push(index + 1, index + 2, index + 3);\n    } else {\n      var currentAttributes;\n      var currentIndices;\n\n      if (p0.y < 0.0) {\n        currentAttributes = westGeometry.attributes;\n        currentIndices = westGeometry.indices;\n      } else {\n        currentAttributes = eastGeometry.attributes;\n        currentIndices = eastGeometry.indices;\n      }\n\n      currentAttributes.position.values.push(p0.x, p0.y, p0.z);\n      currentAttributes.position.values.push(p0.x, p0.y, p0.z);\n      currentAttributes.position.values.push(p2.x, p2.y, p2.z);\n      currentAttributes.position.values.push(p2.x, p2.y, p2.z);\n\n      for (j = i * 3; j < i * 3 + 4 * 3; ++j) {\n        currentAttributes.prevPosition.values.push(prevPositions[j]);\n        currentAttributes.nextPosition.values.push(nextPositions[j]);\n      }\n\n      for (j = i * 2; j < i * 2 + 4 * 2; ++j) {\n        currentAttributes.expandAndWidth.values.push(expandAndWidths[j]);\n        if (defined(texCoords)) {\n          currentAttributes.st.values.push(texCoords[j]);\n        }\n      }\n\n      if (defined(colors)) {\n        for (j = i * 4; j < i * 4 + 4 * 4; ++j) {\n          currentAttributes.color.values.push(colors[j]);\n        }\n      }\n\n      index = currentAttributes.position.values.length / 3 - 4;\n      currentIndices.push(index, index + 2, index + 1);\n      currentIndices.push(index + 1, index + 2, index + 3);\n    }\n  }\n\n  if (intersectionFound) {\n    updateAdjacencyAfterSplit(westGeometry);\n    updateAdjacencyAfterSplit(eastGeometry);\n  }\n\n  updateInstanceAfterSplit(instance, westGeometry, eastGeometry);\n}\n\n/**\n * Splits the instances's geometry, by introducing new vertices and indices,that\n * intersect the International Date Line and Prime Meridian so that no primitives cross longitude\n * -180/180 degrees.  This is not required for 3D drawing, but is required for\n * correcting drawing in 2D and Columbus view.\n *\n * @private\n *\n * @param {GeometryInstance} instance The instance to modify.\n * @returns {GeometryInstance} The modified <code>instance</code> argument, with it's geometry split at the International Date Line.\n *\n * @example\n * instance = Cesium.GeometryPipeline.splitLongitude(instance);\n */\nGeometryPipeline.splitLongitude = function (instance) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(instance)) {\n    throw new DeveloperError(\"instance is required.\");\n  }\n  //>>includeEnd('debug');\n\n  var geometry = instance.geometry;\n  var boundingSphere = geometry.boundingSphere;\n  if (defined(boundingSphere)) {\n    var minX = boundingSphere.center.x - boundingSphere.radius;\n    if (\n      minX > 0 ||\n      BoundingSphere.intersectPlane(boundingSphere, Plane.ORIGIN_ZX_PLANE) !==\n        Intersect.INTERSECTING\n    ) {\n      return instance;\n    }\n  }\n\n  if (geometry.geometryType !== GeometryType.NONE) {\n    switch (geometry.geometryType) {\n      case GeometryType.POLYLINES:\n        splitLongitudePolyline(instance);\n        break;\n      case GeometryType.TRIANGLES:\n        splitLongitudeTriangles(instance);\n        break;\n      case GeometryType.LINES:\n        splitLongitudeLines(instance);\n        break;\n    }\n  } else {\n    indexPrimitive(geometry);\n    if (geometry.primitiveType === PrimitiveType.TRIANGLES) {\n      splitLongitudeTriangles(instance);\n    } else if (geometry.primitiveType === PrimitiveType.LINES) {\n      splitLongitudeLines(instance);\n    }\n  }\n\n  return instance;\n};\nexport default GeometryPipeline;\n"],"names":["scratchCartesian1","Cartesian3","scratchCartesian2","scratchCartesian3","Tipsify","options","indices","defaultValue","EMPTY_OBJECT","maximumIndex","cacheSize","defined","DeveloperError","numIndices","length","currentIndex","intoIndices","vertexTimeStamps","i","s","j","tipsify","cursor","getNextVertex","oneRing","vertices","deadEnd","maximumIndexPlusOne","p","n","m","itOneRing","index","numLiveTriangles","timeStamp","d","splice","skipDeadEnd","endIndex","vertexTriangles","triangle","push","f","vertex","intoVertices","limit","currentOutputIndex","outputIndices","numTriangles","triangleEmitted","k","GeometryPipeline","addTriangle","lines","i0","i1","i2","copyAttributesDescriptions","attributes","newAttributes","attribute","hasOwnProperty","values","attr","GeometryAttribute","componentDatatype","componentsPerAttribute","normalize","copyVertex","destinationAttributes","sourceAttributes","toWireframe","geometry","primitiveType","PrimitiveType","TRIANGLES","triangles","count","size","IndexDatatype","createTypedArray","trianglesToLines","TRIANGLE_STRIP","Uint16Array","triangleStripToLines","TRIANGLE_FAN","base","triangleFanToLines","LINES","createLineSegmentsForVectors","attributeName","position","newBoundingSphere","positions","vectors","positionsLength","newPositions","Float64Array","bs","boundingSphere","BoundingSphere","center","radius","Geometry","ComponentDatatype","DOUBLE","createAttributeLocations","semantics","len","semantic","name","reorderForPreVertexCache","numVertices","computeNumberOfVertices","indexCrossReferenceOldToNew","Int32Array","tempIndex","indicesIn","indicesOut","intoIndicesIn","intoIndicesOut","nextIndex","property","elementsIn","intoElementsIn","numComponents","elementsOut","temp","reorderForPostVertexCache","cacheCapacity","fitToUnsignedShortIndices","POINTS","geometries","numberOfVertices","CesiumMath","SIXTY_FOUR_KILOBYTES","indicesPerPrimitive","oldToNewIndex","newIndices","originalIndices","numberOfIndices","x","boundingSphereCV","scratchProjectTo2DCartesian3","scratchProjectTo2DCartographic","Cartographic","projectTo2D","attributeName3D","attributeName2D","projection","ellipsoid","GeographicProjection","values3D","projectedValues","value","fromArray","lonLat","cartesianToCartographic","y","z","projectedLonLat","project","encodedResult","high","low","encodeAttribute","attributeHighName","attributeLowName","highValues","Float32Array","lowValues","EncodedCartesian3","encode","FLOAT","transformPoint","matrix","unpack","Matrix4","multiplyByPoint","pack","transformVector","Matrix3","multiplyByVector","inverseTranspose","normalMatrix","transformToWorldCoordinates","instance","modelMatrix","equals","IDENTITY","prevPosition","nextPosition","normal","tangent","bitangent","inverse","transpose","getMatrix3","transform","clone","tempScratch","combineGeometries","instances","propertyName","haveIndices","sourceValues","sourceValuesLength","attributesInAllGeometries","attributes0","numberOfComponents","inAllGeometries","otherAttribute","findAttributesInAllGeometries","destIndices","destOffset","offset","sourceIndices","sourceIndicesLen","undefined","add","divideByScalar","tempRadius","magnitude","subtract","combineInstances","instanceGeometry","instanceSplitGeometry","westHemisphereGeometry","eastHemisphereGeometry","v0","v1","v2","computeNormal","normalsPerVertex","Array","normalsPerTriangle","normalIndices","indexOffset","currentCount","i03","i13","i23","cross","vertexNormalData","normalValues","i3","ZERO","equalsEpsilon","EPSILON10","normalScratch","normalScale","tScratch","computeTangentAndBitangent","st","normals","tan1","i02","i12","i22","ux","uy","uz","wx","wy","t1","t2","r","sdirx","sdiry","sdirz","tangentValues","bitangentValues","t","scalar","dot","multiplyByScalar","Cartesian2","toEncode1","toEncode2","toEncode3","encodeResult2","indexPrimitive","indicesIndex","indexTriangleFan","indexTriangleStrip","indexTriangles","LINE_STRIP","indexLineStrip","LINE_LOOP","indexLineLoop","indexLines","offsetPointFromXZPlane","isBehind","Math","abs","EPSILON6","compressVertices","extrudeAttribute","extrudeDirection","extrudeDirections","compressedDirections","AttributeCompression","octEncodeInRange","compressedAttributes","normalAttribute","stAttribute","hasNormal","hasSt","tangents","bitangents","tangentAttribute","bitangentAttribute","hasTangent","hasBitangent","compressedLength","numCompressedComponents","normalIndex","compressTextureCoordinates","octPack","octEncodeFloat","c3","getXZIntersectionOffsetPoints","p1","u1","u2","q1","q2","splitTriangleResult","splitTriangle","p0","p2","p0y","p1y","p2y","sign","offsetTriangleFromXZPlane","p0Behind","p1Behind","p2Behind","numBehind","updateGeometryAfterSplit","computeBoundingSphere","fromVertices","copyGeometryForSplit","copiedAttributes","updateInstanceAfterSplit","westGeometry","eastGeometry","generateBarycentricInterpolateFunction","CartesianType","v0Scratch","v1Scratch","v2Scratch","coords","currentValues","insertedIndex","interpolateAndPackCartesian4","Cartesian4","interpolateAndPackCartesian3","interpolateAndPackCartesian2","p0Scratch","p1Scratch","p2Scratch","barycentricScratch","computeTriangleAttributes","point","texCoords","applyOffset","currentAttributes","customAttributeNames","customAttributesLength","allAttributes","result","dot00","dot01","dot02","dot11","dot12","Check","EPSILON14","UNIT_X","UNIT_Y","UNIT_Z","q","barycentricCoordinates","direction","d0","d1","d2","v3","interpolateAndPackBoolean","genericInterpolate","sourceAttribute","currentAttribute","insertSplitPoint","currentIndices","currentIndexMap","insertIndex","prevIndex","newIndex","NAMED_ATTRIBUTES","splitLongitudeTriangles","westGeometryIndexMap","eastGeometryIndexMap","resultPositions","resultIndices","resultLength","resultIndex","xzPlane","Plane","fromPointNormal","offsetScratch","offsetPointScratch","computeLineAttributes","splitLongitudeLines","p0Attributes","p0Indices","p0IndexMap","p1Attributes","p1Indices","p1IndexMap","intersection","IntersectionTests","lineSegmentPlane","EPSILON9","negate","offsetPoint","cartesian2Scratch0","cartesian2Scratch1","cartesian3Scratch0","cartesian3Scratch2","cartesian3Scratch3","cartesian3Scratch4","cartesian3Scratch5","cartesian3Scratch6","cartesian4Scratch0","updateAdjacencyAfterSplit","prevPositions","nextPositions","offsetScalar","coplanarOffset","splitLongitude","intersectPlane","ORIGIN_ZX_PLANE","Intersect","INTERSECTING","geometryType","GeometryType","NONE","POLYLINES","expandAndWidths","expandAndWidth","colors","color","intersectionFound","p2Attributes","p2Indices","ew0","width","magnitudeSquared","c0","c2","lerp","g","b","a","w","s0","s3","sx","splitLongitudePolyline"],"mappings":"wWAMA,IAAIA,EAAoB,IAAIC,aACxBC,EAAoB,IAAID,aACxBE,EAAoB,IAAIF,aCU5B,IAAIG,EAAU,CAsBdA,cAAwB,SAAUC,GAEhC,IAAIC,GADJD,EAAUE,eAAaF,EAASE,eAAaC,eACvBF,QAClBG,EAAeJ,EAAQI,aACvBC,EAAYH,eAAaF,EAAQK,UAAW,IAGhD,IAAKC,UAAQL,GACX,MAAM,IAAIM,iBAAe,wBAI3B,IAAIC,EAAaP,EAAQQ,OAGzB,GAAID,EAAa,GAAKA,EAAa,GAAM,EACvC,MAAM,IAAID,iBAAe,+CAE3B,GAAIH,GAAgB,EAClB,MAAM,IAAIG,iBAAe,2CAE3B,GAAIF,EAAY,EACd,MAAM,IAAIE,iBAAe,uCAK3B,IAAKD,UAAQF,GAAe,CAC1BA,EAAe,EAGf,IAFA,IAAIM,EAAe,EACfC,EAAcV,EAAQS,GACnBA,EAAeF,GAChBG,EAAcP,IAChBA,EAAeO,GAGjBA,EAAcV,IADZS,GAON,IADA,IAAIE,EAAmB,GACdC,EAAI,EAAGA,EAAIT,EAAe,EAAGS,IACpCD,EAAiBC,GAAK,EAKxB,IADA,IAAIC,EAAIT,EAAY,EACXU,EAAI,EAAGA,EAAIP,IAAcO,EAC5BD,EAAIF,EAAiBX,EAAQc,IAAMV,IACrCO,EAAiBX,EAAQc,IAAMD,IAC7BA,GAIN,OAAQA,EAAIT,EAAY,IAAMG,EAAa,KAuB7CT,EAAQiB,QAAU,SAAUhB,GAE1B,IAIIiB,EAJAhB,GADJD,EAAUE,eAAaF,EAASE,eAAaC,eACvBF,QAClBG,EAAeJ,EAAQI,aACvBC,EAAYH,eAAaF,EAAQK,UAAW,IAyBhD,SAASa,EACPjB,EACAI,EACAc,EACAC,EACAN,EACAO,EACAC,GAMA,IAJA,IACIC,EADAC,GAAK,EAELC,GAAK,EACLC,EAAY,EACTA,EAAYP,EAAQV,QAAQ,CACjC,IAAIkB,EAAQR,EAAQO,GAChBN,EAASO,GAAOC,mBAClBL,EAAI,EAEFT,EACEM,EAASO,GAAOE,UAChB,EAAIT,EAASO,GAAOC,kBACtBvB,IAEAkB,EAAIT,EAAIM,EAASO,GAAOE,YAEtBN,EAAIE,IAAY,IAAPA,KACXA,EAAIF,EACJC,EAAIG,MAGND,EAEJ,OAAW,IAAPF,EArDN,SAAqBJ,EAAUC,EAASpB,EAASqB,GAC/C,KAAOD,EAAQZ,QAAU,GAAG,CAE1B,IAAIqB,EAAIT,EAAQA,EAAQZ,OAAS,GAGjC,GAFAY,EAAQU,OAAOV,EAAQZ,OAAS,EAAG,GAE/BW,EAASU,GAAGF,iBAAmB,EACjC,OAAOE,EAIX,KAAOb,EAASK,GAAqB,CACnC,GAAIF,EAASH,GAAQW,iBAAmB,EAEtC,QADEX,EACc,IAEhBA,EAEJ,OAAQ,EAoCCe,CAAYZ,EAAUC,EAASpB,EAASqB,GAE1CE,EAIT,IAAKlB,UAAQL,GACX,MAAM,IAAIM,iBAAe,wBAI3B,IAAIC,EAAaP,EAAQQ,OAGzB,GAAID,EAAa,GAAKA,EAAa,GAAM,EACvC,MAAM,IAAID,iBAAe,+CAE3B,GAAIH,GAAgB,EAClB,MAAM,IAAIG,iBAAe,2CAE3B,GAAIF,EAAY,EACd,MAAM,IAAIE,iBAAe,uCAK3B,IAAIe,EAAsB,EACtBZ,EAAe,EACfC,EAAcV,EAAQS,GACtBuB,EAAWzB,EACf,GAAIF,UAAQF,GACVkB,EAAsBlB,EAAe,MAChC,CACL,KAAOM,EAAeuB,GAChBtB,EAAcW,IAChBA,EAAsBX,GAGxBA,EAAcV,IADZS,GAGJ,IAA6B,IAAzBY,EACF,OAAO,IAEPA,EAIJ,IACIT,EADAO,EAAW,GAEf,IAAKP,EAAI,EAAGA,EAAIS,EAAqBT,IACnCO,EAASP,GAAK,CACZe,iBAAkB,EAClBC,UAAW,EACXK,gBAAiB,IAGrBxB,EAAe,EAEf,IADA,IAAIyB,EAAW,EACRzB,EAAeuB,GACpBb,EAASnB,EAAQS,IAAewB,gBAAgBE,KAAKD,KACnDf,EAASnB,EAAQS,IAAekB,iBAClCR,EAASnB,EAAQS,EAAe,IAAIwB,gBAAgBE,KAAKD,KACvDf,EAASnB,EAAQS,EAAe,IAAIkB,iBACtCR,EAASnB,EAAQS,EAAe,IAAIwB,gBAAgBE,KAAKD,KACvDf,EAASnB,EAAQS,EAAe,IAAIkB,mBACpCO,EACFzB,GAAgB,EAIlB,IAAI2B,EAAI,EAGJvB,EAAIT,EAAY,EACpBY,EAAS,EAGT,IAEIqB,EACAC,EAQAZ,EACAa,EAZArB,EAAU,GACVE,EAAU,GAGVoB,EAAqB,EACrBC,EAAgB,GAChBC,EAAenC,EAAa,EAC5BoC,EAAkB,GACtB,IAAK/B,EAAI,EAAGA,EAAI8B,EAAc9B,IAC5B+B,EAAgB/B,IAAK,EAIvB,MAAc,IAAPwB,GAAU,CACflB,EAAU,GAEVqB,GADAD,EAAenB,EAASiB,IACHH,gBAAgBzB,OACrC,IAAK,IAAIoC,EAAI,EAAGA,EAAIL,IAASK,EAE3B,IAAKD,EADLT,EAAWI,EAAaL,gBAAgBW,IACR,CAC9BD,EAAgBT,IAAY,EAC5BzB,EAAeyB,EAAWA,EAAWA,EACrC,IAAK,IAAIpB,EAAI,EAAGA,EAAI,IAAKA,EAEvBY,EAAQ1B,EAAQS,GAChBS,EAAQiB,KAAKT,GACbN,EAAQe,KAAKT,GAGbe,EAAcD,GAAsBd,IAClCc,KAGFH,EAASlB,EAASO,IACTC,iBACLd,EAAIwB,EAAOT,UAAYxB,IACzBiC,EAAOT,UAAYf,IACjBA,KAEFJ,EAIR2B,EAAInB,EACFjB,EACAI,EACAc,EACAC,EACAN,EACAO,EACAC,GAIJ,OAAOoB,OCtRLI,EAAmB,GAEvB,SAASC,EAAYC,EAAOrB,EAAOsB,EAAIC,EAAIC,GACzCH,EAAMrB,KAAWsB,EACjBD,EAAMrB,KAAWuB,EAEjBF,EAAMrB,KAAWuB,EACjBF,EAAMrB,KAAWwB,EAEjBH,EAAMrB,KAAWwB,EACjBH,EAAMrB,GAASsB,EA6YjB,SAASG,EAA2BC,GAClC,IAAIC,EAAgB,GAEpB,IAAK,IAAIC,KAAaF,EACpB,GACEA,EAAWG,eAAeD,IAC1BjD,UAAQ+C,EAAWE,KACnBjD,UAAQ+C,EAAWE,GAAWE,QAC9B,CACA,IAAIC,EAAOL,EAAWE,GACtBD,EAAcC,GAAa,IAAII,oBAAkB,CAC/CC,kBAAmBF,EAAKE,kBACxBC,uBAAwBH,EAAKG,uBAC7BC,UAAWJ,EAAKI,UAChBL,OAAQ,KAKd,OAAOH,EAGT,SAASS,EAAWC,EAAuBC,EAAkBtC,GAC3D,IAAK,IAAI4B,KAAaU,EACpB,GACEA,EAAiBT,eAAeD,IAChCjD,UAAQ2D,EAAiBV,KACzBjD,UAAQ2D,EAAiBV,GAAWE,QAIpC,IAFA,IAAIC,EAAOO,EAAiBV,GAEnBV,EAAI,EAAGA,EAAIa,EAAKG,yBAA0BhB,EACjDmB,EAAsBT,GAAWE,OAAOrB,KACtCsB,EAAKD,OAAO9B,EAAQ+B,EAAKG,uBAAyBhB,IAnW5DC,EAAiBoB,YAAc,SAAUC,GAEvC,IAAK7D,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAI3B,IAAIN,EAAUkE,EAASlE,QACvB,GAAIK,UAAQL,GAAU,CACpB,OAAQkE,EAASC,eACf,KAAKC,gBAAcC,UACjBH,EAASlE,QAnFjB,SAA0BsE,GAMxB,IALA,IAAIC,EAAQD,EAAU9D,OAClBgE,EAAQD,EAAQ,EAAK,EACrBxB,EAAQ0B,gBAAcC,iBAAiBH,EAAOC,GAE9C9C,EAAQ,EACHd,EAAI,EAAGA,EAAI2D,EAAO3D,GAAK,EAAGc,GAAS,EAC1CoB,EAAYC,EAAOrB,EAAO4C,EAAU1D,GAAI0D,EAAU1D,EAAI,GAAI0D,EAAU1D,EAAI,IAG1E,OAAOmC,EAyEkB4B,CAAiB3E,GACpC,MACF,KAAKoE,gBAAcQ,eACjBV,EAASlE,QAzEjB,SAA8BsE,GAC5B,IAAIC,EAAQD,EAAU9D,OACtB,GAAI+D,GAAS,EAAG,CACd,IAAIC,EAAqB,GAAbD,EAAQ,GAChBxB,EAAQ0B,gBAAcC,iBAAiBH,EAAOC,GAElD1B,EAAYC,EAAO,EAAGuB,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAG5D,IAFA,IAAI5C,EAAQ,EAEHd,EAAI,EAAGA,EAAI2D,IAAS3D,EAAGc,GAAS,EACvCoB,EACEC,EACArB,EACA4C,EAAU1D,EAAI,GACd0D,EAAU1D,GACV0D,EAAU1D,EAAI,IAIlB,OAAOmC,EAGT,OAAO,IAAI8B,YAmDcC,CAAqB9E,GACxC,MACF,KAAKoE,gBAAcW,aACjBb,EAASlE,QAnDjB,SAA4BsE,GAC1B,GAAIA,EAAU9D,OAAS,EAAG,CAOxB,IANA,IAAI+D,EAAQD,EAAU9D,OAAS,EAC3BgE,EAAqB,GAAbD,EAAQ,GAChBxB,EAAQ0B,gBAAcC,iBAAiBH,EAAOC,GAE9CQ,EAAOV,EAAU,GACjB5C,EAAQ,EACHd,EAAI,EAAGA,EAAI2D,IAAS3D,EAAGc,GAAS,EACvCoB,EAAYC,EAAOrB,EAAOsD,EAAMV,EAAU1D,GAAI0D,EAAU1D,EAAI,IAG9D,OAAOmC,EAGT,OAAO,IAAI8B,YAoCcI,CAAmBjF,GACtC,MAEF,QACE,MAAM,IAAIM,iBACR,8EAKN4D,EAASC,cAAgBC,gBAAcc,MAGzC,OAAOhB,GAkBTrB,EAAiBsC,6BAA+B,SAC9CjB,EACAkB,EACA5E,GAKA,GAHA4E,EAAgBnF,eAAamF,EAAe,WAGvC/E,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAE3B,IAAKD,UAAQ6D,EAASd,WAAWiC,UAC/B,MAAM,IAAI/E,iBAAe,6CAE3B,IAAKD,UAAQ6D,EAASd,WAAWgC,IAC/B,MAAM,IAAI9E,iBACR,iGACE8E,EACA,KAKN5E,EAASP,eAAaO,EAAQ,KAS9B,IAPA,IAiBI8E,EAjBAC,EAAYrB,EAASd,WAAWiC,SAAS7B,OACzCgC,EAAUtB,EAASd,WAAWgC,GAAe5B,OAC7CiC,EAAkBF,EAAU/E,OAE5BkF,EAAe,IAAIC,aAAa,EAAIF,GAEpC3E,EAAI,EACCF,EAAI,EAAGA,EAAI6E,EAAiB7E,GAAK,EACxC8E,EAAa5E,KAAOyE,EAAU3E,GAC9B8E,EAAa5E,KAAOyE,EAAU3E,EAAI,GAClC8E,EAAa5E,KAAOyE,EAAU3E,EAAI,GAElC8E,EAAa5E,KAAOyE,EAAU3E,GAAK4E,EAAQ5E,GAAKJ,EAChDkF,EAAa5E,KAAOyE,EAAU3E,EAAI,GAAK4E,EAAQ5E,EAAI,GAAKJ,EACxDkF,EAAa5E,KAAOyE,EAAU3E,EAAI,GAAK4E,EAAQ5E,EAAI,GAAKJ,EAI1D,IAAIoF,EAAK1B,EAAS2B,eAKlB,OAJIxF,UAAQuF,KACVN,EAAoB,IAAIQ,iBAAeF,EAAGG,OAAQH,EAAGI,OAASxF,IAGzD,IAAIyF,WAAS,CAClB7C,WAAY,CACViC,SAAU,IAAI3B,oBAAkB,CAC9BC,kBAAmBuC,oBAAkBC,OACrCvC,uBAAwB,EACxBJ,OAAQkC,KAGZvB,cAAeC,gBAAcc,MAC7BW,eAAgBP,KAmBpBzC,EAAiBuD,yBAA2B,SAAUlC,GAEpD,IAAK7D,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAM3B,IA8BIM,EA9BAyF,EAAY,CACd,WACA,eACA,cAGA,iBACA,gBACA,iBACA,gBAGA,YAGA,SACA,KACA,UACA,YAGA,mBAGA,wBAGEjD,EAAac,EAASd,WACtBpD,EAAU,GACVc,EAAI,EAEJwF,EAAMD,EAAU7F,OAGpB,IAAKI,EAAI,EAAGA,EAAI0F,IAAO1F,EAAG,CACxB,IAAI2F,EAAWF,EAAUzF,GAErBP,UAAQ+C,EAAWmD,MACrBvG,EAAQuG,GAAYzF,KAKxB,IAAK,IAAI0F,KAAQpD,EACXA,EAAWG,eAAeiD,KAAUnG,UAAQL,EAAQwG,MACtDxG,EAAQwG,GAAQ1F,KAIpB,OAAOd,GAiBT6C,EAAiB4D,yBAA2B,SAAUvC,GAEpD,IAAK7D,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAI3B,IAAIoG,EAAcT,WAASU,wBAAwBzC,GAE/ClE,EAAUkE,EAASlE,QACvB,GAAIK,UAAQL,GAAU,CAEpB,IADA,IAAI4G,EAA8B,IAAIC,WAAWH,GACxC9F,EAAI,EAAGA,EAAI8F,EAAa9F,IAC/BgG,EAA4BhG,IAAM,EAYpC,IARA,IAOIkG,EAPAC,EAAY/G,EACZO,EAAawG,EAAUvG,OACvBwG,EAAavC,gBAAcC,iBAAiBgC,EAAanG,GAEzD0G,EAAgB,EAChBC,EAAiB,EACjBC,EAAY,EAETF,EAAgB1G,IAEF,KADnBuG,EAAYF,EAA4BG,EAAUE,KAEhDD,EAAWE,GAAkBJ,GAG7BF,EADAE,EAAYC,EAAUE,IACmBE,EAEzCH,EAAWE,GAAkBC,IAC3BA,KAEFF,IACAC,EAEJhD,EAASlE,QAAUgH,EAGnB,IAAI5D,EAAac,EAASd,WAC1B,IAAK,IAAIgE,KAAYhE,EACnB,GACEA,EAAWG,eAAe6D,IAC1B/G,UAAQ+C,EAAWgE,KACnB/G,UAAQ+C,EAAWgE,GAAU5D,QAC7B,CASA,IARA,IAAIF,EAAYF,EAAWgE,GACvBC,EAAa/D,EAAUE,OACvB8D,EAAiB,EACjBC,EAAgBjE,EAAUM,uBAC1B4D,EAActB,oBAAkBxB,iBAClCpB,EAAUK,kBACVwD,EAAYI,GAEPD,EAAiBZ,GAAa,CACnC,IAAIe,EAAOb,EAA4BU,GACvC,IAAc,IAAVG,EACF,IAAK,IAAI3G,EAAI,EAAGA,EAAIyG,EAAezG,IACjC0G,EAAYD,EAAgBE,EAAO3G,GACjCuG,EAAWE,EAAgBD,EAAiBxG,KAGhDwG,EAEJhE,EAAUE,OAASgE,GAKzB,OAAOtD,GAsBTrB,EAAiB6E,0BAA4B,SAC3CxD,EACAyD,GAGA,IAAKtH,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAI3B,IAAIN,EAAUkE,EAASlE,QACvB,GAAIkE,EAASC,gBAAkBC,gBAAcC,WAAahE,UAAQL,GAAU,CAG1E,IAFA,IAAIO,EAAaP,EAAQQ,OACrBL,EAAe,EACVW,EAAI,EAAGA,EAAIP,EAAYO,IAC1Bd,EAAQc,GAAKX,IACfA,EAAeH,EAAQc,IAG3BoD,EAASlE,QAAUF,EAAQiB,QAAQ,CACjCf,QAASA,EACTG,aAAcA,EACdC,UAAWuH,IAIf,OAAOzD,GA4DTrB,EAAiB+E,0BAA4B,SAAU1D,GAErD,IAAK7D,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAE3B,GACED,UAAQ6D,EAASlE,UACjBkE,EAASC,gBAAkBC,gBAAcC,WACzCH,EAASC,gBAAkBC,gBAAcc,OACzChB,EAASC,gBAAkBC,gBAAcyD,OAEzC,MAAM,IAAIvH,iBACR,+GAKJ,IAAIwH,EAAa,GAIbC,EAAmB9B,WAASU,wBAAwBzC,GACxD,GACE7D,UAAQ6D,EAASlE,UACjB+H,GAAoBC,aAAWC,qBAC/B,CACA,IAQIC,EARAC,EAAgB,GAChBC,EAAa,GACb3H,EAAe,EACf4C,EAAgBF,EAA2Be,EAASd,YAEpDiF,EAAkBnE,EAASlE,QAC3BsI,EAAkBD,EAAgB7H,OAIlC0D,EAASC,gBAAkBC,gBAAcC,UAC3C6D,EAAsB,EACbhE,EAASC,gBAAkBC,gBAAcc,MAClDgD,EAAsB,EACbhE,EAASC,gBAAkBC,gBAAcyD,SAClDK,EAAsB,GAGxB,IAAK,IAAIpH,EAAI,EAAGA,EAAIwH,EAAiBxH,GAAKoH,EAAqB,CAC7D,IAAK,IAAItF,EAAI,EAAGA,EAAIsF,IAAuBtF,EAAG,CAC5C,IAAI2F,EAAIF,EAAgBvH,EAAI8B,GACxBhC,EAAIuH,EAAcI,GACjBlI,UAAQO,KACXA,EAAIH,IACJ0H,EAAcI,GAAK3H,EACnBkD,EAAWT,EAAea,EAASd,WAAYmF,IAEjDH,EAAWjG,KAAKvB,GAIhBH,EAAeyH,GACfF,aAAWC,uBAEXH,EAAW3F,KACT,IAAI8D,WAAS,CACX7C,WAAYC,EACZrD,QAASoI,EACTjE,cAAeD,EAASC,cACxB0B,eAAgB3B,EAAS2B,eACzB2C,iBAAkBtE,EAASsE,oBAK/BL,EAAgB,GAChBC,EAAa,GACb3H,EAAe,EACf4C,EAAgBF,EAA2Be,EAASd,aAI9B,IAAtBgF,EAAW5H,QACbsH,EAAW3F,KACT,IAAI8D,WAAS,CACX7C,WAAYC,EACZrD,QAASoI,EACTjE,cAAeD,EAASC,cACxB0B,eAAgB3B,EAAS2B,eACzB2C,iBAAkBtE,EAASsE,yBAMjCV,EAAW3F,KAAK+B,GAGlB,OAAO4D,GAGT,IAAIW,EAA+B,IAAI9I,aACnC+I,EAAiC,IAAIC,eAuBzC9F,EAAiB+F,YAAc,SAC7B1E,EACAkB,EACAyD,EACAC,EACAC,GAGA,IAAK1I,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAE3B,IAAKD,UAAQ+E,GACX,MAAM,IAAI9E,iBAAe,8BAE3B,IAAKD,UAAQwI,GACX,MAAM,IAAIvI,iBAAe,gCAE3B,IAAKD,UAAQyI,GACX,MAAM,IAAIxI,iBAAe,gCAE3B,IAAKD,UAAQ6D,EAASd,WAAWgC,IAC/B,MAAM,IAAI9E,iBACR,qEACE8E,EACA,KAGN,GACElB,EAASd,WAAWgC,GAAezB,oBACnCuC,oBAAkBC,OAElB,MAAM,IAAI7F,iBACR,qEAcJ,IATA,IAAIgD,EAAYY,EAASd,WAAWgC,GAEhC4D,GADJD,EAAa1I,UAAQ0I,GAAcA,EAAa,IAAIE,wBACzBD,UAGvBE,EAAW5F,EAAUE,OACrB2F,EAAkB,IAAIxD,aAAauD,EAAS1I,QAC5CkB,EAAQ,EAEHd,EAAI,EAAGA,EAAIsI,EAAS1I,OAAQI,GAAK,EAAG,CAC3C,IAAIwI,EAAQzJ,aAAW0J,UAAUH,EAAUtI,EAAG6H,GAE1Ca,EAASN,EAAUO,wBACrBH,EACAV,GAGF,IAAKrI,UAAQiJ,GACX,MAAM,IAAIhJ,iBACR,4BACE8I,EAAMb,EACN,KACAa,EAAMI,EACN,KACAJ,EAAMK,EACN,YAKN,IAAIC,EAAkBX,EAAWY,QAC/BL,EACAb,GAGFU,EAAgBzH,KAAWgI,EAAgBnB,EAC3CY,EAAgBzH,KAAWgI,EAAgBF,EAC3CL,EAAgBzH,KAAWgI,EAAgBD,EAc7C,OAVAvF,EAASd,WAAWyF,GAAmBvF,EAGvCY,EAASd,WAAW0F,GAAmB,IAAIpF,oBAAkB,CAC3DC,kBAAmBuC,oBAAkBC,OACrCvC,uBAAwB,EACxBJ,OAAQ2F,WAEHjF,EAASd,WAAWgC,GAEpBlB,GAGT,IAAI0F,EAAgB,CAClBC,KAAM,EACNC,IAAK,GAsBPjH,EAAiBkH,gBAAkB,SACjC7F,EACAkB,EACA4E,EACAC,GAGA,IAAK5J,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAE3B,IAAKD,UAAQ+E,GACX,MAAM,IAAI9E,iBAAe,8BAE3B,IAAKD,UAAQ2J,GACX,MAAM,IAAI1J,iBAAe,kCAE3B,IAAKD,UAAQ4J,GACX,MAAM,IAAI3J,iBAAe,iCAE3B,IAAKD,UAAQ6D,EAASd,WAAWgC,IAC/B,MAAM,IAAI9E,iBACR,qEACE8E,EACA,KAGN,GACElB,EAASd,WAAWgC,GAAezB,oBACnCuC,oBAAkBC,OAElB,MAAM,IAAI7F,iBACR,qEAWJ,IANA,IAAIgD,EAAYY,EAASd,WAAWgC,GAChC5B,EAASF,EAAUE,OACnBhD,EAASgD,EAAOhD,OAChB0J,EAAa,IAAIC,aAAa3J,GAC9B4J,EAAY,IAAID,aAAa3J,GAExBI,EAAI,EAAGA,EAAIJ,IAAUI,EAC5ByJ,oBAAkBC,OAAO9G,EAAO5C,GAAIgJ,GACpCM,EAAWtJ,GAAKgJ,EAAcC,KAC9BO,EAAUxJ,GAAKgJ,EAAcE,IAG/B,IAAIlG,EAAyBN,EAAUM,uBAcvC,OAZAM,EAASd,WAAW4G,GAAqB,IAAItG,oBAAkB,CAC7DC,kBAAmBuC,oBAAkBqE,MACrC3G,uBAAwBA,EACxBJ,OAAQ0G,IAEVhG,EAASd,WAAW6G,GAAoB,IAAIvG,oBAAkB,CAC5DC,kBAAmBuC,oBAAkBqE,MACrC3G,uBAAwBA,EACxBJ,OAAQ4G,WAEHlG,EAASd,WAAWgC,GAEpBlB,GAGT,IAAIrE,EAAoB,IAAIF,aAE5B,SAAS6K,EAAeC,EAAQnH,GAC9B,GAAIjD,UAAQiD,GAGV,IAFA,IAAIE,EAASF,EAAUE,OACnBhD,EAASgD,EAAOhD,OACXI,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,EAC/BjB,aAAW+K,OAAOlH,EAAQ5C,EAAGf,GAC7B8K,UAAQC,gBAAgBH,EAAQ5K,EAAmBA,GACnDF,aAAWkL,KAAKhL,EAAmB2D,EAAQ5C,GAKjD,SAASkK,EAAgBL,EAAQnH,GAC/B,GAAIjD,UAAQiD,GAGV,IAFA,IAAIE,EAASF,EAAUE,OACnBhD,EAASgD,EAAOhD,OACXI,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,EAC/BjB,aAAW+K,OAAOlH,EAAQ5C,EAAGf,GAC7BkL,UAAQC,iBAAiBP,EAAQ5K,EAAmBA,GACpDA,EAAoBF,aAAWkE,UAC7BhE,EACAA,GAEFF,aAAWkL,KAAKhL,EAAmB2D,EAAQ5C,GAKjD,IAAIqK,EAAmB,IAAIN,UACvBO,EAAe,IAAIH,UAcvBlI,EAAiBsI,4BAA8B,SAAUC,GAEvD,IAAK/K,UAAQ+K,GACX,MAAM,IAAI9K,iBAAe,yBAI3B,IAAI+K,EAAcD,EAASC,YAE3B,GAAIV,UAAQW,OAAOD,EAAaV,UAAQY,UAEtC,OAAOH,EAGT,IAAIhI,EAAagI,EAASlH,SAASd,WAGnCoH,EAAea,EAAajI,EAAWiC,UACvCmF,EAAea,EAAajI,EAAWoI,cACvChB,EAAea,EAAajI,EAAWqI,eAGrCpL,UAAQ+C,EAAWsI,SACnBrL,UAAQ+C,EAAWuI,UACnBtL,UAAQ+C,EAAWwI,cAEnBjB,UAAQkB,QAAQR,EAAaJ,GAC7BN,UAAQmB,UAAUb,EAAkBA,GACpCN,UAAQoB,WAAWd,EAAkBC,GAErCJ,EAAgBI,EAAc9H,EAAWsI,QACzCZ,EAAgBI,EAAc9H,EAAWuI,SACzCb,EAAgBI,EAAc9H,EAAWwI,YAG3C,IAAI/F,EAAiBuF,EAASlH,SAAS2B,eAWvC,OAVIxF,UAAQwF,KACVuF,EAASlH,SAAS2B,eAAiBC,iBAAekG,UAChDnG,EACAwF,EACAxF,IAIJuF,EAASC,YAAcV,UAAQsB,MAAMtB,UAAQY,UAEtCH,GAwDT,IAAIc,EAAc,IAAIvM,aAEtB,SAASwM,EAAkBC,EAAWC,GACpC,IAEI7F,EACA5F,EACAE,EACA8B,EALApC,EAAS4L,EAAU5L,OAOnBgB,EAAI4K,EAAU,GAAGf,YACjBiB,EAAcjM,UAAQ+L,EAAU,GAAGC,GAAcrM,SACjDmE,EAAgBiI,EAAU,GAAGC,GAAclI,cAG/C,IAAKvD,EAAI,EAAGA,EAAIJ,IAAUI,EAAG,CAC3B,IAAK+J,UAAQW,OAAOc,EAAUxL,GAAGyK,YAAa7J,GAC5C,MAAM,IAAIlB,iBAAe,iDAE3B,GAAID,UAAQ+L,EAAUxL,GAAGyL,GAAcrM,WAAasM,EAClD,MAAM,IAAIhM,iBACR,iEAGJ,GAAI8L,EAAUxL,GAAGyL,GAAclI,gBAAkBA,EAC/C,MAAM,IAAI7D,iBACR,6DAON,IACIkD,EACA+I,EACAC,EAoBAxM,EAvBAoD,EAtFN,SAAuCgJ,EAAWC,GAChD,IAKI7F,EALAhG,EAAS4L,EAAU5L,OAEnBiM,EAA4B,GAE5BC,EAAcN,EAAU,GAAGC,GAAcjJ,WAG7C,IAAKoD,KAAQkG,EACX,GACEA,EAAYnJ,eAAeiD,IAC3BnG,UAAQqM,EAAYlG,KACpBnG,UAAQqM,EAAYlG,GAAMhD,QAC1B,CAMA,IALA,IAAIF,EAAYoJ,EAAYlG,GACxBmG,EAAqBrJ,EAAUE,OAAOhD,OACtCoM,GAAkB,EAGbhM,EAAI,EAAGA,EAAIJ,IAAUI,EAAG,CAC/B,IAAIiM,EAAiBT,EAAUxL,GAAGyL,GAAcjJ,WAAWoD,GAE3D,IACGnG,UAAQwM,IACTvJ,EAAUK,oBAAsBkJ,EAAelJ,mBAC/CL,EAAUM,yBACRiJ,EAAejJ,wBACjBN,EAAUO,YAAcgJ,EAAehJ,UACvC,CACA+I,GAAkB,EAClB,MAGFD,GAAsBE,EAAerJ,OAAOhD,OAG1CoM,IACFH,EAA0BjG,GAAQ,IAAI9C,oBAAkB,CACtDC,kBAAmBL,EAAUK,kBAC7BC,uBAAwBN,EAAUM,uBAClCC,UAAWP,EAAUO,UACrBL,OAAQ0C,oBAAkBxB,iBACxBpB,EAAUK,kBACVgJ,MAOV,OAAOF,EAoCUK,CAA8BV,EAAWC,GAM1D,IAAK7F,KAAQpD,EACX,GAAIA,EAAWG,eAAeiD,GAI5B,IAHAhD,EAASJ,EAAWoD,GAAMhD,OAE1BZ,EAAI,EACChC,EAAI,EAAGA,EAAIJ,IAAUI,EAIxB,IAFA4L,GADAD,EAAeH,EAAUxL,GAAGyL,GAAcjJ,WAAWoD,GAAMhD,QACzBhD,OAE7BM,EAAI,EAAGA,EAAI0L,IAAsB1L,EACpC0C,EAAOZ,KAAO2J,EAAazL,GASnC,GAAIwL,EAAa,CACf,IAAIhE,EAAkB,EACtB,IAAK1H,EAAI,EAAGA,EAAIJ,IAAUI,EACxB0H,GAAmB8D,EAAUxL,GAAGyL,GAAcrM,QAAQQ,OAGxD,IAAIuH,EAAmB9B,WAASU,wBAC9B,IAAIV,WAAS,CACX7C,WAAYA,EACZe,cAAeC,gBAAcyD,UAG7BkF,EAActI,gBAAcC,iBAC9BqD,EACAO,GAGE0E,EAAa,EACbC,EAAS,EAEb,IAAKrM,EAAI,EAAGA,EAAIJ,IAAUI,EAAG,CAC3B,IAAIsM,EAAgBd,EAAUxL,GAAGyL,GAAcrM,QAC3CmN,EAAmBD,EAAc1M,OAErC,IAAKoC,EAAI,EAAGA,EAAIuK,IAAoBvK,EAClCmK,EAAYC,KAAgBC,EAASC,EAActK,GAGrDqK,GAAUhH,WAASU,wBAAwByF,EAAUxL,GAAGyL,IAG1DrM,EAAU+M,EAIZ,IAEInH,EAFAG,EAAS,IAAIpG,aACbqG,EAAS,EAGb,IAAKpF,EAAI,EAAGA,EAAIJ,IAAUI,EAAG,CAE3B,GADAgF,EAAKwG,EAAUxL,GAAGyL,GAAcxG,gBAC3BxF,UAAQuF,GAAK,CAEhBG,OAASqH,EACT,MAGFzN,aAAW0N,IAAIzH,EAAGG,OAAQA,EAAQA,GAGpC,GAAI1F,UAAQ0F,GAGV,IAFApG,aAAW2N,eAAevH,EAAQvF,EAAQuF,GAErCnF,EAAI,EAAGA,EAAIJ,IAAUI,EAAG,CAC3BgF,EAAKwG,EAAUxL,GAAGyL,GAAcxG,eAChC,IAAI0H,EACF5N,aAAW6N,UACT7N,aAAW8N,SAAS7H,EAAGG,OAAQA,EAAQmG,IACrCtG,EAAGI,OAELuH,EAAavH,IACfA,EAASuH,GAKf,OAAO,IAAItH,WAAS,CAClB7C,WAAYA,EACZpD,QAASA,EACTmE,cAAeA,EACf0B,eAAgBxF,UAAQ0F,GACpB,IAAID,iBAAeC,EAAQC,QAC3BoH,IAkCRvK,EAAiB6K,iBAAmB,SAAUtB,GAE5C,IAAK/L,UAAQ+L,IAAcA,EAAU5L,OAAS,EAC5C,MAAM,IAAIF,iBACR,iEAQJ,IAHA,IAAIqN,EAAmB,GACnBC,EAAwB,GACxBpN,EAAS4L,EAAU5L,OACdI,EAAI,EAAGA,EAAIJ,IAAUI,EAAG,CAC/B,IAAIwK,EAAWgB,EAAUxL,GAErBP,UAAQ+K,EAASlH,UACnByJ,EAAiBxL,KAAKiJ,GAEtB/K,UAAQ+K,EAASyC,yBACjBxN,UAAQ+K,EAAS0C,yBAEjBF,EAAsBzL,KAAKiJ,GAI/B,IAAItD,EAAa,GAcjB,OAbI6F,EAAiBnN,OAAS,GAC5BsH,EAAW3F,KAAKgK,EAAkBwB,EAAkB,aAGlDC,EAAsBpN,OAAS,IACjCsH,EAAW3F,KACTgK,EAAkByB,EAAuB,2BAE3C9F,EAAW3F,KACTgK,EAAkByB,EAAuB,4BAItC9F,GAGT,IAAI4D,EAAS,IAAI/L,aACboO,EAAK,IAAIpO,aACTqO,EAAK,IAAIrO,aACTsO,EAAK,IAAItO,aAgBbkD,EAAiBqL,cAAgB,SAAUhK,GAEzC,IAAK7D,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAE3B,IACGD,UAAQ6D,EAASd,WAAWiC,YAC5BhF,UAAQ6D,EAASd,WAAWiC,SAAS7B,QAEtC,MAAM,IAAIlD,iBACR,oDAGJ,IAAKD,UAAQ6D,EAASlE,SACpB,MAAM,IAAIM,iBAAe,iCAE3B,GAAI4D,EAASlE,QAAQQ,OAAS,GAAK0D,EAASlE,QAAQQ,OAAS,GAAM,EACjE,MAAM,IAAIF,iBACR,0EAGJ,GAAI4D,EAASC,gBAAkBC,gBAAcC,UAC3C,MAAM,IAAI/D,iBACR,2DAKJ,IAQIM,EARAZ,EAAUkE,EAASlE,QACnBoD,EAAac,EAASd,WACtBjC,EAAWiC,EAAWiC,SAAS7B,OAC/BkD,EAActD,EAAWiC,SAAS7B,OAAOhD,OAAS,EAClDD,EAAaP,EAAQQ,OACrB2N,EAAmB,IAAIC,MAAM1H,GAC7B2H,EAAqB,IAAID,MAAM7N,EAAa,GAC5C+N,EAAgB,IAAIF,MAAM7N,GAE9B,IAAKK,EAAI,EAAGA,EAAI8F,EAAa9F,IAC3BuN,EAAiBvN,GAAK,CACpB2N,YAAa,EACbhK,MAAO,EACPiK,aAAc,GAIlB,IAAI1N,EAAI,EACR,IAAKF,EAAI,EAAGA,EAAIL,EAAYK,GAAK,EAAG,CAClC,IAAIoC,EAAKhD,EAAQY,GACbqC,EAAKjD,EAAQY,EAAI,GACjBsC,EAAKlD,EAAQY,EAAI,GACjB6N,EAAW,EAALzL,EACN0L,EAAW,EAALzL,EACN0L,EAAW,EAALzL,EAEV6K,EAAGxF,EAAIpH,EAASsN,GAChBV,EAAGvE,EAAIrI,EAASsN,EAAM,GACtBV,EAAGtE,EAAItI,EAASsN,EAAM,GACtBT,EAAGzF,EAAIpH,EAASuN,GAChBV,EAAGxE,EAAIrI,EAASuN,EAAM,GACtBV,EAAGvE,EAAItI,EAASuN,EAAM,GACtBT,EAAG1F,EAAIpH,EAASwN,GAChBV,EAAGzE,EAAIrI,EAASwN,EAAM,GACtBV,EAAGxE,EAAItI,EAASwN,EAAM,GAEtBR,EAAiBnL,GAAIuB,QACrB4J,EAAiBlL,GAAIsB,QACrB4J,EAAiBjL,GAAIqB,QAErB5E,aAAW8N,SAASO,EAAID,EAAIC,GAC5BrO,aAAW8N,SAASQ,EAAIF,EAAIE,GAC5BI,EAAmBvN,GAAKnB,aAAWiP,MAAMZ,EAAIC,EAAI,IAAItO,cACrDmB,IAGF,IAOI+N,EAPAN,EAAc,EAClB,IAAK3N,EAAI,EAAGA,EAAI8F,EAAa9F,IAC3BuN,EAAiBvN,GAAG2N,aAAeA,EACnCA,GAAeJ,EAAiBvN,GAAG2D,MAKrC,IAFAzD,EAAI,EAECF,EAAI,EAAGA,EAAIL,EAAYK,GAAK,EAAG,CAElC,IAAIc,GADJmN,EAAmBV,EAAiBnO,EAAQY,KACf2N,YAAcM,EAAiBL,aAC5DF,EAAc5M,GAASZ,EACvB+N,EAAiBL,eAIjBF,EADA5M,GADAmN,EAAmBV,EAAiBnO,EAAQY,EAAI,KACvB2N,YAAcM,EAAiBL,cACjC1N,EACvB+N,EAAiBL,eAIjBF,EADA5M,GADAmN,EAAmBV,EAAiBnO,EAAQY,EAAI,KACvB2N,YAAcM,EAAiBL,cACjC1N,EACvB+N,EAAiBL,eAEjB1N,IAGF,IAAIgO,EAAe,IAAI3E,aAA2B,EAAdzD,GACpC,IAAK9F,EAAI,EAAGA,EAAI8F,EAAa9F,IAAK,CAChC,IAAImO,EAAS,EAAJnO,EAGT,GAFAiO,EAAmBV,EAAiBvN,GACpCjB,aAAWsM,MAAMtM,aAAWqP,KAAMtD,GAC9BmD,EAAiBtK,MAAQ,EAAG,CAC9B,IAAKzD,EAAI,EAAGA,EAAI+N,EAAiBtK,MAAOzD,IACtCnB,aAAW0N,IACT3B,EACA2C,EAAmBC,EAAcO,EAAiBN,YAAczN,IAChE4K,GAMF/L,aAAWsP,cAActP,aAAWqP,KAAMtD,EAAQ1D,aAAWkH,YAE7DvP,aAAWsM,MACToC,EAAmBC,EAAcO,EAAiBN,cAClD7C,GAOJ/L,aAAWsP,cAActP,aAAWqP,KAAMtD,EAAQ1D,aAAWkH,aAG7DxD,EAAOjC,EAAI,GAGb9J,aAAWkE,UAAU6H,EAAQA,GAC7BoD,EAAaC,GAAMrD,EAAOnD,EAC1BuG,EAAaC,EAAK,GAAKrD,EAAOlC,EAC9BsF,EAAaC,EAAK,GAAKrD,EAAOjC,EAShC,OANAvF,EAASd,WAAWsI,OAAS,IAAIhI,oBAAkB,CACjDC,kBAAmBuC,oBAAkBqE,MACrC3G,uBAAwB,EACxBJ,OAAQsL,IAGH5K,GAGT,IAAIiL,EAAgB,IAAIxP,aACpByP,EAAc,IAAIzP,aAClB0P,EAAW,IAAI1P,aAoBnBkD,EAAiByM,2BAA6B,SAAUpL,GAEtD,IAAK7D,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAI3B,IAAI8C,EAAac,EAASd,WACtBpD,EAAUkE,EAASlE,QAGvB,IAAKK,UAAQ+C,EAAWiC,YAAchF,UAAQ+C,EAAWiC,SAAS7B,QAChE,MAAM,IAAIlD,iBACR,oDAGJ,IAAKD,UAAQ+C,EAAWsI,UAAYrL,UAAQ+C,EAAWsI,OAAOlI,QAC5D,MAAM,IAAIlD,iBAAe,kDAE3B,IAAKD,UAAQ+C,EAAWmM,MAAQlP,UAAQ+C,EAAWmM,GAAG/L,QACpD,MAAM,IAAIlD,iBAAe,8CAE3B,IAAKD,UAAQL,GACX,MAAM,IAAIM,iBAAe,iCAE3B,GAAIN,EAAQQ,OAAS,GAAKR,EAAQQ,OAAS,GAAM,EAC/C,MAAM,IAAIF,iBACR,0EAGJ,GAAI4D,EAASC,gBAAkBC,gBAAcC,UAC3C,MAAM,IAAI/D,iBACR,2DAKJ,IAQIM,EAKA6N,EACAC,EACAC,EAfAxN,EAAW+C,EAASd,WAAWiC,SAAS7B,OACxCgM,EAAUtL,EAASd,WAAWsI,OAAOlI,OACrC+L,EAAKrL,EAASd,WAAWmM,GAAG/L,OAE5BkD,EAAcxC,EAASd,WAAWiC,SAAS7B,OAAOhD,OAAS,EAC3DD,EAAaP,EAAQQ,OACrBiP,EAAO,IAAIrB,MAAoB,EAAd1H,GAGrB,IAAK9F,EAAI,EAAGA,EAAI6O,EAAKjP,OAAQI,IAC3B6O,EAAK7O,GAAK,EAMZ,IAAKA,EAAI,EAAGA,EAAIL,EAAYK,GAAK,EAAG,CAClC,IAAIoC,EAAKhD,EAAQY,GACbqC,EAAKjD,EAAQY,EAAI,GACjBsC,EAAKlD,EAAQY,EAAI,GAErB8N,EAAW,EAALzL,EACN0L,EAAW,EAALzL,EACN,IAAIwM,EAAW,EAAL1M,EACN2M,EAAW,EAAL1M,EACN2M,EAAW,EAAL1M,EAEN2M,EAAK1O,EAPTsN,EAAW,EAALzL,GAQF8M,EAAK3O,EAASsN,EAAM,GACpBsB,EAAK5O,EAASsN,EAAM,GAEpBuB,EAAKT,EAAGG,GACRO,EAAKV,EAAGG,EAAM,GACdQ,EAAKX,EAAGI,EAAM,GAAKM,EACnBE,EAAKZ,EAAGK,EAAM,GAAKK,EAEnBG,EAAI,IAAQb,EAAGI,GAAOK,GAAMG,GAAMZ,EAAGK,GAAOI,GAAME,GAClDG,GAASF,GAAMhP,EAASuN,GAAOmB,GAAMK,GAAM/O,EAASwN,GAAOkB,IAAOO,EAClEE,GACDH,GAAMhP,EAASuN,EAAM,GAAKoB,GAAMI,GAAM/O,EAASwN,EAAM,GAAKmB,IAAOM,EAChEG,GACDJ,GAAMhP,EAASuN,EAAM,GAAKqB,GAAMG,GAAM/O,EAASwN,EAAM,GAAKoB,IAAOK,EAEpEX,EAAKhB,IAAQ4B,EACbZ,EAAKhB,EAAM,IAAM6B,EACjBb,EAAKhB,EAAM,IAAM8B,EAEjBd,EAAKf,IAAQ2B,EACbZ,EAAKf,EAAM,IAAM4B,EACjBb,EAAKf,EAAM,IAAM6B,EAEjBd,EAAKd,IAAQ0B,EACbZ,EAAKd,EAAM,IAAM2B,EACjBb,EAAKd,EAAM,IAAM4B,EAGnB,IAAIC,EAAgB,IAAIrG,aAA2B,EAAdzD,GACjC+J,EAAkB,IAAItG,aAA2B,EAAdzD,GAEvC,IAAK9F,EAAI,EAAGA,EAAI8F,EAAa9F,IAAK,CAEhC8N,GADAD,EAAU,EAAJ7N,GACM,EACZ+N,EAAMF,EAAM,EAEZ,IAAIlN,EAAI5B,aAAW0J,UAAUmG,EAASf,EAAKU,GACvCuB,EAAI/Q,aAAW0J,UAAUoG,EAAMhB,EAAKY,GACpCsB,EAAShR,aAAWiR,IAAIrP,EAAGmP,GAC/B/Q,aAAWkR,iBAAiBtP,EAAGoP,EAAQvB,GACvCzP,aAAWkE,UAAUlE,aAAW8N,SAASiD,EAAGtB,EAAasB,GAAIA,GAE7DF,EAAc/B,GAAOiC,EAAEnI,EACvBiI,EAAc9B,GAAOgC,EAAElH,EACvBgH,EAAc7B,GAAO+B,EAAEjH,EAEvB9J,aAAWkE,UAAUlE,aAAWiP,MAAMrN,EAAGmP,EAAGA,GAAIA,GAEhDD,EAAgBhC,GAAOiC,EAAEnI,EACzBkI,EAAgB/B,GAAOgC,EAAElH,EACzBiH,EAAgB9B,GAAO+B,EAAEjH,EAe3B,OAZAvF,EAASd,WAAWuI,QAAU,IAAIjI,oBAAkB,CAClDC,kBAAmBuC,oBAAkBqE,MACrC3G,uBAAwB,EACxBJ,OAAQgN,IAGVtM,EAASd,WAAWwI,UAAY,IAAIlI,oBAAkB,CACpDC,kBAAmBuC,oBAAkBqE,MACrC3G,uBAAwB,EACxBJ,OAAQiN,IAGHvM,GAGT,IAAItE,EAAoB,IAAIkR,aACxBC,EAAY,IAAIpR,aAChBqR,EAAY,IAAIrR,aAChBsR,EAAY,IAAItR,aAChBuR,EAAgB,IAAIJ,aA2VxB,SAASK,EAAejN,GACtB,OAAQA,EAASC,eACf,KAAKC,gBAAcW,aACjB,OA7JN,SAA0Bb,GACxB,IAAI6D,EAAmB9B,WAASU,wBAAwBzC,GAGxD,GAAI6D,EAAmB,EACrB,MAAM,IAAIzH,iBAAe,kDAI3B,IAAIN,EAAUyE,gBAAcC,iBAC1BqD,EACyB,GAAxBA,EAAmB,IAEtB/H,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EAGb,IADA,IAAIoR,EAAe,EACVxQ,EAAI,EAAGA,EAAImH,IAAoBnH,EACtCZ,EAAQoR,KAAkBxQ,EAAI,EAC9BZ,EAAQoR,KAAkB,EAC1BpR,EAAQoR,KAAkBxQ,EAK5B,OAFAsD,EAASlE,QAAUA,EACnBkE,EAASC,cAAgBC,gBAAcC,UAChCH,EAmIImN,CAAiBnN,GAC1B,KAAKE,gBAAcQ,eACjB,OAlIN,SAA4BV,GAC1B,IAAI6D,EAAmB9B,WAASU,wBAAwBzC,GAGxD,GAAI6D,EAAmB,EACrB,MAAM,IAAIzH,iBAAe,8CAI3B,IAAIN,EAAUyE,gBAAcC,iBAC1BqD,EACyB,GAAxBA,EAAmB,IAEtB/H,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EAET+H,EAAmB,IACrB/H,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,GAIf,IADA,IAAIoR,EAAe,EACVxQ,EAAI,EAAGA,EAAImH,EAAmB,EAAGnH,GAAK,EAC7CZ,EAAQoR,KAAkBxQ,EAC1BZ,EAAQoR,KAAkBxQ,EAAI,EAC9BZ,EAAQoR,KAAkBxQ,EAAI,EAE1BA,EAAI,EAAImH,IACV/H,EAAQoR,KAAkBxQ,EAC1BZ,EAAQoR,KAAkBxQ,EAAI,EAC9BZ,EAAQoR,KAAkBxQ,EAAI,GAMlC,OAFAsD,EAASlE,QAAUA,EACnBkE,EAASC,cAAgBC,gBAAcC,UAChCH,EA4FIoN,CAAmBpN,GAC5B,KAAKE,gBAAcC,UACjB,OA9LN,SAAwBH,GACtB,GAAI7D,UAAQ6D,EAASlE,SACnB,OAAOkE,EAET,IAAI6D,EAAmB9B,WAASU,wBAAwBzC,GAGxD,GAAI6D,EAAmB,EACrB,MAAM,IAAIzH,iBAAe,kDAE3B,GAAIyH,EAAmB,GAAM,EAC3B,MAAM,IAAIzH,iBACR,uDASJ,IAJA,IAAIN,EAAUyE,gBAAcC,iBAC1BqD,EACAA,GAEOnH,EAAI,EAAGA,EAAImH,IAAoBnH,EACtCZ,EAAQY,GAAKA,EAIf,OADAsD,EAASlE,QAAUA,EACZkE,EAoKIqN,CAAerN,GACxB,KAAKE,gBAAcoN,WACjB,OAlEN,SAAwBtN,GACtB,IAAI6D,EAAmB9B,WAASU,wBAAwBzC,GAGxD,GAAI6D,EAAmB,EACrB,MAAM,IAAIzH,iBAAe,gDAI3B,IAAIN,EAAUyE,gBAAcC,iBAC1BqD,EACyB,GAAxBA,EAAmB,IAEtB/H,EAAQ,GAAK,EACbA,EAAQ,GAAK,EAEb,IADA,IAAIoR,EAAe,EACVxQ,EAAI,EAAGA,EAAImH,IAAoBnH,EACtCZ,EAAQoR,KAAkBxQ,EAAI,EAC9BZ,EAAQoR,KAAkBxQ,EAK5B,OAFAsD,EAASlE,QAAUA,EACnBkE,EAASC,cAAgBC,gBAAcc,MAChChB,EA2CIuN,CAAevN,GACxB,KAAKE,gBAAcsN,UACjB,OA1CN,SAAuBxN,GACrB,IAAI6D,EAAmB9B,WAASU,wBAAwBzC,GAGxD,GAAI6D,EAAmB,EACrB,MAAM,IAAIzH,iBAAe,gDAI3B,IAAIN,EAAUyE,gBAAcC,iBAC1BqD,EACmB,EAAnBA,GAGF/H,EAAQ,GAAK,EACbA,EAAQ,GAAK,EAGb,IADA,IAAIoR,EAAe,EACVxQ,EAAI,EAAGA,EAAImH,IAAoBnH,EACtCZ,EAAQoR,KAAkBxQ,EAAI,EAC9BZ,EAAQoR,KAAkBxQ,EAQ5B,OALAZ,EAAQoR,KAAkBrJ,EAAmB,EAC7C/H,EAAQoR,GAAgB,EAExBlN,EAASlE,QAAUA,EACnBkE,EAASC,cAAgBC,gBAAcc,MAChChB,EAcIyN,CAAczN,GACvB,KAAKE,gBAAcc,MACjB,OAjGN,SAAoBhB,GAClB,GAAI7D,UAAQ6D,EAASlE,SACnB,OAAOkE,EAET,IAAI6D,EAAmB9B,WAASU,wBAAwBzC,GAGxD,GAAI6D,EAAmB,EACrB,MAAM,IAAIzH,iBAAe,gDAE3B,GAAIyH,EAAmB,GAAM,EAC3B,MAAM,IAAIzH,iBAAe,mDAQ3B,IAJA,IAAIN,EAAUyE,gBAAcC,iBAC1BqD,EACAA,GAEOnH,EAAI,EAAGA,EAAImH,IAAoBnH,EACtCZ,EAAQY,GAAKA,EAIf,OADAsD,EAASlE,QAAUA,EACZkE,EAyEI0N,CAAW1N,GAGtB,OAAOA,EAGT,SAAS2N,EAAuBvQ,EAAGwQ,GAC7BC,KAAKC,IAAI1Q,EAAEkI,GAAKxB,aAAWiK,WAE3B3Q,EAAEkI,EADAsI,GACK9J,aAAWiK,SAEZjK,aAAWiK,UAzWvBpP,EAAiBqP,iBAAmB,SAAUhO,GAE5C,IAAK7D,UAAQ6D,GACX,MAAM,IAAI5D,iBAAe,yBAI3B,IACIM,EACA8F,EAFAyL,EAAmBjO,EAASd,WAAWgP,iBAG3C,GAAI/R,UAAQ8R,GAAmB,CAE7B,IAAIE,EAAoBF,EAAiB3O,OACzCkD,EAAc2L,EAAkB7R,OAAS,EACzC,IAAI8R,EAAuB,IAAInI,aAA2B,EAAdzD,GAExCxD,EAAK,EACT,IAAKtC,EAAI,EAAGA,EAAI8F,IAAe9F,EAC7BjB,aAAW0J,UAAUgJ,EAAuB,EAAJzR,EAASmQ,GAC7CpR,aAAW2L,OAAOyF,EAAWpR,aAAWqP,MAC1C9L,GAAM,GAGRgO,EAAgBqB,uBAAqBC,iBACnCzB,EACA,MACAG,GAEFoB,EAAqBpP,KAAQgO,EAAc3I,EAC3C+J,EAAqBpP,KAAQgO,EAAc1H,GAS7C,OANAtF,EAASd,WAAWqP,qBAAuB,IAAI/O,oBAAkB,CAC/DC,kBAAmBuC,oBAAkBqE,MACrC3G,uBAAwB,EACxBJ,OAAQ8O,WAEHpO,EAASd,WAAWgP,iBACpBlO,EAGT,IAAIwO,EAAkBxO,EAASd,WAAWsI,OACtCiH,EAAczO,EAASd,WAAWmM,GAElCqD,EAAYvS,UAAQqS,GACpBG,EAAQxS,UAAQsS,GACpB,IAAKC,IAAcC,EACjB,OAAO3O,EAGT,IAMIsL,EACAD,EACAuD,EACAC,EATAC,EAAmB9O,EAASd,WAAWuI,QACvCsH,EAAqB/O,EAASd,WAAWwI,UAEzCsH,EAAa7S,UAAQ2S,GACrBG,EAAe9S,UAAQ4S,GAOvBL,IACFpD,EAAUkD,EAAgBlP,QAExBqP,IACFtD,EAAKoD,EAAYnP,QAEf0P,IACFJ,EAAWE,EAAiBxP,QAE1B2P,IACFJ,EAAaE,EAAmBzP,QAOlC,IAAI4P,EAFJ1M,GAFakM,EAAYpD,EAAQhP,OAAS+O,EAAG/O,SACzBoS,EAAY,EAAM,GAIlCS,EAA0BR,GAASD,EAAY,EAAM,EACzDS,GAA2BH,GAAcC,EAAe,EAAM,EAG9D,IAAIV,EAAuB,IAAItI,aAF/BiJ,GAAoBC,GAIhBC,EAAc,EAClB,IAAK1S,EAAI,EAAGA,EAAI8F,IAAe9F,EAAG,CAC5BiS,IACF/B,aAAWzH,UAAUkG,EAAQ,EAAJ3O,EAAShB,GAClC6S,EACEa,KACEf,uBAAqBgB,2BAA2B3T,IAGtD,IAAI8B,EAAY,EAAJd,EACRgS,GAAavS,UAAQyS,IAAazS,UAAQ0S,IAC5CpT,aAAW0J,UAAUmG,EAAS9N,EAAOqP,GACrCpR,aAAW0J,UAAUyJ,EAAUpR,EAAOsP,GACtCrR,aAAW0J,UAAU0J,EAAYrR,EAAOuP,GAExCsB,uBAAqBiB,QACnBzC,EACAC,EACAC,EACArR,GAEF6S,EAAqBa,KAAiB1T,EAAkB2I,EACxDkK,EAAqBa,KAAiB1T,EAAkB4J,IAEpDoJ,IACFjT,aAAW0J,UAAUmG,EAAS9N,EAAOqP,GACrC0B,EACEa,KACEf,uBAAqBkB,eAAe1C,IAGtCmC,IACFvT,aAAW0J,UAAUyJ,EAAUpR,EAAOqP,GACtC0B,EACEa,KACEf,uBAAqBkB,eAAe1C,IAGtCoC,IACFxT,aAAW0J,UAAU0J,EAAYrR,EAAOqP,GACxC0B,EACEa,KACEf,uBAAqBkB,eAAe1C,KAwB9C,OAnBA7M,EAASd,WAAWqP,qBAAuB,IAAI/O,oBAAkB,CAC/DC,kBAAmBuC,oBAAkBqE,MACrC3G,uBAAwByP,EACxB7P,OAAQiP,IAGNG,UACK1O,EAASd,WAAWsI,OAEzBmH,UACK3O,EAASd,WAAWmM,GAEzB4D,UACKjP,EAASd,WAAWwI,UAEzBsH,UACKhP,EAASd,WAAWuI,QAGtBzH,GAsPT,IAAIwP,EAAK,IAAI/T,aACb,SAASgU,EAA8BrS,EAAGsS,EAAIC,EAAI7F,GAChDrO,aAAW0N,IACT/L,EACA3B,aAAWkR,iBACTlR,aAAW8N,SAASmG,EAAItS,EAAGoS,GAC3BpS,EAAEkI,GAAKlI,EAAEkI,EAAIoK,EAAGpK,GAChBkK,GAEFG,GAEFlU,aAAWsM,MAAM4H,EAAI7F,GACrB6D,EAAuBgC,GAAI,GAC3BhC,EAAuB7D,GAAI,GAG7B,IAAI6F,EAAK,IAAIlU,aACTmU,EAAK,IAAInU,aACToU,EAAK,IAAIpU,aACTqU,EAAK,IAAIrU,aAETsU,EAAsB,CACxB1O,UAAW,IAAI6I,MAAM,GACrBpO,QAAS,IAAIoO,MAAM,IAGrB,SAAS8F,EAAcC,EAAIP,EAAIQ,GAI7B,KAAID,EAAG5L,GAAK,GAAOqL,EAAGrL,GAAK,GAAO6L,EAAG7L,GAAK,GAA1C,EA7DF,SAAmC4L,EAAIP,EAAIQ,GACzC,GAAa,IAATD,EAAG3K,GAAsB,IAAToK,EAAGpK,GAAsB,IAAT4K,EAAG5K,EAIrC,OAHAqI,EAAuBsC,EAAIA,EAAG3K,EAAI,GAClCqI,EAAuB+B,EAAIA,EAAGpK,EAAI,QAClCqI,EAAuBuC,EAAIA,EAAG5K,EAAI,GAIpC,IAAI6K,EAAMtC,KAAKC,IAAImC,EAAG3K,GAClB8K,EAAMvC,KAAKC,IAAI4B,EAAGpK,GAClB+K,EAAMxC,KAAKC,IAAIoC,EAAG5K,GAelBsI,GAZAuC,EAAMC,EACJD,EAAME,EACDvM,aAAWwM,KAAKL,EAAG3K,GAEnBxB,aAAWwM,KAAKJ,EAAG5K,GAEnB8K,EAAMC,EACRvM,aAAWwM,KAAKZ,EAAGpK,GAEnBxB,aAAWwM,KAAKJ,EAAG5K,IAGN,EACtBqI,EAAuBsC,EAAIrC,GAC3BD,EAAuB+B,EAAI9B,GAC3BD,EAAuBuC,EAAItC,GAqC3B2C,CAA0BN,EAAIP,EAAIQ,GAElC,IAAIM,EAAWP,EAAG3K,EAAI,EAClBmL,EAAWf,EAAGpK,EAAI,EAClBoL,EAAWR,EAAG5K,EAAI,EAElBqL,EAAY,EAChBA,GAAaH,EAAW,EAAI,EAC5BG,GAAaF,EAAW,EAAI,EAG5B,IAAI3U,EAAUiU,EAAoBjU,QAEhB,KAJlB6U,GAAaD,EAAW,EAAI,IAK1B5U,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EAET0U,GACFf,EAA8BQ,EAAIP,EAAIC,EAAIE,GAC1CJ,EAA8BQ,EAAIC,EAAIN,EAAIE,GAE1ChU,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,GACJ2U,GACThB,EAA8BC,EAAIQ,EAAIP,EAAIE,GAC1CJ,EAA8BC,EAAIO,EAAIL,EAAIE,GAE1ChU,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,GACJ4U,IACTjB,EAA8BS,EAAID,EAAIN,EAAIE,GAC1CJ,EAA8BS,EAAIR,EAAIE,EAAIE,GAE1ChU,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,IAEQ,IAAd6U,IACT7U,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EAER0U,EAQOC,EAQAC,IACVjB,EAA8BS,EAAID,EAAIN,EAAIE,GAC1CJ,EAA8BS,EAAIR,EAAIE,EAAIE,GAE1ChU,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,IAdb2T,EAA8BC,EAAIQ,EAAIP,EAAIE,GAC1CJ,EAA8BC,EAAIO,EAAIL,EAAIE,GAE1ChU,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,IAdb2T,EAA8BQ,EAAIP,EAAIC,EAAIE,GAC1CJ,EAA8BQ,EAAIC,EAAIN,EAAIE,GAE1ChU,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,IAoBjB,IAAIuF,EAAY0O,EAAoB1O,UAcpC,OAbAA,EAAU,GAAK4O,EACf5O,EAAU,GAAKqO,EACfrO,EAAU,GAAK6O,EACf7O,EAAU/E,OAAS,EAED,IAAdqU,GAAiC,IAAdA,IACrBtP,EAAU,GAAKsO,EACftO,EAAU,GAAKuO,EACfvO,EAAU,GAAKwO,EACfxO,EAAU,GAAKyO,EACfzO,EAAU/E,OAAS,GAGdyT,GAGT,SAASa,EAAyB5Q,EAAU6Q,GAC1C,IAAI3R,EAAac,EAASd,WAE1B,GAA0C,IAAtCA,EAAWiC,SAAS7B,OAAOhD,OAA/B,CAIA,IAAK,IAAI4G,KAAYhE,EACnB,GACEA,EAAWG,eAAe6D,IAC1B/G,UAAQ+C,EAAWgE,KACnB/G,UAAQ+C,EAAWgE,GAAU5D,QAC7B,CACA,IAAIF,EAAYF,EAAWgE,GAC3B9D,EAAUE,OAAS0C,oBAAkBxB,iBACnCpB,EAAUK,kBACVL,EAAUE,QAKhB,IAAIuE,EAAmB9B,WAASU,wBAAwBzC,GAYxD,OAXAA,EAASlE,QAAUyE,gBAAcC,iBAC/BqD,EACA7D,EAASlE,SAGP+U,IACF7Q,EAAS2B,eAAiBC,iBAAekP,aACvC5R,EAAWiC,SAAS7B,SAIjBU,GAGT,SAAS+Q,EAAqB/Q,GAC5B,IAAId,EAAac,EAASd,WACtB8R,EAAmB,GAEvB,IAAK,IAAI9N,KAAYhE,EACnB,GACEA,EAAWG,eAAe6D,IAC1B/G,UAAQ+C,EAAWgE,KACnB/G,UAAQ+C,EAAWgE,GAAU5D,QAC7B,CACA,IAAIF,EAAYF,EAAWgE,GAC3B8N,EAAiB9N,GAAY,IAAI1D,oBAAkB,CACjDC,kBAAmBL,EAAUK,kBAC7BC,uBAAwBN,EAAUM,uBAClCC,UAAWP,EAAUO,UACrBL,OAAQ,KAKd,OAAO,IAAIyC,WAAS,CAClB7C,WAAY8R,EACZlV,QAAS,GACTmE,cAAeD,EAASC,gBAI5B,SAASgR,GAAyB/J,EAAUgK,EAAcC,GACxD,IAAIN,EAAwB1U,UAAQ+K,EAASlH,SAAS2B,gBAEtDuP,EAAeN,EAAyBM,EAAcL,GACtDM,EAAeP,EAAyBO,EAAcN,GAElD1U,UAAQgV,KAAkBhV,UAAQ+U,GACpChK,EAASlH,SAAWmR,GACVhV,UAAQgV,IAAiBhV,UAAQ+U,GAC3ChK,EAASlH,SAAWkR,GAEpBhK,EAASyC,uBAAyBuH,EAClChK,EAAS0C,uBAAyBuH,EAClCjK,EAASlH,cAAWkJ,GAIxB,SAASkI,GACPC,EACA5I,GAEA,IAAI6I,EAAY,IAAID,EAChBE,EAAY,IAAIF,EAChBG,EAAY,IAAIH,EAEpB,OAAO,SACLvS,EACAC,EACAC,EACAyS,EACApJ,EACAqJ,EACAC,EACAhS,GAEA,IAAIkK,EAAKwH,EAAclM,UACrBkD,EACAvJ,EAAK2J,EACL6I,GAEExH,EAAKuH,EAAclM,UACrBkD,EACAtJ,EAAK0J,EACL8I,GAEExH,EAAKsH,EAAclM,UACrBkD,EACArJ,EAAKyJ,EACL+I,GAGFH,EAAc1E,iBAAiB9C,EAAI4H,EAAOpN,EAAGwF,GAC7CwH,EAAc1E,iBAAiB7C,EAAI2H,EAAOnM,EAAGwE,GAC7CuH,EAAc1E,iBAAiB5C,EAAI0H,EAAOlM,EAAGwE,GAE7C,IAAI7E,EAAQmM,EAAclI,IAAIU,EAAIC,EAAID,GACtCwH,EAAclI,IAAIjE,EAAO6E,EAAI7E,GAEzBvF,GACF0R,EAAc1R,UAAUuF,EAAOA,GAGjCmM,EAAc1K,KACZzB,EACAwM,EACAC,EAAgBlJ,IAKtB,IAAImJ,GAA+BR,GACjCS,aACA,GAEEC,GAA+BV,GACjC3V,aACA,GAEEsW,GAA+BX,GACjCxE,aACA,GAiBEoF,GAAY,IAAIvW,aAChBwW,GAAY,IAAIxW,aAChByW,GAAY,IAAIzW,aAChB0W,GAAqB,IAAI1W,aAE7B,SAAS2W,GACPtT,EACAC,EACAC,EACAqT,EACAhR,EACAiK,EACAsD,EACAC,EACAyD,EACAnE,EACAoE,EACAC,EACAC,EACAC,EACAC,EACAhB,GAEA,GACGxV,UAAQmP,IACRnP,UAAQyS,IACRzS,UAAQ0S,IACR1S,UAAQmW,IACRnW,UAAQgS,IACkB,IAA3BuE,EANF,CAWA,IAGIjB,EFtoEN,SAAgCY,EAAOpC,EAAIP,EAAIQ,EAAI0C,GAajD,IAAI/I,EACAC,EACAC,EACA8I,EACAC,EACAC,EACAC,EACAC,EAEJ,GApBAC,QAAM/W,QAAQ,QAASkW,GACvBa,QAAM/W,QAAQ,KAAM8T,GACpBiD,QAAM/W,QAAQ,KAAMuT,GACpBwD,QAAM/W,QAAQ,KAAM+T,GAGf/T,UAAQyW,KACXA,EAAS,IAAInX,cAaVU,UAAQ8T,EAAG1K,GAoBT,CACL,GAAI9J,aAAWsP,cAAcsH,EAAOpC,EAAInM,aAAWqP,WACjD,OAAO1X,aAAWsM,MAAMtM,aAAW2X,OAAQR,GAE7C,GAAInX,aAAWsP,cAAcsH,EAAO3C,EAAI5L,aAAWqP,WACjD,OAAO1X,aAAWsM,MAAMtM,aAAW4X,OAAQT,GAE7C,GAAInX,aAAWsP,cAAcsH,EAAOnC,EAAIpM,aAAWqP,WACjD,OAAO1X,aAAWsM,MAAMtM,aAAW6X,OAAQV,GAG7C/I,EAAKpO,aAAW8N,SAASmG,EAAIO,EAAIzU,GACjCsO,EAAKrO,aAAW8N,SAAS2G,EAAID,EAAIvU,GACjCqO,EAAKtO,aAAW8N,SAAS8I,EAAOpC,EAAItU,GAEpCkX,EAAQpX,aAAWiR,IAAI7C,EAAIA,GAC3BiJ,EAAQrX,aAAWiR,IAAI7C,EAAIC,GAC3BiJ,EAAQtX,aAAWiR,IAAI7C,EAAIE,GAC3BiJ,EAAQvX,aAAWiR,IAAI5C,EAAIA,GAC3BmJ,EAAQxX,aAAWiR,IAAI5C,EAAIC,OAvCT,CAClB,GAAI6C,aAAW7B,cAAcsH,EAAOpC,EAAInM,aAAWqP,WACjD,OAAO1X,aAAWsM,MAAMtM,aAAW2X,OAAQR,GAE7C,GAAIhG,aAAW7B,cAAcsH,EAAO3C,EAAI5L,aAAWqP,WACjD,OAAO1X,aAAWsM,MAAMtM,aAAW4X,OAAQT,GAE7C,GAAIhG,aAAW7B,cAAcsH,EAAOnC,EAAIpM,aAAWqP,WACjD,OAAO1X,aAAWsM,MAAMtM,aAAW6X,OAAQV,GAG7C/I,EAAK+C,aAAWrD,SAASmG,EAAIO,EAAIzU,GACjCsO,EAAK8C,aAAWrD,SAAS2G,EAAID,EAAIvU,GACjCqO,EAAK6C,aAAWrD,SAAS8I,EAAOpC,EAAItU,GAEpCkX,EAAQjG,aAAWF,IAAI7C,EAAIA,GAC3BiJ,EAAQlG,aAAWF,IAAI7C,EAAIC,GAC3BiJ,EAAQnG,aAAWF,IAAI7C,EAAIE,GAC3BiJ,EAAQpG,aAAWF,IAAI5C,EAAIA,GAC3BmJ,EAAQrG,aAAWF,IAAI5C,EAAIC,GAuB7B6I,EAAOtN,EAAI0N,EAAQD,EAAQD,EAAQG,EACnCL,EAAOrN,EAAIsN,EAAQI,EAAQH,EAAQC,EACnC,IAAIQ,EAAIV,EAAQG,EAAQF,EAAQA,EAWhC,OARiB,IAAbF,EAAOtN,IACTsN,EAAOtN,GAAKiO,GAEG,IAAbX,EAAOrN,IACTqN,EAAOrN,GAAKgO,GAGdX,EAAOvO,EAAI,EAAMuO,EAAOtN,EAAIsN,EAAOrN,EAC5BqN,EEyjEMY,CAAuBnB,EAH3B5W,aAAW0J,UAAU9D,EAAgB,EAALvC,EAAQkT,IACxCvW,aAAW0J,UAAU9D,EAAgB,EAALtC,EAAQkT,IACxCxW,aAAW0J,UAAU9D,EAAgB,EAALrC,EAAQkT,IACMC,IAevD,GAbIhW,UAAQmP,IACVwG,GACEhT,EACAC,EACAC,EACAyS,EACAnG,EACAkH,EAAkBhL,OAAOlI,OACzBqS,GACA,GAIAxV,UAAQgS,GAAoB,CAC9B,IAQIsF,EARAC,EAAKjY,aAAW0J,UAAUgJ,EAAwB,EAALrP,EAAQkT,IACrD2B,EAAKlY,aAAW0J,UAAUgJ,EAAwB,EAALpP,EAAQkT,IACrD2B,EAAKnY,aAAW0J,UAAUgJ,EAAwB,EAALnP,EAAQkT,IAEzDzW,aAAWkR,iBAAiB+G,EAAIjC,EAAOpN,EAAGqP,GAC1CjY,aAAWkR,iBAAiBgH,EAAIlC,EAAOnM,EAAGqO,GAC1ClY,aAAWkR,iBAAiBiH,EAAInC,EAAOlM,EAAGqO,GAIvCnY,aAAW2L,OAAOsM,EAAIjY,aAAWqP,OACjCrP,aAAW2L,OAAOuM,EAAIlY,aAAWqP,OACjCrP,aAAW2L,OAAOwM,EAAInY,aAAWqP,QAMlC2I,EAAYzB,IACF3N,EAAI,EACdoP,EAAUnO,EAAI,EACdmO,EAAUlO,EAAI,IAPdkO,EAAYhY,aAAW0N,IAAIuK,EAAIC,EAAID,GACnCjY,aAAW0N,IAAIsK,EAAWG,EAAIH,GAC9BhY,aAAWkE,UAAU8T,EAAWA,IAOlChY,aAAWkL,KACT8M,EACAjB,EAAkBtE,iBAAiB5O,OACnB,EAAhBqS,GAsDJ,GAlDIxV,UAAQoW,IAlGkB,SAC9BzT,EACAC,EACAC,EACAyS,EACApJ,EACAqJ,EACAC,GAEA,IAAI7H,EAAKzB,EAAavJ,GAAM2S,EAAOpN,EAC/B0F,EAAK1B,EAAatJ,GAAM0S,EAAOnM,EAC/BuO,EAAKxL,EAAarJ,GAAMyS,EAAOlM,EACnCmM,EAAcC,GAAiB7H,EAAKC,EAAK8J,EAAK/P,aAAWiK,SAAW,EAAI,EAuFtE+F,CACEhV,EACAC,EACAC,EACAyS,EACAc,EACAC,EAAkBD,YAAYjT,OAC9BqS,GAIAxV,UAAQyS,IACVkD,GACEhT,EACAC,EACAC,EACAyS,EACA7C,EACA4D,EAAkB/K,QAAQnI,OAC1BqS,GACA,GAIAxV,UAAQ0S,IACViD,GACEhT,EACAC,EACAC,EACAyS,EACA5C,EACA2D,EAAkB9K,UAAUpI,OAC5BqS,GACA,GAIAxV,UAAQmW,IACVP,GACEjT,EACAC,EACAC,EACAyS,EACAa,EACAE,EAAkBnH,GAAG/L,OACrBqS,GAIAe,EAAyB,EAC3B,IAAK,IAAIhW,EAAI,EAAGA,EAAIgW,EAAwBhW,IAAK,CAC/C,IAAIwE,EAAgBuR,EAAqB/V,GACzCqX,GACEjV,EACAC,EACAC,EACAyS,EACAE,EACAgB,EAAczR,GACdsR,EAAkBtR,MAM1B,SAAS6S,GACPjV,EACAC,EACAC,EACAyS,EACAE,EACAqC,EACAC,GAEA,IAAIvU,EAAyBsU,EAAgBtU,uBACzC2I,EAAe2L,EAAgB1U,OAC/BoS,EAAgBuC,EAAiB3U,OACrC,OAAQI,GACN,KAAK,EACHkS,GACE9S,EACAC,EACAC,EACAyS,EACApJ,EACAqJ,EACAC,GACA,GAEF,MACF,KAAK,EACHG,GACEhT,EACAC,EACAC,EACAyS,EACApJ,EACAqJ,EACAC,GACA,GAEF,MACF,KAAK,EACHI,GACEjT,EACAC,EACAC,EACAyS,EACApJ,EACAqJ,EACAC,GACA,GAEF,MACF,QACED,EAAcC,GACZtJ,EAAavJ,GAAM2S,EAAOpN,EAC1BgE,EAAatJ,GAAM0S,EAAOnM,EAC1B+C,EAAarJ,GAAMyS,EAAOlM,GAIlC,SAAS2O,GACP1B,EACA2B,EACAC,EACAtY,EACAS,EACA8V,GAEA,IAAIgC,EAAc7B,EAAkBrR,SAAS7B,OAAOhD,OAAS,EAE7D,IAAsB,IAAlBC,EAAqB,CACvB,IAAI+X,EAAYxY,EAAQS,GACpBgY,EAAWH,EAAgBE,GAE/B,OAAkB,IAAdC,GACFH,EAAgBE,GAAaD,EAC7B7B,EAAkBrR,SAAS7B,OAAOrB,KAAKoU,EAAMhO,EAAGgO,EAAM/M,EAAG+M,EAAM9M,GAC/D4O,EAAelW,KAAKoW,GACbA,IAGTF,EAAelW,KAAKsW,GACbA,GAKT,OAFA/B,EAAkBrR,SAAS7B,OAAOrB,KAAKoU,EAAMhO,EAAGgO,EAAM/M,EAAG+M,EAAM9M,GAC/D4O,EAAelW,KAAKoW,GACbA,EAGT,IAAIG,GAAmB,CACrBrT,UAAU,EACVqG,QAAQ,EACRE,WAAW,EACXD,SAAS,EACT4D,IAAI,EACJ6C,kBAAkB,EAClBqE,aAAa,GAEf,SAASkC,GAAwBvN,GAC/B,IAAIlH,EAAWkH,EAASlH,SACpBd,EAAac,EAASd,WACtBmC,EAAYnC,EAAWiC,SAAS7B,OAChCgM,EAAUnP,UAAQ+C,EAAWsI,QAC7BtI,EAAWsI,OAAOlI,YAClB4J,EACA2F,EAAa1S,UAAQ+C,EAAWwI,WAChCxI,EAAWwI,UAAUpI,YACrB4J,EACA0F,EAAWzS,UAAQ+C,EAAWuI,SAC9BvI,EAAWuI,QAAQnI,YACnB4J,EACAoJ,EAAYnW,UAAQ+C,EAAWmM,IAAMnM,EAAWmM,GAAG/L,YAAS4J,EAC5DiF,EAAoBhS,UAAQ+C,EAAWgP,kBACvChP,EAAWgP,iBAAiB5O,YAC5B4J,EACAqJ,EAAcpW,UAAQ+C,EAAWqT,aACjCrT,EAAWqT,YAAYjT,YACvB4J,EACApN,EAAUkE,EAASlE,QAEnB2W,EAAuB,GAC3B,IAAK,IAAIvR,KAAiBhC,EAEtBA,EAAWG,eAAe6B,KACzBsT,GAAiBtT,IAClB/E,UAAQ+C,EAAWgC,KAEnBuR,EAAqBxU,KAAKiD,GAG9B,IAKIsR,EACA2B,EACAC,EAEA1X,EATAgW,EAAyBD,EAAqBnW,OAE9C6U,EAAeJ,EAAqB/Q,GACpCkR,EAAeH,EAAqB/Q,GAQpC0U,EAAuB,GAC3BA,EAAqBpY,OAAS+E,EAAU/E,OAAS,EAEjD,IAAIqY,EAAuB,GAG3B,IAFAA,EAAqBrY,OAAS+E,EAAU/E,OAAS,EAE5CI,EAAI,EAAGA,EAAIgY,EAAqBpY,SAAUI,EAC7CgY,EAAqBhY,IAAM,EAC3BiY,EAAqBjY,IAAM,EAG7B,IAAI0F,EAAMtG,EAAQQ,OAClB,IAAKI,EAAI,EAAGA,EAAI0F,EAAK1F,GAAK,EAAG,CAC3B,IAAIoC,EAAKhD,EAAQY,GACbqC,EAAKjD,EAAQY,EAAI,GACjBsC,EAAKlD,EAAQY,EAAI,GAEjBuT,EAAKxU,aAAW0J,UAAU9D,EAAgB,EAALvC,GACrC4Q,EAAKjU,aAAW0J,UAAU9D,EAAgB,EAALtC,GACrCmR,EAAKzU,aAAW0J,UAAU9D,EAAgB,EAALrC,GAErC4T,EAAS5C,EAAcC,EAAIP,EAAIQ,GACnC,GAAI/T,UAAQyW,IAAWA,EAAOvR,UAAU/E,OAAS,EAK/C,IAJA,IAAIsY,EAAkBhC,EAAOvR,UACzBwT,EAAgBjC,EAAO9W,QACvBgZ,EAAeD,EAAcvY,OAExBM,EAAI,EAAGA,EAAIkY,IAAgBlY,EAAG,CACrC,IAAImY,EAAcF,EAAcjY,GAC5ByV,EAAQuC,EAAgBG,GAExB1C,EAAM/M,EAAI,GACZkN,EAAoBtB,EAAahS,WACjCiV,EAAiBjD,EAAapV,QAC9BsY,EAAkBM,IAElBlC,EAAoBrB,EAAajS,WACjCiV,EAAiBhD,EAAarV,QAC9BsY,EAAkBO,GAWpBvC,GACEtT,EACAC,EACAC,EACAqT,EACAhR,EACAiK,EACAsD,EACAC,EACAyD,EACAnE,EACAoE,EACAC,EACAC,EACAC,EACAxT,EAvBcgV,GACd1B,EACA2B,EACAC,EACAtY,EACAiZ,EAAc,EAAIrY,EAAIqY,GAAe,EACrC1C,SAsBAlW,UAAQyW,KACV3C,EAAK2C,EAAOvR,UAAU,GACtBqO,EAAKkD,EAAOvR,UAAU,GACtB6O,EAAK0C,EAAOvR,UAAU,IAGpB4O,EAAG3K,EAAI,GACTkN,EAAoBtB,EAAahS,WACjCiV,EAAiBjD,EAAapV,QAC9BsY,EAAkBM,IAElBlC,EAAoBrB,EAAajS,WACjCiV,EAAiBhD,EAAarV,QAC9BsY,EAAkBO,GAWpBvC,GACEtT,EACAC,EACAC,EACAiR,EACA5O,EACAiK,EACAsD,EACAC,EACAyD,EACAnE,EACAoE,EACAC,EACAC,EACAC,EACAxT,EAvBcgV,GACd1B,EACA2B,EACAC,EACAtY,EACAY,EACAuT,IA6BFmC,GACEtT,EACAC,EACAC,EACA0Q,EACArO,EACAiK,EACAsD,EACAC,EACAyD,EACAnE,EACAoE,EACAC,EACAC,EACAC,EACAxT,EAvBcgV,GACd1B,EACA2B,EACAC,EACAtY,EACAY,EAAI,EACJgT,IA6BF0C,GACEtT,EACAC,EACAC,EACAkR,EACA7O,EACAiK,EACAsD,EACAC,EACAyD,EACAnE,EACAoE,EACAC,EACAC,EACAC,EACAxT,EAvBcgV,GACd1B,EACA2B,EACAC,EACAtY,EACAY,EAAI,EACJwT,IAuBNe,GAAyB/J,EAAUgK,EAAcC,GAGnD,IAAI6D,GAAUC,QAAMC,gBAAgBzZ,aAAWqP,KAAMrP,aAAW4X,QAE5D8B,GAAgB,IAAI1Z,aACpB2Z,GAAqB,IAAI3Z,aAE7B,SAAS4Z,GACPvW,EACAC,EACAsT,EACAhR,EACAgT,EACA7B,EACAD,GAEA,GAAKpW,UAAQoW,GAAb,CAIA,IAAItC,EAAKxU,aAAW0J,UAAU9D,EAAgB,EAALvC,EAAQkT,IAC7CvW,aAAWsP,cAAckF,EAAIoC,EAAOvO,aAAWkH,WACjDwH,EAAkBD,YAAYjT,OAAO+U,GAAe9B,EAAYzT,GAEhE0T,EAAkBD,YAAYjT,OAAO+U,GAAe9B,EAAYxT,IAIpE,SAASuW,GAAoBpO,GAC3B,IAWIxK,EAXAsD,EAAWkH,EAASlH,SACpBd,EAAac,EAASd,WACtBmC,EAAYnC,EAAWiC,SAAS7B,OAChCiT,EAAcpW,UAAQ+C,EAAWqT,aACjCrT,EAAWqT,YAAYjT,YACvB4J,EACApN,EAAUkE,EAASlE,QAEnBqV,EAAeJ,EAAqB/Q,GACpCkR,EAAeH,EAAqB/Q,GAGpC1D,EAASR,EAAQQ,OAEjBoY,EAAuB,GAC3BA,EAAqBpY,OAAS+E,EAAU/E,OAAS,EAEjD,IAAIqY,EAAuB,GAG3B,IAFAA,EAAqBrY,OAAS+E,EAAU/E,OAAS,EAE5CI,EAAI,EAAGA,EAAIgY,EAAqBpY,SAAUI,EAC7CgY,EAAqBhY,IAAM,EAC3BiY,EAAqBjY,IAAM,EAG7B,IAAKA,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,EAAG,CAC9B,IAAIoC,EAAKhD,EAAQY,GACbqC,EAAKjD,EAAQY,EAAI,GAEjBuT,EAAKxU,aAAW0J,UAAU9D,EAAgB,EAALvC,EAAQkT,IAC7CtC,EAAKjU,aAAW0J,UAAU9D,EAAgB,EAALtC,EAAQkT,IAG7CpE,KAAKC,IAAImC,EAAG3K,GAAKxB,aAAWiK,WAC1BkC,EAAG3K,EAAI,EACT2K,EAAG3K,GAAKxB,aAAWiK,SAEnBkC,EAAG3K,EAAIxB,aAAWiK,UAIlBF,KAAKC,IAAI4B,EAAGpK,GAAKxB,aAAWiK,WAC1B2B,EAAGpK,EAAI,EACToK,EAAGpK,GAAKxB,aAAWiK,SAEnB2B,EAAGpK,EAAIxB,aAAWiK,UAItB,IAAIwH,EAAepE,EAAajS,WAC5BsW,EAAYrE,EAAarV,QACzB2Z,EAAad,EACbe,EAAexE,EAAahS,WAC5ByW,EAAYzE,EAAapV,QACzB8Z,EAAalB,EAEbmB,EAAeC,oBAAkBC,iBACnC9F,EACAP,EACAsF,GACA9C,IAEF,GAAI/V,UAAQ0Z,GAAe,CAEzB,IAAI9M,EAAStN,aAAWkR,iBACtBlR,aAAW4X,OACX,EAAMvP,aAAWkS,SACjBb,IAEElF,EAAG3K,EAAI,IACT7J,aAAWwa,OAAOlN,EAAQA,GAE1BwM,EAAerE,EAAahS,WAC5BsW,EAAYtE,EAAapV,QACzB2Z,EAAaf,EACbgB,EAAevE,EAAajS,WAC5ByW,EAAYxE,EAAarV,QACzB8Z,EAAajB,GAGf,IAAIuB,EAAcza,aAAW0N,IAC3B0M,EACA9M,EACAqM,IAWFC,GACEvW,EACAC,EACAkR,EACA5O,EAZY6S,GACZqB,EACAC,EACAC,EACA3Z,EACAY,EACAuT,GAQAsF,EACAhD,GAWF8C,GACEvW,EACAC,EACAmX,EACA7U,EAZY6S,GACZqB,EACAC,EACAC,EACA3Z,GACC,EACDoa,GAQAX,EACAhD,GAGF9W,aAAWwa,OAAOlN,EAAQA,GAC1BtN,aAAW0N,IAAI0M,EAAc9M,EAAQmN,GASrCb,GACEvW,EACAC,EACAmX,EACA7U,EAZY6S,GACZwB,EACAC,EACAC,EACA9Z,GACC,EACDoa,GAQAR,EACAnD,GAWF8C,GACEvW,EACAC,EACA2Q,EACArO,EAZY6S,GACZwB,EACAC,EACAC,EACA9Z,EACAY,EAAI,EACJgT,GAQAgG,EACAnD,OAEG,CACL,IAAIC,EACA2B,EACAC,EAEAnE,EAAG3K,EAAI,GACTkN,EAAoBtB,EAAahS,WACjCiV,EAAiBjD,EAAapV,QAC9BsY,EAAkBM,IAElBlC,EAAoBrB,EAAajS,WACjCiV,EAAiBhD,EAAarV,QAC9BsY,EAAkBO,GAWpBU,GACEvW,EACAC,EACAkR,EACA5O,EAZY6S,GACZ1B,EACA2B,EACAC,EACAtY,EACAY,EACAuT,GAQAuC,EACAD,GAWF8C,GACEvW,EACAC,EACA2Q,EACArO,EAZY6S,GACZ1B,EACA2B,EACAC,EACAtY,EACAY,EAAI,EACJgT,GAQA8C,EACAD,IAKNtB,GAAyB/J,EAAUgK,EAAcC,GAGnD,IAAIgF,GAAqB,IAAIvJ,aACzBwJ,GAAqB,IAAIxJ,aAEzByJ,GAAqB,IAAI5a,aACzB6a,GAAqB,IAAI7a,aACzB8a,GAAqB,IAAI9a,aACzB+a,GAAqB,IAAI/a,aACzBgb,GAAqB,IAAIhb,aACzBib,GAAqB,IAAIjb,aAEzBkb,GAAqB,IAAI9E,aAE7B,SAAS+E,GAA0B5W,GAOjC,IANA,IAAId,EAAac,EAASd,WACtBmC,EAAYnC,EAAWiC,SAAS7B,OAChCuX,EAAgB3X,EAAWoI,aAAahI,OACxCwX,EAAgB5X,EAAWqI,aAAajI,OAExChD,EAAS+E,EAAU/E,OACdM,EAAI,EAAGA,EAAIN,EAAQM,GAAK,EAAG,CAClC,IAAIuE,EAAW1F,aAAW+K,OAAOnF,EAAWzE,EAAGyZ,IAC/C,KAAIlV,EAASkD,EAAI,GAAjB,CAIA,IAAIiD,EAAe7L,aAAW+K,OAAOqQ,EAAeja,EAAG0Z,KAEpDnV,EAASmE,EAAI,GAAOgC,EAAahC,EAAI,GACrCnE,EAASmE,EAAI,GAAOgC,EAAahC,EAAI,KAElC1I,EAAI,EAAI,GACVia,EAAcja,GAAKyE,EAAUzE,EAAI,GACjCia,EAAcja,EAAI,GAAKyE,EAAUzE,EAAI,GACrCia,EAAcja,EAAI,GAAKyE,EAAUzE,EAAI,IAErCnB,aAAWkL,KAAKxF,EAAU0V,EAAeja,IAI7C,IAAI2K,EAAe9L,aAAW+K,OAAOsQ,EAAela,EAAG2Z,KAEpDpV,EAASmE,EAAI,GAAOiC,EAAajC,EAAI,GACrCnE,EAASmE,EAAI,GAAOiC,EAAajC,EAAI,KAElC1I,EAAI,EAAIN,GACVwa,EAAcla,GAAKyE,EAAUzE,EAAI,GACjCka,EAAcla,EAAI,GAAKyE,EAAUzE,EAAI,GACrCka,EAAcla,EAAI,GAAKyE,EAAUzE,EAAI,IAErCnB,aAAWkL,KAAKxF,EAAU2V,EAAela,MAMjD,IAAIma,GAAe,EAAMjT,aAAWkS,SAChCgB,GAAiBlT,aAAWiK,SA2ThCpP,EAAiBsY,eAAiB,SAAU/P,GAE1C,IAAK/K,UAAQ+K,GACX,MAAM,IAAI9K,iBAAe,yBAI3B,IAAI4D,EAAWkH,EAASlH,SACpB2B,EAAiB3B,EAAS2B,eAC9B,GAAIxF,UAAQwF,KACCA,EAAeE,OAAOwC,EAAI1C,EAAeG,OAE3C,GACPF,iBAAesV,eAAevV,EAAgBsT,QAAMkC,mBAClDC,YAAUC,cAEZ,OAAOnQ,EAIX,GAAIlH,EAASsX,eAAiBC,eAAaC,KACzC,OAAQxX,EAASsX,cACf,KAAKC,eAAaE,WA/UxB,SAAgCvQ,GAC9B,IAaIxK,EACAE,EACAY,EAfAwC,EAAWkH,EAASlH,SACpBd,EAAac,EAASd,WACtBmC,EAAYnC,EAAWiC,SAAS7B,OAChCuX,EAAgB3X,EAAWoI,aAAahI,OACxCwX,EAAgB5X,EAAWqI,aAAajI,OACxCoY,EAAkBxY,EAAWyY,eAAerY,OAE5CgT,EAAYnW,UAAQ+C,EAAWmM,IAAMnM,EAAWmM,GAAG/L,YAAS4J,EAC5D0O,EAASzb,UAAQ+C,EAAW2Y,OAAS3Y,EAAW2Y,MAAMvY,YAAS4J,EAE/DiI,EAAeJ,EAAqB/Q,GACpCkR,EAAeH,EAAqB/Q,GAMpC8X,GAAoB,EAEpBxb,EAAS+E,EAAU/E,OAAS,EAChC,IAAKI,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,EAAG,CAC9B,IAAIoC,EAAKpC,EACLsC,EAAKtC,EAAI,EAETuT,EAAKxU,aAAW0J,UAAU9D,EAAgB,EAALvC,EAAQuX,IAC7CnG,EAAKzU,aAAW0J,UAAU9D,EAAgB,EAALrC,EAAQsX,IAKjD,GAAIzI,KAAKC,IAAImC,EAAG3K,GAAK0R,GAKnB,IAJA/G,EAAG3K,EAAI0R,IAAkB9G,EAAG5K,EAAI,GAAO,EAAM,GAC7CjE,EAAc,EAAJ3E,EAAQ,GAAKuT,EAAG3K,EAC1BjE,EAAoB,GAAT3E,EAAI,GAAS,GAAKuT,EAAG3K,EAE3B1I,EAAS,EAALkC,EAAQlC,EAAS,EAALkC,EAAS,GAAOlC,GAAK,EACxCia,EAAcja,GAAKyE,EAAc,EAAJ3E,GAC7Bma,EAAcja,EAAI,GAAKyE,EAAc,EAAJ3E,EAAQ,GACzCma,EAAcja,EAAI,GAAKyE,EAAc,EAAJ3E,EAAQ,GAK7C,GAAImR,KAAKC,IAAIoC,EAAG5K,GAAK0R,GAKnB,IAJA9G,EAAG5K,EAAI0R,IAAkB/G,EAAG3K,EAAI,GAAO,EAAM,GAC7CjE,EAAoB,GAAT3E,EAAI,GAAS,GAAKwT,EAAG5K,EAChCjE,EAAoB,GAAT3E,EAAI,GAAS,GAAKwT,EAAG5K,EAE3B1I,EAAS,EAALkC,EAAQlC,EAAS,EAALkC,EAAS,GAAOlC,GAAK,EACxCka,EAAcla,GAAKyE,EAAoB,GAAT3E,EAAI,IAClCoa,EAAcla,EAAI,GAAKyE,EAAoB,GAAT3E,EAAI,GAAS,GAC/Coa,EAAcla,EAAI,GAAKyE,EAAoB,GAAT3E,EAAI,GAAS,GAInD,IAAI6Y,EAAepE,EAAajS,WAC5BsW,EAAYrE,EAAarV,QACzBic,EAAe7G,EAAahS,WAC5B8Y,EAAY9G,EAAapV,QAEzB+Z,EAAeC,oBAAkBC,iBACnC9F,EACAC,EACA8E,GACAwB,IAEF,GAAIra,UAAQ0Z,GAAe,CACzBiC,GAAoB,EAGpB,IAAI/O,EAAStN,aAAWkR,iBACtBlR,aAAW4X,OACX0D,GACAN,IAEExG,EAAG3K,EAAI,IACT7J,aAAWwa,OAAOlN,EAAQA,GAC1BwM,EAAerE,EAAahS,WAC5BsW,EAAYtE,EAAapV,QACzBic,EAAe5G,EAAajS,WAC5B8Y,EAAY7G,EAAarV,SAG3B,IAAIoa,EAAcza,aAAW0N,IAC3B0M,EACA9M,EACA2N,IAEFnB,EAAapU,SAAS7B,OAAOrB,KAAKgS,EAAG5L,EAAG4L,EAAG3K,EAAG2K,EAAG1K,EAAG0K,EAAG5L,EAAG4L,EAAG3K,EAAG2K,EAAG1K,GACnEgQ,EAAapU,SAAS7B,OAAOrB,KAC3BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAEdgQ,EAAapU,SAAS7B,OAAOrB,KAC3BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAGdgQ,EAAajO,aAAahI,OAAOrB,KAC/B4Y,EAAmB,EAAL/X,GACd+X,EAAmB,EAAL/X,EAAS,GACvB+X,EAAmB,EAAL/X,EAAS,IAEzByW,EAAajO,aAAahI,OAAOrB,KAC/B4Y,EAAmB,EAAL/X,EAAS,GACvB+X,EAAmB,EAAL/X,EAAS,GACvB+X,EAAmB,EAAL/X,EAAS,IAEzByW,EAAajO,aAAahI,OAAOrB,KAAKgS,EAAG5L,EAAG4L,EAAG3K,EAAG2K,EAAG1K,EAAG0K,EAAG5L,EAAG4L,EAAG3K,EAAG2K,EAAG1K,GAEvEgQ,EAAahO,aAAajI,OAAOrB,KAC/BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAEdgQ,EAAahO,aAAajI,OAAOrB,KAC/BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAEdgQ,EAAahO,aAAajI,OAAOrB,KAC/BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAEdgQ,EAAahO,aAAajI,OAAOrB,KAC/BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAGd9J,aAAWwa,OAAOlN,EAAQA,GAC1BtN,aAAW0N,IAAI0M,EAAc9M,EAAQmN,GACrC6B,EAAa5W,SAAS7B,OAAOrB,KAC3BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAEdwS,EAAa5W,SAAS7B,OAAOrB,KAC3BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAEdwS,EAAa5W,SAAS7B,OAAOrB,KAAKiS,EAAG7L,EAAG6L,EAAG5K,EAAG4K,EAAG3K,EAAG2K,EAAG7L,EAAG6L,EAAG5K,EAAG4K,EAAG3K,GAEnEwS,EAAazQ,aAAahI,OAAOrB,KAC/BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAEdwS,EAAazQ,aAAahI,OAAOrB,KAC/BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAEdwS,EAAazQ,aAAahI,OAAOrB,KAC/BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAEdwS,EAAazQ,aAAahI,OAAOrB,KAC/BiY,EAAY7R,EACZ6R,EAAY5Q,EACZ4Q,EAAY3Q,GAGdwS,EAAaxQ,aAAajI,OAAOrB,KAAKiS,EAAG7L,EAAG6L,EAAG5K,EAAG4K,EAAG3K,EAAG2K,EAAG7L,EAAG6L,EAAG5K,EAAG4K,EAAG3K,GACvEwS,EAAaxQ,aAAajI,OAAOrB,KAC/B6Y,EAAmB,EAAL9X,GACd8X,EAAmB,EAAL9X,EAAS,GACvB8X,EAAmB,EAAL9X,EAAS,IAEzB+Y,EAAaxQ,aAAajI,OAAOrB,KAC/B6Y,EAAmB,EAAL9X,EAAS,GACvB8X,EAAmB,EAAL9X,EAAS,GACvB8X,EAAmB,EAAL9X,EAAS,IAGzB,IAAIiZ,EAAMrL,aAAWzH,UACnBuS,EACK,EAAL5Y,EACAqX,IAEE+B,EAAQrK,KAAKC,IAAImK,EAAI3S,GAEzBiQ,EAAaoC,eAAerY,OAAOrB,MAAM,EAAGia,EAAO,EAAGA,GACtD3C,EAAaoC,eAAerY,OAAOrB,MAAM,GAAIia,EAAO,GAAIA,GACxDH,EAAaJ,eAAerY,OAAOrB,MAAM,EAAGia,EAAO,EAAGA,GACtDH,EAAaJ,eAAerY,OAAOrB,MAAM,GAAIia,EAAO,GAAIA,GAExD,IAAI1L,EAAI/Q,aAAW0c,iBACjB1c,aAAW8N,SAASsM,EAAc5F,EAAIsG,KAMxC,GAJA/J,GAAK/Q,aAAW0c,iBACd1c,aAAW8N,SAAS2G,EAAID,EAAIsG,KAG1Bpa,UAAQyb,GAAS,CACnB,IAAIQ,EAAKvG,aAAW1M,UAAUyS,EAAa,EAAL9Y,EAAQ6X,IAC1C0B,EAAKxG,aAAW1M,UAAUyS,EAAa,EAAL5Y,EAAQ2X,IAE1CzK,EAAIpI,aAAWwU,KAAKF,EAAG/T,EAAGgU,EAAGhU,EAAGmI,GAChC+L,EAAIzU,aAAWwU,KAAKF,EAAG9S,EAAG+S,EAAG/S,EAAGkH,GAChCgM,EAAI1U,aAAWwU,KAAKF,EAAG7S,EAAG8S,EAAG9S,EAAGiH,GAChCiM,EAAI3U,aAAWwU,KAAKF,EAAGM,EAAGL,EAAGK,EAAGlM,GAEpC,IAAK5P,EAAS,EAALkC,EAAQlC,EAAS,EAALkC,EAAS,IAASlC,EACrC2Y,EAAasC,MAAMvY,OAAOrB,KAAK2Z,EAAOhb,IAMxC,IAJA2Y,EAAasC,MAAMvY,OAAOrB,KAAKiO,EAAGqM,EAAGC,EAAGC,GACxClD,EAAasC,MAAMvY,OAAOrB,KAAKiO,EAAGqM,EAAGC,EAAGC,GACxCV,EAAaF,MAAMvY,OAAOrB,KAAKiO,EAAGqM,EAAGC,EAAGC,GACxCV,EAAaF,MAAMvY,OAAOrB,KAAKiO,EAAGqM,EAAGC,EAAGC,GACnC7b,EAAS,EAALoC,EAAQpC,EAAS,EAALoC,EAAS,IAASpC,EACrCmb,EAAaF,MAAMvY,OAAOrB,KAAK2Z,EAAOhb,IAI1C,GAAIT,UAAQmW,GAAY,CACtB,IAAIqG,EAAK/L,aAAWzH,UAAUmN,EAAgB,EAALxT,EAAQqX,IAC7CyC,EAAKhM,aAAWzH,UAClBmN,EACU,GAAT5V,EAAI,GACL0Z,IAGEyC,EAAK/U,aAAWwU,KAAKK,EAAGtU,EAAGuU,EAAGvU,EAAGmI,GAErC,IAAK5P,EAAS,EAALkC,EAAQlC,EAAS,EAALkC,EAAS,IAASlC,EACrC2Y,EAAalK,GAAG/L,OAAOrB,KAAKqU,EAAU1V,IAMxC,IAJA2Y,EAAalK,GAAG/L,OAAOrB,KAAK4a,EAAIF,EAAGrT,GACnCiQ,EAAalK,GAAG/L,OAAOrB,KAAK4a,EAAID,EAAGtT,GACnCyS,EAAa1M,GAAG/L,OAAOrB,KAAK4a,EAAIF,EAAGrT,GACnCyS,EAAa1M,GAAG/L,OAAOrB,KAAK4a,EAAID,EAAGtT,GAC9B1I,EAAS,EAALoC,EAAQpC,EAAS,EAALoC,EAAS,IAASpC,EACrCmb,EAAa1M,GAAG/L,OAAOrB,KAAKqU,EAAU1V,IAI1CY,EAAQ+X,EAAapU,SAAS7B,OAAOhD,OAAS,EAAI,EAClDkZ,EAAUvX,KAAKT,EAAOA,EAAQ,EAAGA,EAAQ,GACzCgY,EAAUvX,KAAKT,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,GAE7CA,EAAQua,EAAa5W,SAAS7B,OAAOhD,OAAS,EAAI,EAClD0b,EAAU/Z,KAAKT,EAAOA,EAAQ,EAAGA,EAAQ,GACzCwa,EAAU/Z,KAAKT,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,OACxC,CACL,IAAIgV,EACA2B,EAeJ,IAbIlE,EAAG3K,EAAI,GACTkN,EAAoBtB,EAAahS,WACjCiV,EAAiBjD,EAAapV,UAE9B0W,EAAoBrB,EAAajS,WACjCiV,EAAiBhD,EAAarV,SAGhC0W,EAAkBrR,SAAS7B,OAAOrB,KAAKgS,EAAG5L,EAAG4L,EAAG3K,EAAG2K,EAAG1K,GACtDiN,EAAkBrR,SAAS7B,OAAOrB,KAAKgS,EAAG5L,EAAG4L,EAAG3K,EAAG2K,EAAG1K,GACtDiN,EAAkBrR,SAAS7B,OAAOrB,KAAKiS,EAAG7L,EAAG6L,EAAG5K,EAAG4K,EAAG3K,GACtDiN,EAAkBrR,SAAS7B,OAAOrB,KAAKiS,EAAG7L,EAAG6L,EAAG5K,EAAG4K,EAAG3K,GAEjD3I,EAAQ,EAAJF,EAAOE,EAAQ,EAAJF,EAAQ,KAASE,EACnC4V,EAAkBlL,aAAahI,OAAOrB,KAAK4Y,EAAcja,IACzD4V,EAAkBjL,aAAajI,OAAOrB,KAAK6Y,EAAcla,IAG3D,IAAKA,EAAQ,EAAJF,EAAOE,EAAQ,EAAJF,EAAQ,IAASE,EACnC4V,EAAkBmF,eAAerY,OAAOrB,KAAKyZ,EAAgB9a,IACzDT,UAAQmW,IACVE,EAAkBnH,GAAG/L,OAAOrB,KAAKqU,EAAU1V,IAI/C,GAAIT,UAAQyb,GACV,IAAKhb,EAAQ,EAAJF,EAAOE,EAAQ,EAAJF,EAAQ,KAASE,EACnC4V,EAAkBqF,MAAMvY,OAAOrB,KAAK2Z,EAAOhb,IAI/CY,EAAQgV,EAAkBrR,SAAS7B,OAAOhD,OAAS,EAAI,EACvD6X,EAAelW,KAAKT,EAAOA,EAAQ,EAAGA,EAAQ,GAC9C2W,EAAelW,KAAKT,EAAQ,EAAGA,EAAQ,EAAGA,EAAQ,IAIlDsa,IACFlB,GAA0B1F,GAC1B0F,GAA0BzF,IAG5BF,GAAyB/J,EAAUgK,EAAcC,GAwC3C2H,CAAuB5R,GACvB,MACF,KAAKqQ,eAAapX,UAChBsU,GAAwBvN,GACxB,MACF,KAAKqQ,eAAavW,MAChBsU,GAAoBpO,QAIxB+F,EAAejN,GACXA,EAASC,gBAAkBC,gBAAcC,UAC3CsU,GAAwBvN,GACflH,EAASC,gBAAkBC,gBAAcc,OAClDsU,GAAoBpO,GAIxB,OAAOA"}