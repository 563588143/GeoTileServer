{"version":3,"file":"createPolylineGeometry.js","sources":["../../../../Source/Core/PolylineGeometry.js","../../../../Source/WorkersES6/createPolylineGeometry.js"],"sourcesContent":["import ArcType from \"./ArcType.js\";\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Color from \"./Color.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryType from \"./GeometryType.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolylinePipeline from \"./PolylinePipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nvar scratchInterpolateColorsArray = [];\n\nfunction interpolateColors(p0, p1, color0, color1, numPoints) {\n  var colors = scratchInterpolateColorsArray;\n  colors.length = numPoints;\n  var i;\n\n  var r0 = color0.red;\n  var g0 = color0.green;\n  var b0 = color0.blue;\n  var a0 = color0.alpha;\n\n  var r1 = color1.red;\n  var g1 = color1.green;\n  var b1 = color1.blue;\n  var a1 = color1.alpha;\n\n  if (Color.equals(color0, color1)) {\n    for (i = 0; i < numPoints; i++) {\n      colors[i] = Color.clone(color0);\n    }\n    return colors;\n  }\n\n  var redPerVertex = (r1 - r0) / numPoints;\n  var greenPerVertex = (g1 - g0) / numPoints;\n  var bluePerVertex = (b1 - b0) / numPoints;\n  var alphaPerVertex = (a1 - a0) / numPoints;\n\n  for (i = 0; i < numPoints; i++) {\n    colors[i] = new Color(\n      r0 + i * redPerVertex,\n      g0 + i * greenPerVertex,\n      b0 + i * bluePerVertex,\n      a0 + i * alphaPerVertex\n    );\n  }\n\n  return colors;\n}\n\n/**\n * A description of a polyline modeled as a line strip; the first two positions define a line segment,\n * and each additional position defines a line segment from the previous position. The polyline is capable of\n * displaying with a material.\n *\n * @alias PolylineGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\n * @param {Number} [options.width=1.0] The width in pixels.\n * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\n * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n *\n * @exception {DeveloperError} At least two positions are required.\n * @exception {DeveloperError} width must be greater than or equal to one.\n * @exception {DeveloperError} colors has an invalid length.\n *\n * @see PolylineGeometry#createGeometry\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\n *\n * @example\n * // A polyline with two connected line segments\n * var polyline = new Cesium.PolylineGeometry({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     0.0, 0.0,\n *     5.0, 0.0,\n *     5.0, 5.0\n *   ]),\n *   width : 10.0\n * });\n * var geometry = Cesium.PolylineGeometry.createGeometry(polyline);\n */\nfunction PolylineGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.positions;\n  var colors = options.colors;\n  var width = defaultValue(options.width, 1.0);\n  var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions) || positions.length < 2) {\n    throw new DeveloperError(\"At least two positions are required.\");\n  }\n  if (typeof width !== \"number\") {\n    throw new DeveloperError(\"width must be a number\");\n  }\n  if (\n    defined(colors) &&\n    ((colorsPerVertex && colors.length < positions.length) ||\n      (!colorsPerVertex && colors.length < positions.length - 1))\n  ) {\n    throw new DeveloperError(\"colors has an invalid length.\");\n  }\n  //>>includeEnd('debug');\n\n  this._positions = positions;\n  this._colors = colors;\n  this._width = width;\n  this._colorsPerVertex = colorsPerVertex;\n  this._vertexFormat = VertexFormat.clone(\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\n  );\n\n  this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._workerName = \"createPolylineGeometry\";\n\n  var numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 4;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolylineGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var colors = value._colors;\n  length = defined(colors) ? colors.length : 0.0;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n    Color.pack(colors[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._width;\n  array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\n  array[startingIndex++] = value._arcType;\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  positions: undefined,\n  colors: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  width: undefined,\n  colorsPerVertex: undefined,\n  arcType: undefined,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineGeometry} [result] The object into which to store the result.\n * @returns {PolylineGeometry} The modified result parameter or a new PolylineGeometry instance if one was not provided.\n */\nPolylineGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var colors = length > 0 ? new Array(length) : undefined;\n\n  for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n    colors[i] = Color.unpack(array, startingIndex);\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  var width = array[startingIndex++];\n  var colorsPerVertex = array[startingIndex++] === 1.0;\n  var arcType = array[startingIndex++];\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.positions = positions;\n    scratchOptions.colors = colors;\n    scratchOptions.width = width;\n    scratchOptions.colorsPerVertex = colorsPerVertex;\n    scratchOptions.arcType = arcType;\n    scratchOptions.granularity = granularity;\n    return new PolylineGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._colors = colors;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._width = width;\n  result._colorsPerVertex = colorsPerVertex;\n  result._arcType = arcType;\n  result._granularity = granularity;\n\n  return result;\n};\n\nvar scratchCartesian3 = new Cartesian3();\nvar scratchPosition = new Cartesian3();\nvar scratchPrevPosition = new Cartesian3();\nvar scratchNextPosition = new Cartesian3();\n\n/**\n * Computes the geometric representation of a polyline, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineGeometry} polylineGeometry A description of the polyline.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolylineGeometry.createGeometry = function (polylineGeometry) {\n  var width = polylineGeometry._width;\n  var vertexFormat = polylineGeometry._vertexFormat;\n  var colors = polylineGeometry._colors;\n  var colorsPerVertex = polylineGeometry._colorsPerVertex;\n  var arcType = polylineGeometry._arcType;\n  var granularity = polylineGeometry._granularity;\n  var ellipsoid = polylineGeometry._ellipsoid;\n\n  var i;\n  var j;\n  var k;\n\n  var removedIndices = [];\n  var positions = arrayRemoveDuplicates(\n    polylineGeometry._positions,\n    Cartesian3.equalsEpsilon,\n    false,\n    removedIndices\n  );\n\n  if (defined(colors) && removedIndices.length > 0) {\n    var removedArrayIndex = 0;\n    var nextRemovedIndex = removedIndices[0];\n    colors = colors.filter(function (color, index) {\n      var remove = false;\n      if (colorsPerVertex) {\n        remove =\n          index === nextRemovedIndex || (index === 0 && nextRemovedIndex === 1);\n      } else {\n        remove = index + 1 === nextRemovedIndex;\n      }\n\n      if (remove) {\n        removedArrayIndex++;\n        nextRemovedIndex = removedIndices[removedArrayIndex];\n        return false;\n      }\n      return true;\n    });\n  }\n\n  var positionsLength = positions.length;\n\n  // A width of a pixel or less is not a valid geometry, but in order to support external data\n  // that may have errors we treat this as an empty geometry.\n  if (positionsLength < 2 || width <= 0.0) {\n    return undefined;\n  }\n\n  if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\n    var subdivisionSize;\n    var numberOfPointsFunction;\n    if (arcType === ArcType.GEODESIC) {\n      subdivisionSize = CesiumMath.chordLength(\n        granularity,\n        ellipsoid.maximumRadius\n      );\n      numberOfPointsFunction = PolylinePipeline.numberOfPoints;\n    } else {\n      subdivisionSize = granularity;\n      numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\n    }\n\n    var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\n\n    if (defined(colors)) {\n      var colorLength = 1;\n      for (i = 0; i < positionsLength - 1; ++i) {\n        colorLength += numberOfPointsFunction(\n          positions[i],\n          positions[i + 1],\n          subdivisionSize\n        );\n      }\n\n      var newColors = new Array(colorLength);\n      var newColorIndex = 0;\n\n      for (i = 0; i < positionsLength - 1; ++i) {\n        var p0 = positions[i];\n        var p1 = positions[i + 1];\n        var c0 = colors[i];\n\n        var numColors = numberOfPointsFunction(p0, p1, subdivisionSize);\n        if (colorsPerVertex && i < colorLength) {\n          var c1 = colors[i + 1];\n          var interpolatedColors = interpolateColors(p0, p1, c0, c1, numColors);\n          var interpolatedColorsLength = interpolatedColors.length;\n          for (j = 0; j < interpolatedColorsLength; ++j) {\n            newColors[newColorIndex++] = interpolatedColors[j];\n          }\n        } else {\n          for (j = 0; j < numColors; ++j) {\n            newColors[newColorIndex++] = Color.clone(c0);\n          }\n        }\n      }\n\n      newColors[newColorIndex] = Color.clone(colors[colors.length - 1]);\n      colors = newColors;\n\n      scratchInterpolateColorsArray.length = 0;\n    }\n\n    if (arcType === ArcType.GEODESIC) {\n      positions = PolylinePipeline.generateCartesianArc({\n        positions: positions,\n        minDistance: subdivisionSize,\n        ellipsoid: ellipsoid,\n        height: heights,\n      });\n    } else {\n      positions = PolylinePipeline.generateCartesianRhumbArc({\n        positions: positions,\n        granularity: subdivisionSize,\n        ellipsoid: ellipsoid,\n        height: heights,\n      });\n    }\n  }\n\n  positionsLength = positions.length;\n  var size = positionsLength * 4.0 - 4.0;\n\n  var finalPositions = new Float64Array(size * 3);\n  var prevPositions = new Float64Array(size * 3);\n  var nextPositions = new Float64Array(size * 3);\n  var expandAndWidth = new Float32Array(size * 2);\n  var st = vertexFormat.st ? new Float32Array(size * 2) : undefined;\n  var finalColors = defined(colors) ? new Uint8Array(size * 4) : undefined;\n\n  var positionIndex = 0;\n  var expandAndWidthIndex = 0;\n  var stIndex = 0;\n  var colorIndex = 0;\n  var position;\n\n  for (j = 0; j < positionsLength; ++j) {\n    if (j === 0) {\n      position = scratchCartesian3;\n      Cartesian3.subtract(positions[0], positions[1], position);\n      Cartesian3.add(positions[0], position, position);\n    } else {\n      position = positions[j - 1];\n    }\n\n    Cartesian3.clone(position, scratchPrevPosition);\n    Cartesian3.clone(positions[j], scratchPosition);\n\n    if (j === positionsLength - 1) {\n      position = scratchCartesian3;\n      Cartesian3.subtract(\n        positions[positionsLength - 1],\n        positions[positionsLength - 2],\n        position\n      );\n      Cartesian3.add(positions[positionsLength - 1], position, position);\n    } else {\n      position = positions[j + 1];\n    }\n\n    Cartesian3.clone(position, scratchNextPosition);\n\n    var color0, color1;\n    if (defined(finalColors)) {\n      if (j !== 0 && !colorsPerVertex) {\n        color0 = colors[j - 1];\n      } else {\n        color0 = colors[j];\n      }\n\n      if (j !== positionsLength - 1) {\n        color1 = colors[j];\n      }\n    }\n\n    var startK = j === 0 ? 2 : 0;\n    var endK = j === positionsLength - 1 ? 2 : 4;\n\n    for (k = startK; k < endK; ++k) {\n      Cartesian3.pack(scratchPosition, finalPositions, positionIndex);\n      Cartesian3.pack(scratchPrevPosition, prevPositions, positionIndex);\n      Cartesian3.pack(scratchNextPosition, nextPositions, positionIndex);\n      positionIndex += 3;\n\n      var direction = k - 2 < 0 ? -1.0 : 1.0;\n      expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1; // expand direction\n      expandAndWidth[expandAndWidthIndex++] = direction * width;\n\n      if (vertexFormat.st) {\n        st[stIndex++] = j / (positionsLength - 1);\n        st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0.0);\n      }\n\n      if (defined(finalColors)) {\n        var color = k < 2 ? color0 : color1;\n\n        finalColors[colorIndex++] = Color.floatToByte(color.red);\n        finalColors[colorIndex++] = Color.floatToByte(color.green);\n        finalColors[colorIndex++] = Color.floatToByte(color.blue);\n        finalColors[colorIndex++] = Color.floatToByte(color.alpha);\n      }\n    }\n  }\n\n  var attributes = new GeometryAttributes();\n\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: finalPositions,\n  });\n\n  attributes.prevPosition = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: prevPositions,\n  });\n\n  attributes.nextPosition = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: nextPositions,\n  });\n\n  attributes.expandAndWidth = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.FLOAT,\n    componentsPerAttribute: 2,\n    values: expandAndWidth,\n  });\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: st,\n    });\n  }\n\n  if (defined(finalColors)) {\n    attributes.color = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 4,\n      values: finalColors,\n      normalize: true,\n    });\n  }\n\n  var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\n  var index = 0;\n  var indicesIndex = 0;\n  var length = positionsLength - 1.0;\n  for (j = 0; j < length; ++j) {\n    indices[indicesIndex++] = index;\n    indices[indicesIndex++] = index + 2;\n    indices[indicesIndex++] = index + 1;\n\n    indices[indicesIndex++] = index + 1;\n    indices[indicesIndex++] = index + 2;\n    indices[indicesIndex++] = index + 3;\n\n    index += 4;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: BoundingSphere.fromPoints(positions),\n    geometryType: GeometryType.POLYLINES,\n  });\n};\nexport default PolylineGeometry;\n","import defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport PolylineGeometry from \"../Core/PolylineGeometry.js\";\n\nfunction createPolylineGeometry(polylineGeometry, offset) {\n  if (defined(offset)) {\n    polylineGeometry = PolylineGeometry.unpack(polylineGeometry, offset);\n  }\n  polylineGeometry._ellipsoid = Ellipsoid.clone(polylineGeometry._ellipsoid);\n  return PolylineGeometry.createGeometry(polylineGeometry);\n}\nexport default createPolylineGeometry;\n"],"names":["scratchInterpolateColorsArray","interpolateColors","p0","p1","color0","color1","numPoints","i","colors","length","r0","red","g0","green","b0","blue","a0","alpha","r1","g1","b1","a1","Color","equals","clone","redPerVertex","greenPerVertex","bluePerVertex","alphaPerVertex","PolylineGeometry","options","positions","defaultValue","EMPTY_OBJECT","width","colorsPerVertex","defined","DeveloperError","this","_positions","_colors","_width","_colorsPerVertex","_vertexFormat","VertexFormat","vertexFormat","DEFAULT","_arcType","arcType","ArcType","GEODESIC","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_ellipsoid","Ellipsoid","ellipsoid","WGS84","_workerName","numComponents","Cartesian3","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","undefined","unpack","result","Array","scratchCartesian3","scratchPosition","scratchPrevPosition","scratchNextPosition","createGeometry","polylineGeometry","j","k","removedIndices","arrayRemoveDuplicates","equalsEpsilon","removedArrayIndex","nextRemovedIndex","filter","color","index","positionsLength","RHUMB","subdivisionSize","numberOfPointsFunction","chordLength","maximumRadius","PolylinePipeline","numberOfPoints","numberOfPointsRhumbLine","heights","extractHeights","colorLength","newColors","newColorIndex","c0","numColors","interpolatedColors","interpolatedColorsLength","generateCartesianArc","minDistance","height","generateCartesianRhumbArc","position","size","finalPositions","Float64Array","prevPositions","nextPositions","expandAndWidth","Float32Array","st","finalColors","Uint8Array","positionIndex","expandAndWidthIndex","stIndex","colorIndex","subtract","add","endK","direction","Math","max","floatToByte","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","prevPosition","nextPosition","FLOAT","UNSIGNED_BYTE","normalize","indices","IndexDatatype","createTypedArray","indicesIndex","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BoundingSphere","fromPoints","geometryType","GeometryType","POLYLINES","offset"],"mappings":"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"}