{"version":3,"file":"createVectorTilePolygons.js","sources":["../../../../Source/WorkersES6/createVectorTilePolygons.js"],"sourcesContent":["import AttributeCompression from \"../Core/AttributeCompression.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Cartographic from \"../Core/Cartographic.js\";\nimport Color from \"../Core/Color.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\nimport CesiumMath from \"../Core/Math.js\";\nimport OrientedBoundingBox from \"../Core/OrientedBoundingBox.js\";\nimport Rectangle from \"../Core/Rectangle.js\";\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\n\nvar scratchCenter = new Cartesian3();\nvar scratchEllipsoid = new Ellipsoid();\nvar scratchRectangle = new Rectangle();\nvar scratchScalars = {\n  min: undefined,\n  max: undefined,\n  indexBytesPerElement: undefined,\n};\n\nfunction unpackBuffer(buffer) {\n  var packedBuffer = new Float64Array(buffer);\n\n  var offset = 0;\n  scratchScalars.indexBytesPerElement = packedBuffer[offset++];\n\n  scratchScalars.min = packedBuffer[offset++];\n  scratchScalars.max = packedBuffer[offset++];\n\n  Cartesian3.unpack(packedBuffer, offset, scratchCenter);\n  offset += Cartesian3.packedLength;\n\n  Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\n  offset += Ellipsoid.packedLength;\n\n  Rectangle.unpack(packedBuffer, offset, scratchRectangle);\n}\n\nfunction packedBatchedIndicesLength(batchedIndices) {\n  var length = batchedIndices.length;\n  var count = 0;\n  for (var i = 0; i < length; ++i) {\n    count += Color.packedLength + 3 + batchedIndices[i].batchIds.length;\n  }\n  return count;\n}\n\nfunction packBuffer(indexDatatype, boundingVolumes, batchedIndices) {\n  var numBVs = boundingVolumes.length;\n  var length =\n    1 +\n    1 +\n    numBVs * OrientedBoundingBox.packedLength +\n    1 +\n    packedBatchedIndicesLength(batchedIndices);\n\n  var packedBuffer = new Float64Array(length);\n\n  var offset = 0;\n  packedBuffer[offset++] = indexDatatype;\n  packedBuffer[offset++] = numBVs;\n\n  for (var i = 0; i < numBVs; ++i) {\n    OrientedBoundingBox.pack(boundingVolumes[i], packedBuffer, offset);\n    offset += OrientedBoundingBox.packedLength;\n  }\n\n  var indicesLength = batchedIndices.length;\n  packedBuffer[offset++] = indicesLength;\n\n  for (var j = 0; j < indicesLength; ++j) {\n    var batchedIndex = batchedIndices[j];\n\n    Color.pack(batchedIndex.color, packedBuffer, offset);\n    offset += Color.packedLength;\n\n    packedBuffer[offset++] = batchedIndex.offset;\n    packedBuffer[offset++] = batchedIndex.count;\n\n    var batchIds = batchedIndex.batchIds;\n    var batchIdsLength = batchIds.length;\n    packedBuffer[offset++] = batchIdsLength;\n\n    for (var k = 0; k < batchIdsLength; ++k) {\n      packedBuffer[offset++] = batchIds[k];\n    }\n  }\n\n  return packedBuffer;\n}\n\nvar maxShort = 32767;\n\nvar scratchEncodedPosition = new Cartesian3();\nvar scratchNormal = new Cartesian3();\nvar scratchScaledNormal = new Cartesian3();\nvar scratchMinHeightPosition = new Cartesian3();\nvar scratchMaxHeightPosition = new Cartesian3();\nvar scratchBVCartographic = new Cartographic();\nvar scratchBVRectangle = new Rectangle();\n\nfunction createVectorTilePolygons(parameters, transferableObjects) {\n  unpackBuffer(parameters.packedBuffer);\n\n  var indices;\n  var indexBytesPerElement = scratchScalars.indexBytesPerElement;\n  if (indexBytesPerElement === 2) {\n    indices = new Uint16Array(parameters.indices);\n  } else {\n    indices = new Uint32Array(parameters.indices);\n  }\n\n  var positions = new Uint16Array(parameters.positions);\n  var counts = new Uint32Array(parameters.counts);\n  var indexCounts = new Uint32Array(parameters.indexCounts);\n  var batchIds = new Uint32Array(parameters.batchIds);\n  var batchTableColors = new Uint32Array(parameters.batchTableColors);\n\n  var boundingVolumes = new Array(counts.length);\n\n  var center = scratchCenter;\n  var ellipsoid = scratchEllipsoid;\n  var rectangle = scratchRectangle;\n  var minHeight = scratchScalars.min;\n  var maxHeight = scratchScalars.max;\n\n  var minimumHeights = parameters.minimumHeights;\n  var maximumHeights = parameters.maximumHeights;\n  if (defined(minimumHeights) && defined(maximumHeights)) {\n    minimumHeights = new Float32Array(minimumHeights);\n    maximumHeights = new Float32Array(maximumHeights);\n  }\n\n  var i;\n  var j;\n  var rgba;\n\n  var positionsLength = positions.length / 2;\n  var uBuffer = positions.subarray(0, positionsLength);\n  var vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\n  AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer);\n\n  var decodedPositions = new Float64Array(positionsLength * 3);\n  for (i = 0; i < positionsLength; ++i) {\n    var u = uBuffer[i];\n    var v = vBuffer[i];\n\n    var x = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\n    var y = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\n\n    var cart = Cartographic.fromRadians(x, y, 0.0, scratchBVCartographic);\n    var decodedPosition = ellipsoid.cartographicToCartesian(\n      cart,\n      scratchEncodedPosition\n    );\n    Cartesian3.pack(decodedPosition, decodedPositions, i * 3);\n  }\n\n  var countsLength = counts.length;\n  var offsets = new Array(countsLength);\n  var indexOffsets = new Array(countsLength);\n  var currentOffset = 0;\n  var currentIndexOffset = 0;\n  for (i = 0; i < countsLength; ++i) {\n    offsets[i] = currentOffset;\n    indexOffsets[i] = currentIndexOffset;\n\n    currentOffset += counts[i];\n    currentIndexOffset += indexCounts[i];\n  }\n\n  var batchedPositions = new Float32Array(positionsLength * 3 * 2);\n  var batchedIds = new Uint16Array(positionsLength * 2);\n  var batchedIndexOffsets = new Uint32Array(indexOffsets.length);\n  var batchedIndexCounts = new Uint32Array(indexCounts.length);\n  var batchedIndices = [];\n\n  var colorToBuffers = {};\n  for (i = 0; i < countsLength; ++i) {\n    rgba = batchTableColors[i];\n    if (!defined(colorToBuffers[rgba])) {\n      colorToBuffers[rgba] = {\n        positionLength: counts[i],\n        indexLength: indexCounts[i],\n        offset: 0,\n        indexOffset: 0,\n        batchIds: [i],\n      };\n    } else {\n      colorToBuffers[rgba].positionLength += counts[i];\n      colorToBuffers[rgba].indexLength += indexCounts[i];\n      colorToBuffers[rgba].batchIds.push(i);\n    }\n  }\n\n  // get the offsets and counts for the positions and indices of each primitive\n  var buffer;\n  var byColorPositionOffset = 0;\n  var byColorIndexOffset = 0;\n  for (rgba in colorToBuffers) {\n    if (colorToBuffers.hasOwnProperty(rgba)) {\n      buffer = colorToBuffers[rgba];\n      buffer.offset = byColorPositionOffset;\n      buffer.indexOffset = byColorIndexOffset;\n\n      var positionLength = buffer.positionLength * 2;\n      var indexLength = buffer.indexLength * 2 + buffer.positionLength * 6;\n\n      byColorPositionOffset += positionLength;\n      byColorIndexOffset += indexLength;\n\n      buffer.indexLength = indexLength;\n    }\n  }\n\n  var batchedDrawCalls = [];\n\n  for (rgba in colorToBuffers) {\n    if (colorToBuffers.hasOwnProperty(rgba)) {\n      buffer = colorToBuffers[rgba];\n\n      batchedDrawCalls.push({\n        color: Color.fromRgba(parseInt(rgba)),\n        offset: buffer.indexOffset,\n        count: buffer.indexLength,\n        batchIds: buffer.batchIds,\n      });\n    }\n  }\n\n  for (i = 0; i < countsLength; ++i) {\n    rgba = batchTableColors[i];\n\n    buffer = colorToBuffers[rgba];\n    var positionOffset = buffer.offset;\n    var positionIndex = positionOffset * 3;\n    var batchIdIndex = positionOffset;\n\n    var polygonOffset = offsets[i];\n    var polygonCount = counts[i];\n    var batchId = batchIds[i];\n\n    var polygonMinimumHeight = minHeight;\n    var polygonMaximumHeight = maxHeight;\n    if (defined(minimumHeights) && defined(maximumHeights)) {\n      polygonMinimumHeight = minimumHeights[i];\n      polygonMaximumHeight = maximumHeights[i];\n    }\n\n    var minLat = Number.POSITIVE_INFINITY;\n    var maxLat = Number.NEGATIVE_INFINITY;\n    var minLon = Number.POSITIVE_INFINITY;\n    var maxLon = Number.NEGATIVE_INFINITY;\n\n    for (j = 0; j < polygonCount; ++j) {\n      var position = Cartesian3.unpack(\n        decodedPositions,\n        polygonOffset * 3 + j * 3,\n        scratchEncodedPosition\n      );\n      ellipsoid.scaleToGeodeticSurface(position, position);\n\n      var carto = ellipsoid.cartesianToCartographic(\n        position,\n        scratchBVCartographic\n      );\n      var lat = carto.latitude;\n      var lon = carto.longitude;\n\n      minLat = Math.min(lat, minLat);\n      maxLat = Math.max(lat, maxLat);\n      minLon = Math.min(lon, minLon);\n      maxLon = Math.max(lon, maxLon);\n\n      var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\n      var scaledNormal = Cartesian3.multiplyByScalar(\n        normal,\n        polygonMinimumHeight,\n        scratchScaledNormal\n      );\n      var minHeightPosition = Cartesian3.add(\n        position,\n        scaledNormal,\n        scratchMinHeightPosition\n      );\n\n      scaledNormal = Cartesian3.multiplyByScalar(\n        normal,\n        polygonMaximumHeight,\n        scaledNormal\n      );\n      var maxHeightPosition = Cartesian3.add(\n        position,\n        scaledNormal,\n        scratchMaxHeightPosition\n      );\n\n      Cartesian3.subtract(maxHeightPosition, center, maxHeightPosition);\n      Cartesian3.subtract(minHeightPosition, center, minHeightPosition);\n\n      Cartesian3.pack(maxHeightPosition, batchedPositions, positionIndex);\n      Cartesian3.pack(minHeightPosition, batchedPositions, positionIndex + 3);\n\n      batchedIds[batchIdIndex] = batchId;\n      batchedIds[batchIdIndex + 1] = batchId;\n\n      positionIndex += 6;\n      batchIdIndex += 2;\n    }\n\n    rectangle = scratchBVRectangle;\n    rectangle.west = minLon;\n    rectangle.east = maxLon;\n    rectangle.south = minLat;\n    rectangle.north = maxLat;\n\n    boundingVolumes[i] = OrientedBoundingBox.fromRectangle(\n      rectangle,\n      minHeight,\n      maxHeight,\n      ellipsoid\n    );\n\n    var indicesIndex = buffer.indexOffset;\n\n    var indexOffset = indexOffsets[i];\n    var indexCount = indexCounts[i];\n\n    batchedIndexOffsets[i] = indicesIndex;\n\n    for (j = 0; j < indexCount; j += 3) {\n      var i0 = indices[indexOffset + j] - polygonOffset;\n      var i1 = indices[indexOffset + j + 1] - polygonOffset;\n      var i2 = indices[indexOffset + j + 2] - polygonOffset;\n\n      // triangle on the top of the extruded polygon\n      batchedIndices[indicesIndex++] = i0 * 2 + positionOffset;\n      batchedIndices[indicesIndex++] = i1 * 2 + positionOffset;\n      batchedIndices[indicesIndex++] = i2 * 2 + positionOffset;\n\n      // triangle on the bottom of the extruded polygon\n      batchedIndices[indicesIndex++] = i2 * 2 + 1 + positionOffset;\n      batchedIndices[indicesIndex++] = i1 * 2 + 1 + positionOffset;\n      batchedIndices[indicesIndex++] = i0 * 2 + 1 + positionOffset;\n    }\n\n    // indices for the walls of the extruded polygon\n    for (j = 0; j < polygonCount; ++j) {\n      var v0 = j;\n      var v1 = (j + 1) % polygonCount;\n\n      batchedIndices[indicesIndex++] = v0 * 2 + 1 + positionOffset;\n      batchedIndices[indicesIndex++] = v1 * 2 + positionOffset;\n      batchedIndices[indicesIndex++] = v0 * 2 + positionOffset;\n\n      batchedIndices[indicesIndex++] = v0 * 2 + 1 + positionOffset;\n      batchedIndices[indicesIndex++] = v1 * 2 + 1 + positionOffset;\n      batchedIndices[indicesIndex++] = v1 * 2 + positionOffset;\n    }\n\n    buffer.offset += polygonCount * 2;\n    buffer.indexOffset = indicesIndex;\n\n    batchedIndexCounts[i] = indicesIndex - batchedIndexOffsets[i];\n  }\n\n  batchedIndices = IndexDatatype.createTypedArray(\n    batchedPositions.length / 3,\n    batchedIndices\n  );\n\n  var batchedIndicesLength = batchedDrawCalls.length;\n  for (var m = 0; m < batchedIndicesLength; ++m) {\n    var tempIds = batchedDrawCalls[m].batchIds;\n    var count = 0;\n    var tempIdsLength = tempIds.length;\n    for (var n = 0; n < tempIdsLength; ++n) {\n      count += batchedIndexCounts[tempIds[n]];\n    }\n    batchedDrawCalls[m].count = count;\n  }\n\n  var indexDatatype =\n    batchedIndices.BYTES_PER_ELEMENT === 2\n      ? IndexDatatype.UNSIGNED_SHORT\n      : IndexDatatype.UNSIGNED_INT;\n  var packedBuffer = packBuffer(\n    indexDatatype,\n    boundingVolumes,\n    batchedDrawCalls\n  );\n\n  transferableObjects.push(\n    batchedPositions.buffer,\n    batchedIndices.buffer,\n    batchedIndexOffsets.buffer,\n    batchedIndexCounts.buffer,\n    batchedIds.buffer,\n    packedBuffer.buffer\n  );\n\n  return {\n    positions: batchedPositions.buffer,\n    indices: batchedIndices.buffer,\n    indexOffsets: batchedIndexOffsets.buffer,\n    indexCounts: batchedIndexCounts.buffer,\n    batchIds: batchedIds.buffer,\n    packedBuffer: packedBuffer.buffer,\n  };\n}\nexport default createTaskProcessorWorker(createVectorTilePolygons);\n"],"names":["scratchCenter","Cartesian3","scratchEllipsoid","Ellipsoid","scratchRectangle","Rectangle","scratchScalars","min","undefined","max","indexBytesPerElement","packBuffer","indexDatatype","boundingVolumes","batchedIndices","numBVs","length","OrientedBoundingBox","packedLength","count","i","Color","batchIds","packedBatchedIndicesLength","packedBuffer","Float64Array","offset","pack","indicesLength","j","batchedIndex","color","batchIdsLength","k","scratchEncodedPosition","scratchNormal","scratchScaledNormal","scratchMinHeightPosition","scratchMaxHeightPosition","scratchBVCartographic","Cartographic","scratchBVRectangle","createTaskProcessorWorker","parameters","transferableObjects","indices","buffer","unpack","unpackBuffer","Uint16Array","Uint32Array","rgba","positions","counts","indexCounts","batchTableColors","Array","center","ellipsoid","rectangle","minHeight","maxHeight","minimumHeights","maximumHeights","defined","Float32Array","positionsLength","uBuffer","subarray","vBuffer","AttributeCompression","zigZagDeltaDecode","decodedPositions","u","v","x","CesiumMath","lerp","west","east","y","south","north","cart","fromRadians","decodedPosition","cartographicToCartesian","countsLength","offsets","indexOffsets","currentOffset","currentIndexOffset","batchedPositions","batchedIds","batchedIndexOffsets","batchedIndexCounts","colorToBuffers","positionLength","indexLength","push","indexOffset","byColorPositionOffset","byColorIndexOffset","hasOwnProperty","batchedDrawCalls","fromRgba","parseInt","positionOffset","positionIndex","batchIdIndex","polygonOffset","polygonCount","batchId","polygonMinimumHeight","polygonMaximumHeight","minLat","Number","POSITIVE_INFINITY","maxLat","NEGATIVE_INFINITY","minLon","maxLon","position","scaleToGeodeticSurface","carto","cartesianToCartographic","lat","latitude","lon","longitude","Math","normal","geodeticSurfaceNormal","scaledNormal","multiplyByScalar","minHeightPosition","add","maxHeightPosition","subtract","fromRectangle","indicesIndex","indexCount","i0","i1","i2","v0","v1","IndexDatatype","createTypedArray","batchedIndicesLength","m","tempIds","tempIdsLength","n","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT"],"mappings":"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"}