{"version":3,"file":"AxisAlignedBoundingBox-4171efdd.js","sources":["../../../../Source/Core/AxisAlignedBoundingBox.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Intersect from \"./Intersect.js\";\n\n/**\n * Creates an instance of an AxisAlignedBoundingBox from the minimum and maximum points along the x, y, and z axes.\n * @alias AxisAlignedBoundingBox\n * @constructor\n *\n * @param {Cartesian3} [minimum=Cartesian3.ZERO] The minimum point along the x, y, and z axes.\n * @param {Cartesian3} [maximum=Cartesian3.ZERO] The maximum point along the x, y, and z axes.\n * @param {Cartesian3} [center] The center of the box; automatically computed if not supplied.\n *\n * @see BoundingSphere\n * @see BoundingRectangle\n */\nfunction AxisAlignedBoundingBox(minimum, maximum, center) {\n  /**\n   * The minimum point defining the bounding box.\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.minimum = Cartesian3.clone(defaultValue(minimum, Cartesian3.ZERO));\n\n  /**\n   * The maximum point defining the bounding box.\n   * @type {Cartesian3}\n   * @default {@link Cartesian3.ZERO}\n   */\n  this.maximum = Cartesian3.clone(defaultValue(maximum, Cartesian3.ZERO));\n\n  //If center was not defined, compute it.\n  if (!defined(center)) {\n    center = Cartesian3.midpoint(this.minimum, this.maximum, new Cartesian3());\n  } else {\n    center = Cartesian3.clone(center);\n  }\n\n  /**\n   * The center point of the bounding box.\n   * @type {Cartesian3}\n   */\n  this.center = center;\n}\n\n/**\n * Computes an instance of an AxisAlignedBoundingBox. The box is determined by\n * finding the points spaced the farthest apart on the x, y, and z axes.\n *\n * @param {Cartesian3[]} positions List of points that the bounding box will enclose.  Each point must have a <code>x</code>, <code>y</code>, and <code>z</code> properties.\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\n *\n * @example\n * // Compute an axis aligned bounding box enclosing two points.\n * var box = Cesium.AxisAlignedBoundingBox.fromPoints([new Cesium.Cartesian3(2, 0, 0), new Cesium.Cartesian3(-2, 0, 0)]);\n */\nAxisAlignedBoundingBox.fromPoints = function (positions, result) {\n  if (!defined(result)) {\n    result = new AxisAlignedBoundingBox();\n  }\n\n  if (!defined(positions) || positions.length === 0) {\n    result.minimum = Cartesian3.clone(Cartesian3.ZERO, result.minimum);\n    result.maximum = Cartesian3.clone(Cartesian3.ZERO, result.maximum);\n    result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\n    return result;\n  }\n\n  var minimumX = positions[0].x;\n  var minimumY = positions[0].y;\n  var minimumZ = positions[0].z;\n\n  var maximumX = positions[0].x;\n  var maximumY = positions[0].y;\n  var maximumZ = positions[0].z;\n\n  var length = positions.length;\n  for (var i = 1; i < length; i++) {\n    var p = positions[i];\n    var x = p.x;\n    var y = p.y;\n    var z = p.z;\n\n    minimumX = Math.min(x, minimumX);\n    maximumX = Math.max(x, maximumX);\n    minimumY = Math.min(y, minimumY);\n    maximumY = Math.max(y, maximumY);\n    minimumZ = Math.min(z, minimumZ);\n    maximumZ = Math.max(z, maximumZ);\n  }\n\n  var minimum = result.minimum;\n  minimum.x = minimumX;\n  minimum.y = minimumY;\n  minimum.z = minimumZ;\n\n  var maximum = result.maximum;\n  maximum.x = maximumX;\n  maximum.y = maximumY;\n  maximum.z = maximumZ;\n\n  result.center = Cartesian3.midpoint(minimum, maximum, result.center);\n\n  return result;\n};\n\n/**\n * Duplicates a AxisAlignedBoundingBox instance.\n *\n * @param {AxisAlignedBoundingBox} box The bounding box to duplicate.\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if none was provided. (Returns undefined if box is undefined)\n */\nAxisAlignedBoundingBox.clone = function (box, result) {\n  if (!defined(box)) {\n    return undefined;\n  }\n\n  if (!defined(result)) {\n    return new AxisAlignedBoundingBox(box.minimum, box.maximum, box.center);\n  }\n\n  result.minimum = Cartesian3.clone(box.minimum, result.minimum);\n  result.maximum = Cartesian3.clone(box.maximum, result.maximum);\n  result.center = Cartesian3.clone(box.center, result.center);\n  return result;\n};\n\n/**\n * Compares the provided AxisAlignedBoundingBox componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {AxisAlignedBoundingBox} [left] The first AxisAlignedBoundingBox.\n * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox.\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nAxisAlignedBoundingBox.equals = function (left, right) {\n  return (\n    left === right ||\n    (defined(left) &&\n      defined(right) &&\n      Cartesian3.equals(left.center, right.center) &&\n      Cartesian3.equals(left.minimum, right.minimum) &&\n      Cartesian3.equals(left.maximum, right.maximum))\n  );\n};\n\nvar intersectScratch = new Cartesian3();\n/**\n * Determines which side of a plane a box is located.\n *\n * @param {AxisAlignedBoundingBox} box The bounding box to test.\n * @param {Plane} plane The plane to test against.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n *                      intersects the plane.\n */\nAxisAlignedBoundingBox.intersectPlane = function (box, plane) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"box\", box);\n  Check.defined(\"plane\", plane);\n  //>>includeEnd('debug');\n\n  intersectScratch = Cartesian3.subtract(\n    box.maximum,\n    box.minimum,\n    intersectScratch\n  );\n  var h = Cartesian3.multiplyByScalar(intersectScratch, 0.5, intersectScratch); //The positive half diagonal\n  var normal = plane.normal;\n  var e =\n    h.x * Math.abs(normal.x) +\n    h.y * Math.abs(normal.y) +\n    h.z * Math.abs(normal.z);\n  var s = Cartesian3.dot(box.center, normal) + plane.distance; //signed distance from center\n\n  if (s - e > 0) {\n    return Intersect.INSIDE;\n  }\n\n  if (s + e < 0) {\n    //Not in front because normals point inward\n    return Intersect.OUTSIDE;\n  }\n\n  return Intersect.INTERSECTING;\n};\n\n/**\n * Duplicates this AxisAlignedBoundingBox instance.\n *\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\n */\nAxisAlignedBoundingBox.prototype.clone = function (result) {\n  return AxisAlignedBoundingBox.clone(this, result);\n};\n\n/**\n * Determines which side of a plane this box is located.\n *\n * @param {Plane} plane The plane to test against.\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\n *                      intersects the plane.\n */\nAxisAlignedBoundingBox.prototype.intersectPlane = function (plane) {\n  return AxisAlignedBoundingBox.intersectPlane(this, plane);\n};\n\n/**\n * Compares this AxisAlignedBoundingBox against the provided AxisAlignedBoundingBox componentwise and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {AxisAlignedBoundingBox} [right] The right hand side AxisAlignedBoundingBox.\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n */\nAxisAlignedBoundingBox.prototype.equals = function (right) {\n  return AxisAlignedBoundingBox.equals(this, right);\n};\nexport default AxisAlignedBoundingBox;\n"],"names":["AxisAlignedBoundingBox","minimum","maximum","center","this","Cartesian3","clone","defaultValue","ZERO","defined","midpoint","fromPoints","positions","result","length","minimumX","x","minimumY","y","minimumZ","z","maximumX","maximumY","maximumZ","i","p","Math","min","max","box","equals","left","right","intersectScratch","intersectPlane","plane","Check","subtract","h","multiplyByScalar","normal","e","abs","s","dot","distance","Intersect","INSIDE","OUTSIDE","INTERSECTING","prototype"],"mappings":"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"}