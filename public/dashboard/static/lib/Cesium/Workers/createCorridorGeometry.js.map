{"version":3,"file":"createCorridorGeometry.js","sources":["../../../../Source/Core/CorridorGeometry.js","../../../../Source/WorkersES6/createCorridorGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport CorridorGeometryLibrary from \"./CorridorGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nvar cartesian1 = new Cartesian3();\nvar cartesian2 = new Cartesian3();\nvar cartesian3 = new Cartesian3();\nvar cartesian4 = new Cartesian3();\nvar cartesian5 = new Cartesian3();\nvar cartesian6 = new Cartesian3();\n\nvar scratch1 = new Cartesian3();\nvar scratch2 = new Cartesian3();\n\nfunction scaleToSurface(positions, ellipsoid) {\n  for (var i = 0; i < positions.length; i++) {\n    positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\n  }\n  return positions;\n}\n\nfunction addNormals(attr, normal, left, front, back, vertexFormat) {\n  var normals = attr.normals;\n  var tangents = attr.tangents;\n  var bitangents = attr.bitangents;\n  var forward = Cartesian3.normalize(\n    Cartesian3.cross(left, normal, scratch1),\n    scratch1\n  );\n  if (vertexFormat.normal) {\n    CorridorGeometryLibrary.addAttribute(normals, normal, front, back);\n  }\n  if (vertexFormat.tangent) {\n    CorridorGeometryLibrary.addAttribute(tangents, forward, front, back);\n  }\n  if (vertexFormat.bitangent) {\n    CorridorGeometryLibrary.addAttribute(bitangents, left, front, back);\n  }\n}\n\nfunction combine(computedPositions, vertexFormat, ellipsoid) {\n  var positions = computedPositions.positions;\n  var corners = computedPositions.corners;\n  var endPositions = computedPositions.endPositions;\n  var computedLefts = computedPositions.lefts;\n  var computedNormals = computedPositions.normals;\n  var attributes = new GeometryAttributes();\n  var corner;\n  var leftCount = 0;\n  var rightCount = 0;\n  var i;\n  var indicesLength = 0;\n  var length;\n  for (i = 0; i < positions.length; i += 2) {\n    length = positions[i].length - 3;\n    leftCount += length; //subtracting 3 to account for duplicate points at corners\n    indicesLength += length * 2;\n    rightCount += positions[i + 1].length - 3;\n  }\n  leftCount += 3; //add back count for end positions\n  rightCount += 3;\n  for (i = 0; i < corners.length; i++) {\n    corner = corners[i];\n    var leftSide = corners[i].leftPositions;\n    if (defined(leftSide)) {\n      length = leftSide.length;\n      leftCount += length;\n      indicesLength += length;\n    } else {\n      length = corners[i].rightPositions.length;\n      rightCount += length;\n      indicesLength += length;\n    }\n  }\n\n  var addEndPositions = defined(endPositions);\n  var endPositionLength;\n  if (addEndPositions) {\n    endPositionLength = endPositions[0].length - 3;\n    leftCount += endPositionLength;\n    rightCount += endPositionLength;\n    endPositionLength /= 3;\n    indicesLength += endPositionLength * 6;\n  }\n  var size = leftCount + rightCount;\n  var finalPositions = new Float64Array(size);\n  var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n  var attr = {\n    normals: normals,\n    tangents: tangents,\n    bitangents: bitangents,\n  };\n  var front = 0;\n  var back = size - 1;\n  var UL, LL, UR, LR;\n  var normal = cartesian1;\n  var left = cartesian2;\n  var rightPos, leftPos;\n  var halfLength = endPositionLength / 2;\n\n  var indices = IndexDatatype.createTypedArray(size / 3, indicesLength);\n  var index = 0;\n  if (addEndPositions) {\n    // add rounded end\n    leftPos = cartesian3;\n    rightPos = cartesian4;\n    var firstEndPositions = endPositions[0];\n    normal = Cartesian3.fromArray(computedNormals, 0, normal);\n    left = Cartesian3.fromArray(computedLefts, 0, left);\n    for (i = 0; i < halfLength; i++) {\n      leftPos = Cartesian3.fromArray(\n        firstEndPositions,\n        (halfLength - 1 - i) * 3,\n        leftPos\n      );\n      rightPos = Cartesian3.fromArray(\n        firstEndPositions,\n        (halfLength + i) * 3,\n        rightPos\n      );\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n      CorridorGeometryLibrary.addAttribute(\n        finalPositions,\n        leftPos,\n        undefined,\n        back\n      );\n      addNormals(attr, normal, left, front, back, vertexFormat);\n\n      LL = front / 3;\n      LR = LL + 1;\n      UL = (back - 2) / 3;\n      UR = UL - 1;\n      indices[index++] = UL;\n      indices[index++] = LL;\n      indices[index++] = UR;\n      indices[index++] = UR;\n      indices[index++] = LL;\n      indices[index++] = LR;\n\n      front += 3;\n      back -= 3;\n    }\n  }\n\n  var posIndex = 0;\n  var compIndex = 0;\n  var rightEdge = positions[posIndex++]; //add first two edges\n  var leftEdge = positions[posIndex++];\n  finalPositions.set(rightEdge, front);\n  finalPositions.set(leftEdge, back - leftEdge.length + 1);\n\n  left = Cartesian3.fromArray(computedLefts, compIndex, left);\n  var rightNormal;\n  var leftNormal;\n  length = leftEdge.length - 3;\n  for (i = 0; i < length; i += 3) {\n    rightNormal = ellipsoid.geodeticSurfaceNormal(\n      Cartesian3.fromArray(rightEdge, i, scratch1),\n      scratch1\n    );\n    leftNormal = ellipsoid.geodeticSurfaceNormal(\n      Cartesian3.fromArray(leftEdge, length - i, scratch2),\n      scratch2\n    );\n    normal = Cartesian3.normalize(\n      Cartesian3.add(rightNormal, leftNormal, normal),\n      normal\n    );\n    addNormals(attr, normal, left, front, back, vertexFormat);\n\n    LL = front / 3;\n    LR = LL + 1;\n    UL = (back - 2) / 3;\n    UR = UL - 1;\n    indices[index++] = UL;\n    indices[index++] = LL;\n    indices[index++] = UR;\n    indices[index++] = UR;\n    indices[index++] = LL;\n    indices[index++] = LR;\n\n    front += 3;\n    back -= 3;\n  }\n\n  rightNormal = ellipsoid.geodeticSurfaceNormal(\n    Cartesian3.fromArray(rightEdge, length, scratch1),\n    scratch1\n  );\n  leftNormal = ellipsoid.geodeticSurfaceNormal(\n    Cartesian3.fromArray(leftEdge, length, scratch2),\n    scratch2\n  );\n  normal = Cartesian3.normalize(\n    Cartesian3.add(rightNormal, leftNormal, normal),\n    normal\n  );\n  compIndex += 3;\n  for (i = 0; i < corners.length; i++) {\n    var j;\n    corner = corners[i];\n    var l = corner.leftPositions;\n    var r = corner.rightPositions;\n    var pivot;\n    var start;\n    var outsidePoint = cartesian6;\n    var previousPoint = cartesian3;\n    var nextPoint = cartesian4;\n    normal = Cartesian3.fromArray(computedNormals, compIndex, normal);\n    if (defined(l)) {\n      addNormals(attr, normal, left, undefined, back, vertexFormat);\n      back -= 3;\n      pivot = LR;\n      start = UR;\n      for (j = 0; j < l.length / 3; j++) {\n        outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\n        indices[index++] = pivot;\n        indices[index++] = start - j - 1;\n        indices[index++] = start - j;\n        CorridorGeometryLibrary.addAttribute(\n          finalPositions,\n          outsidePoint,\n          undefined,\n          back\n        );\n        previousPoint = Cartesian3.fromArray(\n          finalPositions,\n          (start - j - 1) * 3,\n          previousPoint\n        );\n        nextPoint = Cartesian3.fromArray(finalPositions, pivot * 3, nextPoint);\n        left = Cartesian3.normalize(\n          Cartesian3.subtract(previousPoint, nextPoint, left),\n          left\n        );\n        addNormals(attr, normal, left, undefined, back, vertexFormat);\n        back -= 3;\n      }\n      outsidePoint = Cartesian3.fromArray(\n        finalPositions,\n        pivot * 3,\n        outsidePoint\n      );\n      previousPoint = Cartesian3.subtract(\n        Cartesian3.fromArray(finalPositions, start * 3, previousPoint),\n        outsidePoint,\n        previousPoint\n      );\n      nextPoint = Cartesian3.subtract(\n        Cartesian3.fromArray(finalPositions, (start - j) * 3, nextPoint),\n        outsidePoint,\n        nextPoint\n      );\n      left = Cartesian3.normalize(\n        Cartesian3.add(previousPoint, nextPoint, left),\n        left\n      );\n      addNormals(attr, normal, left, front, undefined, vertexFormat);\n      front += 3;\n    } else {\n      addNormals(attr, normal, left, front, undefined, vertexFormat);\n      front += 3;\n      pivot = UR;\n      start = LR;\n      for (j = 0; j < r.length / 3; j++) {\n        outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\n        indices[index++] = pivot;\n        indices[index++] = start + j;\n        indices[index++] = start + j + 1;\n        CorridorGeometryLibrary.addAttribute(\n          finalPositions,\n          outsidePoint,\n          front\n        );\n        previousPoint = Cartesian3.fromArray(\n          finalPositions,\n          pivot * 3,\n          previousPoint\n        );\n        nextPoint = Cartesian3.fromArray(\n          finalPositions,\n          (start + j) * 3,\n          nextPoint\n        );\n        left = Cartesian3.normalize(\n          Cartesian3.subtract(previousPoint, nextPoint, left),\n          left\n        );\n        addNormals(attr, normal, left, front, undefined, vertexFormat);\n        front += 3;\n      }\n      outsidePoint = Cartesian3.fromArray(\n        finalPositions,\n        pivot * 3,\n        outsidePoint\n      );\n      previousPoint = Cartesian3.subtract(\n        Cartesian3.fromArray(finalPositions, (start + j) * 3, previousPoint),\n        outsidePoint,\n        previousPoint\n      );\n      nextPoint = Cartesian3.subtract(\n        Cartesian3.fromArray(finalPositions, start * 3, nextPoint),\n        outsidePoint,\n        nextPoint\n      );\n      left = Cartesian3.normalize(\n        Cartesian3.negate(Cartesian3.add(nextPoint, previousPoint, left), left),\n        left\n      );\n      addNormals(attr, normal, left, undefined, back, vertexFormat);\n      back -= 3;\n    }\n    rightEdge = positions[posIndex++];\n    leftEdge = positions[posIndex++];\n    rightEdge.splice(0, 3); //remove duplicate points added by corner\n    leftEdge.splice(leftEdge.length - 3, 3);\n    finalPositions.set(rightEdge, front);\n    finalPositions.set(leftEdge, back - leftEdge.length + 1);\n    length = leftEdge.length - 3;\n\n    compIndex += 3;\n    left = Cartesian3.fromArray(computedLefts, compIndex, left);\n    for (j = 0; j < leftEdge.length; j += 3) {\n      rightNormal = ellipsoid.geodeticSurfaceNormal(\n        Cartesian3.fromArray(rightEdge, j, scratch1),\n        scratch1\n      );\n      leftNormal = ellipsoid.geodeticSurfaceNormal(\n        Cartesian3.fromArray(leftEdge, length - j, scratch2),\n        scratch2\n      );\n      normal = Cartesian3.normalize(\n        Cartesian3.add(rightNormal, leftNormal, normal),\n        normal\n      );\n      addNormals(attr, normal, left, front, back, vertexFormat);\n\n      LR = front / 3;\n      LL = LR - 1;\n      UR = (back - 2) / 3;\n      UL = UR + 1;\n      indices[index++] = UL;\n      indices[index++] = LL;\n      indices[index++] = UR;\n      indices[index++] = UR;\n      indices[index++] = LL;\n      indices[index++] = LR;\n\n      front += 3;\n      back -= 3;\n    }\n    front -= 3;\n    back += 3;\n  }\n  normal = Cartesian3.fromArray(\n    computedNormals,\n    computedNormals.length - 3,\n    normal\n  );\n  addNormals(attr, normal, left, front, back, vertexFormat);\n\n  if (addEndPositions) {\n    // add rounded end\n    front += 3;\n    back -= 3;\n    leftPos = cartesian3;\n    rightPos = cartesian4;\n    var lastEndPositions = endPositions[1];\n    for (i = 0; i < halfLength; i++) {\n      leftPos = Cartesian3.fromArray(\n        lastEndPositions,\n        (endPositionLength - i - 1) * 3,\n        leftPos\n      );\n      rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\n      CorridorGeometryLibrary.addAttribute(\n        finalPositions,\n        leftPos,\n        undefined,\n        back\n      );\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n      addNormals(attr, normal, left, front, back, vertexFormat);\n\n      LR = front / 3;\n      LL = LR - 1;\n      UR = (back - 2) / 3;\n      UL = UR + 1;\n      indices[index++] = UL;\n      indices[index++] = LL;\n      indices[index++] = UR;\n      indices[index++] = UR;\n      indices[index++] = LL;\n      indices[index++] = LR;\n\n      front += 3;\n      back -= 3;\n    }\n  }\n\n  attributes.position = new GeometryAttribute({\n    componentDatatype: ComponentDatatype.DOUBLE,\n    componentsPerAttribute: 3,\n    values: finalPositions,\n  });\n\n  if (vertexFormat.st) {\n    var st = new Float32Array((size / 3) * 2);\n    var rightSt;\n    var leftSt;\n    var stIndex = 0;\n    if (addEndPositions) {\n      leftCount /= 3;\n      rightCount /= 3;\n      var theta = Math.PI / (endPositionLength + 1);\n      leftSt = 1 / (leftCount - endPositionLength + 1);\n      rightSt = 1 / (rightCount - endPositionLength + 1);\n      var a;\n      var halfEndPos = endPositionLength / 2;\n      for (i = halfEndPos + 1; i < endPositionLength + 1; i++) {\n        // lower left rounded end\n        a = CesiumMath.PI_OVER_TWO + theta * i;\n        st[stIndex++] = rightSt * (1 + Math.cos(a));\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\n      }\n      for (i = 1; i < rightCount - endPositionLength + 1; i++) {\n        // bottom edge\n        st[stIndex++] = i * rightSt;\n        st[stIndex++] = 0;\n      }\n      for (i = endPositionLength; i > halfEndPos; i--) {\n        // lower right rounded end\n        a = CesiumMath.PI_OVER_TWO - i * theta;\n        st[stIndex++] = 1 - rightSt * (1 + Math.cos(a));\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\n      }\n      for (i = halfEndPos; i > 0; i--) {\n        // upper right rounded end\n        a = CesiumMath.PI_OVER_TWO - theta * i;\n        st[stIndex++] = 1 - leftSt * (1 + Math.cos(a));\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\n      }\n      for (i = leftCount - endPositionLength; i > 0; i--) {\n        // top edge\n        st[stIndex++] = i * leftSt;\n        st[stIndex++] = 1;\n      }\n      for (i = 1; i < halfEndPos + 1; i++) {\n        // upper left rounded end\n        a = CesiumMath.PI_OVER_TWO + theta * i;\n        st[stIndex++] = leftSt * (1 + Math.cos(a));\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\n      }\n    } else {\n      leftCount /= 3;\n      rightCount /= 3;\n      leftSt = 1 / (leftCount - 1);\n      rightSt = 1 / (rightCount - 1);\n      for (i = 0; i < rightCount; i++) {\n        // bottom edge\n        st[stIndex++] = i * rightSt;\n        st[stIndex++] = 0;\n      }\n      for (i = leftCount; i > 0; i--) {\n        // top edge\n        st[stIndex++] = (i - 1) * leftSt;\n        st[stIndex++] = 1;\n      }\n    }\n\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: st,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: attr.normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: attr.tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: attr.bitangents,\n    });\n  }\n\n  return {\n    attributes: attributes,\n    indices: indices,\n  };\n}\n\nfunction extrudedAttributes(attributes, vertexFormat) {\n  if (\n    !vertexFormat.normal &&\n    !vertexFormat.tangent &&\n    !vertexFormat.bitangent &&\n    !vertexFormat.st\n  ) {\n    return attributes;\n  }\n  var positions = attributes.position.values;\n  var topNormals;\n  var topBitangents;\n  if (vertexFormat.normal || vertexFormat.bitangent) {\n    topNormals = attributes.normal.values;\n    topBitangents = attributes.bitangent.values;\n  }\n  var size = attributes.position.values.length / 18;\n  var threeSize = size * 3;\n  var twoSize = size * 2;\n  var sixSize = threeSize * 2;\n  var i;\n  if (vertexFormat.normal || vertexFormat.bitangent || vertexFormat.tangent) {\n    var normals = vertexFormat.normal\n      ? new Float32Array(threeSize * 6)\n      : undefined;\n    var tangents = vertexFormat.tangent\n      ? new Float32Array(threeSize * 6)\n      : undefined;\n    var bitangents = vertexFormat.bitangent\n      ? new Float32Array(threeSize * 6)\n      : undefined;\n    var topPosition = cartesian1;\n    var bottomPosition = cartesian2;\n    var previousPosition = cartesian3;\n    var normal = cartesian4;\n    var tangent = cartesian5;\n    var bitangent = cartesian6;\n    var attrIndex = sixSize;\n    for (i = 0; i < threeSize; i += 3) {\n      var attrIndexOffset = attrIndex + sixSize;\n      topPosition = Cartesian3.fromArray(positions, i, topPosition);\n      bottomPosition = Cartesian3.fromArray(\n        positions,\n        i + threeSize,\n        bottomPosition\n      );\n      previousPosition = Cartesian3.fromArray(\n        positions,\n        (i + 3) % threeSize,\n        previousPosition\n      );\n      bottomPosition = Cartesian3.subtract(\n        bottomPosition,\n        topPosition,\n        bottomPosition\n      );\n      previousPosition = Cartesian3.subtract(\n        previousPosition,\n        topPosition,\n        previousPosition\n      );\n      normal = Cartesian3.normalize(\n        Cartesian3.cross(bottomPosition, previousPosition, normal),\n        normal\n      );\n      if (vertexFormat.normal) {\n        CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset);\n        CorridorGeometryLibrary.addAttribute(\n          normals,\n          normal,\n          attrIndexOffset + 3\n        );\n        CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex);\n        CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex + 3);\n      }\n      if (vertexFormat.tangent || vertexFormat.bitangent) {\n        bitangent = Cartesian3.fromArray(topNormals, i, bitangent);\n        if (vertexFormat.bitangent) {\n          CorridorGeometryLibrary.addAttribute(\n            bitangents,\n            bitangent,\n            attrIndexOffset\n          );\n          CorridorGeometryLibrary.addAttribute(\n            bitangents,\n            bitangent,\n            attrIndexOffset + 3\n          );\n          CorridorGeometryLibrary.addAttribute(\n            bitangents,\n            bitangent,\n            attrIndex\n          );\n          CorridorGeometryLibrary.addAttribute(\n            bitangents,\n            bitangent,\n            attrIndex + 3\n          );\n        }\n\n        if (vertexFormat.tangent) {\n          tangent = Cartesian3.normalize(\n            Cartesian3.cross(bitangent, normal, tangent),\n            tangent\n          );\n          CorridorGeometryLibrary.addAttribute(\n            tangents,\n            tangent,\n            attrIndexOffset\n          );\n          CorridorGeometryLibrary.addAttribute(\n            tangents,\n            tangent,\n            attrIndexOffset + 3\n          );\n          CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex);\n          CorridorGeometryLibrary.addAttribute(\n            tangents,\n            tangent,\n            attrIndex + 3\n          );\n        }\n      }\n      attrIndex += 6;\n    }\n\n    if (vertexFormat.normal) {\n      normals.set(topNormals); //top\n      for (i = 0; i < threeSize; i += 3) {\n        //bottom normals\n        normals[i + threeSize] = -topNormals[i];\n        normals[i + threeSize + 1] = -topNormals[i + 1];\n        normals[i + threeSize + 2] = -topNormals[i + 2];\n      }\n      attributes.normal.values = normals;\n    } else {\n      attributes.normal = undefined;\n    }\n\n    if (vertexFormat.bitangent) {\n      bitangents.set(topBitangents); //top\n      bitangents.set(topBitangents, threeSize); //bottom\n      attributes.bitangent.values = bitangents;\n    } else {\n      attributes.bitangent = undefined;\n    }\n\n    if (vertexFormat.tangent) {\n      var topTangents = attributes.tangent.values;\n      tangents.set(topTangents); //top\n      tangents.set(topTangents, threeSize); //bottom\n      attributes.tangent.values = tangents;\n    }\n  }\n  if (vertexFormat.st) {\n    var topSt = attributes.st.values;\n    var st = new Float32Array(twoSize * 6);\n    st.set(topSt); //top\n    st.set(topSt, twoSize); //bottom\n    var index = twoSize * 2;\n\n    for (var j = 0; j < 2; j++) {\n      st[index++] = topSt[0];\n      st[index++] = topSt[1];\n      for (i = 2; i < twoSize; i += 2) {\n        var s = topSt[i];\n        var t = topSt[i + 1];\n        st[index++] = s;\n        st[index++] = t;\n        st[index++] = s;\n        st[index++] = t;\n      }\n      st[index++] = topSt[0];\n      st[index++] = topSt[1];\n    }\n    attributes.st.values = st;\n  }\n\n  return attributes;\n}\n\nfunction addWallPositions(positions, index, wallPositions) {\n  wallPositions[index++] = positions[0];\n  wallPositions[index++] = positions[1];\n  wallPositions[index++] = positions[2];\n  for (var i = 3; i < positions.length; i += 3) {\n    var x = positions[i];\n    var y = positions[i + 1];\n    var z = positions[i + 2];\n    wallPositions[index++] = x;\n    wallPositions[index++] = y;\n    wallPositions[index++] = z;\n    wallPositions[index++] = x;\n    wallPositions[index++] = y;\n    wallPositions[index++] = z;\n  }\n  wallPositions[index++] = positions[0];\n  wallPositions[index++] = positions[1];\n  wallPositions[index++] = positions[2];\n\n  return wallPositions;\n}\n\nfunction computePositionsExtruded(params, vertexFormat) {\n  var topVertexFormat = new VertexFormat({\n    position: vertexFormat.position,\n    normal:\n      vertexFormat.normal || vertexFormat.bitangent || params.shadowVolume,\n    tangent: vertexFormat.tangent,\n    bitangent: vertexFormat.normal || vertexFormat.bitangent,\n    st: vertexFormat.st,\n  });\n  var ellipsoid = params.ellipsoid;\n  var computedPositions = CorridorGeometryLibrary.computePositions(params);\n  var attr = combine(computedPositions, topVertexFormat, ellipsoid);\n  var height = params.height;\n  var extrudedHeight = params.extrudedHeight;\n  var attributes = attr.attributes;\n  var indices = attr.indices;\n  var positions = attributes.position.values;\n  var length = positions.length;\n  var newPositions = new Float64Array(length * 6);\n  var extrudedPositions = new Float64Array(length);\n  extrudedPositions.set(positions);\n  var wallPositions = new Float64Array(length * 4);\n\n  positions = PolygonPipeline.scaleToGeodeticHeight(\n    positions,\n    height,\n    ellipsoid\n  );\n  wallPositions = addWallPositions(positions, 0, wallPositions);\n  extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(\n    extrudedPositions,\n    extrudedHeight,\n    ellipsoid\n  );\n  wallPositions = addWallPositions(\n    extrudedPositions,\n    length * 2,\n    wallPositions\n  );\n  newPositions.set(positions);\n  newPositions.set(extrudedPositions, length);\n  newPositions.set(wallPositions, length * 2);\n  attributes.position.values = newPositions;\n\n  attributes = extrudedAttributes(attributes, vertexFormat);\n  var i;\n  var size = length / 3;\n  if (params.shadowVolume) {\n    var topNormals = attributes.normal.values;\n    length = topNormals.length;\n\n    var extrudeNormals = new Float32Array(length * 6);\n    for (i = 0; i < length; i++) {\n      topNormals[i] = -topNormals[i];\n    }\n    //only get normals for bottom layer that's going to be pushed down\n    extrudeNormals.set(topNormals, length); //bottom face\n    extrudeNormals = addWallPositions(topNormals, length * 4, extrudeNormals); //bottom wall\n    attributes.extrudeDirection = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: extrudeNormals,\n    });\n    if (!vertexFormat.normal) {\n      attributes.normal = undefined;\n    }\n  }\n  if (defined(params.offsetAttribute)) {\n    var applyOffset = new Uint8Array(size * 6);\n    if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\n      applyOffset = arrayFill(applyOffset, 1, 0, size); // top face\n      applyOffset = arrayFill(applyOffset, 1, size * 2, size * 4); // top wall\n    } else {\n      var applyOffsetValue =\n        params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n      applyOffset = arrayFill(applyOffset, applyOffsetValue);\n    }\n    attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: applyOffset,\n    });\n  }\n\n  var iLength = indices.length;\n  var twoSize = size + size;\n  var newIndices = IndexDatatype.createTypedArray(\n    newPositions.length / 3,\n    iLength * 2 + twoSize * 3\n  );\n  newIndices.set(indices);\n  var index = iLength;\n  for (i = 0; i < iLength; i += 3) {\n    // bottom indices\n    var v0 = indices[i];\n    var v1 = indices[i + 1];\n    var v2 = indices[i + 2];\n    newIndices[index++] = v2 + size;\n    newIndices[index++] = v1 + size;\n    newIndices[index++] = v0 + size;\n  }\n\n  var UL, LL, UR, LR;\n\n  for (i = 0; i < twoSize; i += 2) {\n    //wall indices\n    UL = i + twoSize;\n    LL = UL + twoSize;\n    UR = UL + 1;\n    LR = LL + 1;\n    newIndices[index++] = UL;\n    newIndices[index++] = LL;\n    newIndices[index++] = UR;\n    newIndices[index++] = UR;\n    newIndices[index++] = LL;\n    newIndices[index++] = LR;\n  }\n\n  return {\n    attributes: attributes,\n    indices: newIndices,\n  };\n}\n\nvar scratchCartesian1 = new Cartesian3();\nvar scratchCartesian2 = new Cartesian3();\nvar scratchCartographic = new Cartographic();\n\nfunction computeOffsetPoints(\n  position1,\n  position2,\n  ellipsoid,\n  halfWidth,\n  min,\n  max\n) {\n  // Compute direction of offset the point\n  var direction = Cartesian3.subtract(position2, position1, scratchCartesian1);\n  Cartesian3.normalize(direction, direction);\n  var normal = ellipsoid.geodeticSurfaceNormal(position1, scratchCartesian2);\n  var offsetDirection = Cartesian3.cross(direction, normal, scratchCartesian1);\n  Cartesian3.multiplyByScalar(offsetDirection, halfWidth, offsetDirection);\n\n  var minLat = min.latitude;\n  var minLon = min.longitude;\n  var maxLat = max.latitude;\n  var maxLon = max.longitude;\n\n  // Compute 2 offset points\n  Cartesian3.add(position1, offsetDirection, scratchCartesian2);\n  ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\n\n  var lat = scratchCartographic.latitude;\n  var lon = scratchCartographic.longitude;\n  minLat = Math.min(minLat, lat);\n  minLon = Math.min(minLon, lon);\n  maxLat = Math.max(maxLat, lat);\n  maxLon = Math.max(maxLon, lon);\n\n  Cartesian3.subtract(position1, offsetDirection, scratchCartesian2);\n  ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\n\n  lat = scratchCartographic.latitude;\n  lon = scratchCartographic.longitude;\n  minLat = Math.min(minLat, lat);\n  minLon = Math.min(minLon, lon);\n  maxLat = Math.max(maxLat, lat);\n  maxLon = Math.max(maxLon, lon);\n\n  min.latitude = minLat;\n  min.longitude = minLon;\n  max.latitude = maxLat;\n  max.longitude = maxLon;\n}\n\nvar scratchCartesianOffset = new Cartesian3();\nvar scratchCartesianEnds = new Cartesian3();\nvar scratchCartographicMin = new Cartographic();\nvar scratchCartographicMax = new Cartographic();\n\nfunction computeRectangle(positions, ellipsoid, width, cornerType, result) {\n  positions = scaleToSurface(positions, ellipsoid);\n  var cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n  var length = cleanPositions.length;\n  if (length < 2 || width <= 0) {\n    return new Rectangle();\n  }\n  var halfWidth = width * 0.5;\n\n  scratchCartographicMin.latitude = Number.POSITIVE_INFINITY;\n  scratchCartographicMin.longitude = Number.POSITIVE_INFINITY;\n  scratchCartographicMax.latitude = Number.NEGATIVE_INFINITY;\n  scratchCartographicMax.longitude = Number.NEGATIVE_INFINITY;\n\n  var lat, lon;\n  if (cornerType === CornerType.ROUNDED) {\n    // Compute start cap\n    var first = cleanPositions[0];\n    Cartesian3.subtract(first, cleanPositions[1], scratchCartesianOffset);\n    Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\n    Cartesian3.multiplyByScalar(\n      scratchCartesianOffset,\n      halfWidth,\n      scratchCartesianOffset\n    );\n    Cartesian3.add(first, scratchCartesianOffset, scratchCartesianEnds);\n\n    ellipsoid.cartesianToCartographic(\n      scratchCartesianEnds,\n      scratchCartographic\n    );\n    lat = scratchCartographic.latitude;\n    lon = scratchCartographic.longitude;\n    scratchCartographicMin.latitude = Math.min(\n      scratchCartographicMin.latitude,\n      lat\n    );\n    scratchCartographicMin.longitude = Math.min(\n      scratchCartographicMin.longitude,\n      lon\n    );\n    scratchCartographicMax.latitude = Math.max(\n      scratchCartographicMax.latitude,\n      lat\n    );\n    scratchCartographicMax.longitude = Math.max(\n      scratchCartographicMax.longitude,\n      lon\n    );\n  }\n\n  // Compute the rest\n  for (var i = 0; i < length - 1; ++i) {\n    computeOffsetPoints(\n      cleanPositions[i],\n      cleanPositions[i + 1],\n      ellipsoid,\n      halfWidth,\n      scratchCartographicMin,\n      scratchCartographicMax\n    );\n  }\n\n  // Compute ending point\n  var last = cleanPositions[length - 1];\n  Cartesian3.subtract(last, cleanPositions[length - 2], scratchCartesianOffset);\n  Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\n  Cartesian3.multiplyByScalar(\n    scratchCartesianOffset,\n    halfWidth,\n    scratchCartesianOffset\n  );\n  Cartesian3.add(last, scratchCartesianOffset, scratchCartesianEnds);\n  computeOffsetPoints(\n    last,\n    scratchCartesianEnds,\n    ellipsoid,\n    halfWidth,\n    scratchCartographicMin,\n    scratchCartographicMax\n  );\n\n  if (cornerType === CornerType.ROUNDED) {\n    // Compute end cap\n    ellipsoid.cartesianToCartographic(\n      scratchCartesianEnds,\n      scratchCartographic\n    );\n    lat = scratchCartographic.latitude;\n    lon = scratchCartographic.longitude;\n    scratchCartographicMin.latitude = Math.min(\n      scratchCartographicMin.latitude,\n      lat\n    );\n    scratchCartographicMin.longitude = Math.min(\n      scratchCartographicMin.longitude,\n      lon\n    );\n    scratchCartographicMax.latitude = Math.max(\n      scratchCartographicMax.latitude,\n      lat\n    );\n    scratchCartographicMax.longitude = Math.max(\n      scratchCartographicMax.longitude,\n      lon\n    );\n  }\n\n  var rectangle = defined(result) ? result : new Rectangle();\n  rectangle.north = scratchCartographicMax.latitude;\n  rectangle.south = scratchCartographicMin.latitude;\n  rectangle.east = scratchCartographicMax.longitude;\n  rectangle.west = scratchCartographicMin.longitude;\n\n  return rectangle;\n}\n\n/**\n * A description of a corridor. Corridor geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias CorridorGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\n * @param {Number} options.width The distance between the edges of the corridor in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Number} [options.height=0] The distance in meters between the ellipsoid surface and the positions.\n * @param {Number} [options.extrudedHeight] The distance in meters between the ellipsoid surface and the extruded face.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see CorridorGeometry.createGeometry\n * @see Packable\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Corridor.html|Cesium Sandcastle Corridor Demo}\n *\n * @example\n * var corridor = new Cesium.CorridorGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\n *   width : 100000\n * });\n */\nfunction CorridorGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.positions;\n  var width = options.width;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", positions);\n  Check.defined(\"options.width\", width);\n  //>>includeEnd('debug');\n\n  var height = defaultValue(options.height, 0.0);\n  var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n  this._positions = positions;\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._vertexFormat = VertexFormat.clone(\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\n  );\n  this._width = width;\n  this._height = Math.max(height, extrudedHeight);\n  this._extrudedHeight = Math.min(height, extrudedHeight);\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._shadowVolume = defaultValue(options.shadowVolume, false);\n  this._workerName = \"createCorridorGeometry\";\n  this._offsetAttribute = options.offsetAttribute;\n  this._rectangle = undefined;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    1 +\n    positions.length * Cartesian3.packedLength +\n    Ellipsoid.packedLength +\n    VertexFormat.packedLength +\n    7;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CorridorGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCorridorGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._width;\n  array[startingIndex++] = value._height;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex++] = value._granularity;\n  array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  positions: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  width: undefined,\n  height: undefined,\n  extrudedHeight: undefined,\n  cornerType: undefined,\n  granularity: undefined,\n  shadowVolume: undefined,\n  offsetAttribute: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CorridorGeometry} [result] The object into which to store the result.\n * @returns {CorridorGeometry} The modified result parameter or a new CorridorGeometry instance if one was not provided.\n */\nCorridorGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  var width = array[startingIndex++];\n  var height = array[startingIndex++];\n  var extrudedHeight = array[startingIndex++];\n  var cornerType = array[startingIndex++];\n  var granularity = array[startingIndex++];\n  var shadowVolume = array[startingIndex++] === 1.0;\n  var offsetAttribute = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.positions = positions;\n    scratchOptions.width = width;\n    scratchOptions.height = height;\n    scratchOptions.extrudedHeight = extrudedHeight;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    scratchOptions.shadowVolume = shadowVolume;\n    scratchOptions.offsetAttribute =\n      offsetAttribute === -1 ? undefined : offsetAttribute;\n\n    return new CorridorGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._width = width;\n  result._height = height;\n  result._extrudedHeight = extrudedHeight;\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n  result._shadowVolume = shadowVolume;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n\n  return result;\n};\n\n/**\n * Computes the bounding rectangle given the provided options\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\n * @param {Number} options.width The distance between the edges of the corridor in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n * @param {Rectangle} [result] An object in which to store the result.\n *\n * @returns {Rectangle} The result rectangle.\n */\nCorridorGeometry.computeRectangle = function (options, result) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.positions;\n  var width = options.width;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", positions);\n  Check.defined(\"options.width\", width);\n  //>>includeEnd('debug');\n\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  var cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n\n  return computeRectangle(positions, ellipsoid, width, cornerType, result);\n};\n\n/**\n * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\n *\n * @param {CorridorGeometry} corridorGeometry A description of the corridor.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCorridorGeometry.createGeometry = function (corridorGeometry) {\n  var positions = corridorGeometry._positions;\n  var width = corridorGeometry._width;\n  var ellipsoid = corridorGeometry._ellipsoid;\n\n  positions = scaleToSurface(positions, ellipsoid);\n  var cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n\n  if (cleanPositions.length < 2 || width <= 0) {\n    return;\n  }\n\n  var height = corridorGeometry._height;\n  var extrudedHeight = corridorGeometry._extrudedHeight;\n  var extrude = !CesiumMath.equalsEpsilon(\n    height,\n    extrudedHeight,\n    0,\n    CesiumMath.EPSILON2\n  );\n\n  var vertexFormat = corridorGeometry._vertexFormat;\n  var params = {\n    ellipsoid: ellipsoid,\n    positions: cleanPositions,\n    width: width,\n    cornerType: corridorGeometry._cornerType,\n    granularity: corridorGeometry._granularity,\n    saveAttributes: true,\n  };\n  var attr;\n  if (extrude) {\n    params.height = height;\n    params.extrudedHeight = extrudedHeight;\n    params.shadowVolume = corridorGeometry._shadowVolume;\n    params.offsetAttribute = corridorGeometry._offsetAttribute;\n    attr = computePositionsExtruded(params, vertexFormat);\n  } else {\n    var computedPositions = CorridorGeometryLibrary.computePositions(params);\n    attr = combine(computedPositions, vertexFormat, ellipsoid);\n    attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n      attr.attributes.position.values,\n      height,\n      ellipsoid\n    );\n\n    if (defined(corridorGeometry._offsetAttribute)) {\n      var applyOffsetValue =\n        corridorGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n          ? 0\n          : 1;\n      var length = attr.attributes.position.values.length;\n      var applyOffset = new Uint8Array(length / 3);\n      arrayFill(applyOffset, applyOffsetValue);\n      attr.attributes.applyOffset = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n        componentsPerAttribute: 1,\n        values: applyOffset,\n      });\n    }\n  }\n  var attributes = attr.attributes;\n  var boundingSphere = BoundingSphere.fromVertices(\n    attributes.position.values,\n    undefined,\n    3\n  );\n  if (!vertexFormat.position) {\n    attr.attributes.position.values = undefined;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: attr.indices,\n    primitiveType: PrimitiveType.TRIANGLES,\n    boundingSphere: boundingSphere,\n    offsetAttribute: corridorGeometry._offsetAttribute,\n  });\n};\n\n/**\n * @private\n */\nCorridorGeometry.createShadowVolume = function (\n  corridorGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  var granularity = corridorGeometry._granularity;\n  var ellipsoid = corridorGeometry._ellipsoid;\n\n  var minHeight = minHeightFunc(granularity, ellipsoid);\n  var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new CorridorGeometry({\n    positions: corridorGeometry._positions,\n    width: corridorGeometry._width,\n    cornerType: corridorGeometry._cornerType,\n    ellipsoid: ellipsoid,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nObject.defineProperties(CorridorGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      if (!defined(this._rectangle)) {\n        this._rectangle = computeRectangle(\n          this._positions,\n          this._ellipsoid,\n          this._width,\n          this._cornerType\n        );\n      }\n      return this._rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering CorridorGeometries as GroundPrimitives.\n   *\n   * Corridors don't support stRotation,\n   * so just return the corners of the original system.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      return [0, 0, 0, 1, 1, 0];\n    },\n  },\n});\nexport default CorridorGeometry;\n","import CorridorGeometry from \"../Core/CorridorGeometry.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\n\nfunction createCorridorGeometry(corridorGeometry, offset) {\n  if (defined(offset)) {\n    corridorGeometry = CorridorGeometry.unpack(corridorGeometry, offset);\n  }\n  corridorGeometry._ellipsoid = Ellipsoid.clone(corridorGeometry._ellipsoid);\n  return CorridorGeometry.createGeometry(corridorGeometry);\n}\nexport default createCorridorGeometry;\n"],"names":["cartesian1","Cartesian3","cartesian2","cartesian3","cartesian4","cartesian5","cartesian6","scratch1","scratch2","scaleToSurface","positions","ellipsoid","i","length","scaleToGeodeticSurface","addNormals","attr","normal","left","front","back","vertexFormat","normals","tangents","bitangents","forward","normalize","cross","CorridorGeometryLibrary","addAttribute","tangent","bitangent","combine","computedPositions","corner","corners","endPositions","computedLefts","lefts","computedNormals","attributes","GeometryAttributes","leftCount","rightCount","indicesLength","leftSide","leftPositions","defined","rightPositions","endPositionLength","addEndPositions","UL","LL","UR","LR","rightPos","leftPos","size","finalPositions","Float64Array","Float32Array","undefined","halfLength","indices","IndexDatatype","createTypedArray","index","firstEndPositions","fromArray","rightNormal","leftNormal","posIndex","compIndex","rightEdge","leftEdge","set","geodeticSurfaceNormal","add","j","pivot","start","l","r","outsidePoint","previousPoint","nextPoint","subtract","negate","splice","lastEndPositions","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","st","rightSt","leftSt","stIndex","a","theta","Math","PI","halfEndPos","CesiumMath","PI_OVER_TWO","cos","sin","FLOAT","addWallPositions","wallPositions","x","y","z","computePositionsExtruded","params","topVertexFormat","VertexFormat","shadowVolume","computePositions","height","extrudedHeight","newPositions","extrudedPositions","PolygonPipeline","scaleToGeodeticHeight","topNormals","topBitangents","threeSize","twoSize","sixSize","topPosition","bottomPosition","previousPosition","attrIndex","attrIndexOffset","topTangents","topSt","s","t","extrudedAttributes","extrudeNormals","extrudeDirection","offsetAttribute","applyOffset","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","applyOffsetValue","NONE","UNSIGNED_BYTE","iLength","newIndices","v0","v1","v2","scratchCartesian1","scratchCartesian2","scratchCartographic","Cartographic","computeOffsetPoints","position1","position2","halfWidth","min","max","direction","offsetDirection","multiplyByScalar","minLat","latitude","minLon","longitude","maxLat","maxLon","cartesianToCartographic","lat","lon","scratchCartesianOffset","scratchCartesianEnds","scratchCartographicMin","scratchCartographicMax","computeRectangle","width","cornerType","result","cleanPositions","arrayRemoveDuplicates","equalsEpsilon","Rectangle","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","CornerType","ROUNDED","first","last","rectangle","north","south","east","west","CorridorGeometry","options","defaultValue","EMPTY_OBJECT","Check","this","_positions","_ellipsoid","Ellipsoid","clone","WGS84","_vertexFormat","DEFAULT","_width","_height","_extrudedHeight","_cornerType","_granularity","granularity","RADIANS_PER_DEGREE","_shadowVolume","_workerName","_offsetAttribute","_rectangle","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","unpack","Array","createGeometry","corridorGeometry","extrude","EPSILON2","saveAttributes","boundingSphere","BoundingSphere","fromVertices","Geometry","primitiveType","PrimitiveType","TRIANGLES","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","POSITION_ONLY","Object","defineProperties","prototype","get","textureCoordinateRotationPoints","offset"],"mappings":"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"}