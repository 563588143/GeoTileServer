{"version":3,"file":"PolylineVolumeGeometryLibrary-7c5a0257.js","sources":["../../../../Source/Core/CornerType.js","../../../../Source/Core/oneTimeWarning.js","../../../../Source/Core/PolylineVolumeGeometryLibrary.js"],"sourcesContent":["/**\n * Style options for corners.\n *\n * @demo The {@link https://sandcastle.cesium.com/index.html?src=Corridor.html&label=Geometries|Corridor Demo}\n * demonstrates the three corner types, as used by {@link CorridorGraphics}.\n *\n * @enum {Number}\n */\nvar CornerType = {\n  /**\n   * <img src=\"Images/CornerTypeRounded.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n   *\n   * Corner has a smooth edge.\n   * @type {Number}\n   * @constant\n   */\n  ROUNDED: 0,\n\n  /**\n   * <img src=\"Images/CornerTypeMitered.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n   *\n   * Corner point is the intersection of adjacent edges.\n   * @type {Number}\n   * @constant\n   */\n  MITERED: 1,\n\n  /**\n   * <img src=\"Images/CornerTypeBeveled.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n   *\n   * Corner is clipped.\n   * @type {Number}\n   * @constant\n   */\n  BEVELED: 2,\n};\nexport default Object.freeze(CornerType);\n","import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\nvar warnings = {};\n\n/**\n * Logs a one time message to the console.  Use this function instead of\n * <code>console.log</code> directly since this does not log duplicate messages\n * unless it is called from multiple workers.\n *\n * @function oneTimeWarning\n *\n * @param {String} identifier The unique identifier for this warning.\n * @param {String} [message=identifier] The message to log to the console.\n *\n * @example\n * for(var i=0;i<foo.length;++i) {\n *    if (!defined(foo[i].bar)) {\n *       // Something that can be recovered from but may happen a lot\n *       oneTimeWarning('foo.bar undefined', 'foo.bar is undefined. Setting to 0.');\n *       foo[i].bar = 0;\n *       // ...\n *    }\n * }\n *\n * @private\n */\nfunction oneTimeWarning(identifier, message) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(identifier)) {\n    throw new DeveloperError(\"identifier is required.\");\n  }\n  //>>includeEnd('debug');\n\n  if (!defined(warnings[identifier])) {\n    warnings[identifier] = true;\n    console.warn(defaultValue(message, identifier));\n  }\n}\n\noneTimeWarning.geometryOutlines =\n  \"Entity geometry outlines are unsupported on terrain. Outlines will be disabled. To enable outlines, disable geometry terrain clamping by explicitly setting height to 0.\";\n\noneTimeWarning.geometryZIndex =\n  \"Entity geometry with zIndex are unsupported when height or extrudedHeight are defined.  zIndex will be ignored\";\n\noneTimeWarning.geometryHeightReference =\n  \"Entity corridor, ellipse, polygon or rectangle with heightReference must also have a defined height.  heightReference will be ignored\";\noneTimeWarning.geometryExtrudedHeightReference =\n  \"Entity corridor, ellipse, polygon or rectangle with extrudedHeightReference must also have a defined extrudedHeight.  extrudedHeightReference will be ignored\";\nexport default oneTimeWarning;\n","import Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport CornerType from \"./CornerType.js\";\nimport EllipsoidTangentPlane from \"./EllipsoidTangentPlane.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport Matrix4 from \"./Matrix4.js\";\nimport PolylinePipeline from \"./PolylinePipeline.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport Transforms from \"./Transforms.js\";\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\n\nvar scratch2Array = [new Cartesian3(), new Cartesian3()];\nvar scratchCartesian1 = new Cartesian3();\nvar scratchCartesian2 = new Cartesian3();\nvar scratchCartesian3 = new Cartesian3();\nvar scratchCartesian4 = new Cartesian3();\nvar scratchCartesian5 = new Cartesian3();\nvar scratchCartesian6 = new Cartesian3();\nvar scratchCartesian7 = new Cartesian3();\nvar scratchCartesian8 = new Cartesian3();\nvar scratchCartesian9 = new Cartesian3();\n\nvar scratch1 = new Cartesian3();\nvar scratch2 = new Cartesian3();\n\n/**\n * @private\n */\nvar PolylineVolumeGeometryLibrary = {};\n\nvar cartographic = new Cartographic();\nfunction scaleToSurface(positions, ellipsoid) {\n  var heights = new Array(positions.length);\n  for (var i = 0; i < positions.length; i++) {\n    var pos = positions[i];\n    cartographic = ellipsoid.cartesianToCartographic(pos, cartographic);\n    heights[i] = cartographic.height;\n    positions[i] = ellipsoid.scaleToGeodeticSurface(pos, pos);\n  }\n  return heights;\n}\n\nfunction subdivideHeights(points, h0, h1, granularity) {\n  var p0 = points[0];\n  var p1 = points[1];\n  var angleBetween = Cartesian3.angleBetween(p0, p1);\n  var numPoints = Math.ceil(angleBetween / granularity);\n  var heights = new Array(numPoints);\n  var i;\n  if (h0 === h1) {\n    for (i = 0; i < numPoints; i++) {\n      heights[i] = h0;\n    }\n    heights.push(h1);\n    return heights;\n  }\n\n  var dHeight = h1 - h0;\n  var heightPerVertex = dHeight / numPoints;\n\n  for (i = 1; i < numPoints; i++) {\n    var h = h0 + i * heightPerVertex;\n    heights[i] = h;\n  }\n\n  heights[0] = h0;\n  heights.push(h1);\n  return heights;\n}\n\nvar nextScratch = new Cartesian3();\nvar prevScratch = new Cartesian3();\n\nfunction computeRotationAngle(start, end, position, ellipsoid) {\n  var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\n  var next = tangentPlane.projectPointOntoPlane(\n    Cartesian3.add(position, start, nextScratch),\n    nextScratch\n  );\n  var prev = tangentPlane.projectPointOntoPlane(\n    Cartesian3.add(position, end, prevScratch),\n    prevScratch\n  );\n  var angle = Cartesian2.angleBetween(next, prev);\n\n  return prev.x * next.y - prev.y * next.x >= 0.0 ? -angle : angle;\n}\n\nvar negativeX = new Cartesian3(-1, 0, 0);\nvar transform = new Matrix4();\nvar translation = new Matrix4();\nvar rotationZ = new Matrix3();\nvar scaleMatrix = Matrix3.IDENTITY.clone();\nvar westScratch = new Cartesian3();\nvar finalPosScratch = new Cartesian4();\nvar heightCartesian = new Cartesian3();\nfunction addPosition(\n  center,\n  left,\n  shape,\n  finalPositions,\n  ellipsoid,\n  height,\n  xScalar,\n  repeat\n) {\n  var west = westScratch;\n  var finalPosition = finalPosScratch;\n  transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, transform);\n\n  west = Matrix4.multiplyByPointAsVector(transform, negativeX, west);\n  west = Cartesian3.normalize(west, west);\n  var angle = computeRotationAngle(west, left, center, ellipsoid);\n  rotationZ = Matrix3.fromRotationZ(angle, rotationZ);\n\n  heightCartesian.z = height;\n  transform = Matrix4.multiplyTransformation(\n    transform,\n    Matrix4.fromRotationTranslation(rotationZ, heightCartesian, translation),\n    transform\n  );\n  var scale = scaleMatrix;\n  scale[0] = xScalar;\n\n  for (var j = 0; j < repeat; j++) {\n    for (var i = 0; i < shape.length; i += 3) {\n      finalPosition = Cartesian3.fromArray(shape, i, finalPosition);\n      finalPosition = Matrix3.multiplyByVector(\n        scale,\n        finalPosition,\n        finalPosition\n      );\n      finalPosition = Matrix4.multiplyByPoint(\n        transform,\n        finalPosition,\n        finalPosition\n      );\n      finalPositions.push(finalPosition.x, finalPosition.y, finalPosition.z);\n    }\n  }\n\n  return finalPositions;\n}\n\nvar centerScratch = new Cartesian3();\nfunction addPositions(\n  centers,\n  left,\n  shape,\n  finalPositions,\n  ellipsoid,\n  heights,\n  xScalar\n) {\n  for (var i = 0; i < centers.length; i += 3) {\n    var center = Cartesian3.fromArray(centers, i, centerScratch);\n    finalPositions = addPosition(\n      center,\n      left,\n      shape,\n      finalPositions,\n      ellipsoid,\n      heights[i / 3],\n      xScalar,\n      1\n    );\n  }\n  return finalPositions;\n}\n\nfunction convertShapeTo3DDuplicate(shape2D, boundingRectangle) {\n  //orientate 2D shape to XZ plane center at (0, 0, 0), duplicate points\n  var length = shape2D.length;\n  var shape = new Array(length * 6);\n  var index = 0;\n  var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\n  var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\n\n  var point = shape2D[0];\n  shape[index++] = point.x - xOffset;\n  shape[index++] = 0.0;\n  shape[index++] = point.y - yOffset;\n  for (var i = 1; i < length; i++) {\n    point = shape2D[i];\n    var x = point.x - xOffset;\n    var z = point.y - yOffset;\n    shape[index++] = x;\n    shape[index++] = 0.0;\n    shape[index++] = z;\n\n    shape[index++] = x;\n    shape[index++] = 0.0;\n    shape[index++] = z;\n  }\n  point = shape2D[0];\n  shape[index++] = point.x - xOffset;\n  shape[index++] = 0.0;\n  shape[index++] = point.y - yOffset;\n\n  return shape;\n}\n\nfunction convertShapeTo3D(shape2D, boundingRectangle) {\n  //orientate 2D shape to XZ plane center at (0, 0, 0)\n  var length = shape2D.length;\n  var shape = new Array(length * 3);\n  var index = 0;\n  var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\n  var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\n\n  for (var i = 0; i < length; i++) {\n    shape[index++] = shape2D[i].x - xOffset;\n    shape[index++] = 0;\n    shape[index++] = shape2D[i].y - yOffset;\n  }\n\n  return shape;\n}\n\nvar quaterion = new Quaternion();\nvar startPointScratch = new Cartesian3();\nvar rotMatrix = new Matrix3();\nfunction computeRoundCorner(\n  pivot,\n  startPoint,\n  endPoint,\n  cornerType,\n  leftIsOutside,\n  ellipsoid,\n  finalPositions,\n  shape,\n  height,\n  duplicatePoints\n) {\n  var angle = Cartesian3.angleBetween(\n    Cartesian3.subtract(startPoint, pivot, scratch1),\n    Cartesian3.subtract(endPoint, pivot, scratch2)\n  );\n  var granularity =\n    cornerType === CornerType.BEVELED\n      ? 0\n      : Math.ceil(angle / CesiumMath.toRadians(5));\n\n  var m;\n  if (leftIsOutside) {\n    m = Matrix3.fromQuaternion(\n      Quaternion.fromAxisAngle(\n        Cartesian3.negate(pivot, scratch1),\n        angle / (granularity + 1),\n        quaterion\n      ),\n      rotMatrix\n    );\n  } else {\n    m = Matrix3.fromQuaternion(\n      Quaternion.fromAxisAngle(pivot, angle / (granularity + 1), quaterion),\n      rotMatrix\n    );\n  }\n\n  var left;\n  var surfacePoint;\n  startPoint = Cartesian3.clone(startPoint, startPointScratch);\n  if (granularity > 0) {\n    var repeat = duplicatePoints ? 2 : 1;\n    for (var i = 0; i < granularity; i++) {\n      startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\n      left = Cartesian3.subtract(startPoint, pivot, scratch1);\n      left = Cartesian3.normalize(left, left);\n      if (!leftIsOutside) {\n        left = Cartesian3.negate(left, left);\n      }\n      surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\n      finalPositions = addPosition(\n        surfacePoint,\n        left,\n        shape,\n        finalPositions,\n        ellipsoid,\n        height,\n        1,\n        repeat\n      );\n    }\n  } else {\n    left = Cartesian3.subtract(startPoint, pivot, scratch1);\n    left = Cartesian3.normalize(left, left);\n    if (!leftIsOutside) {\n      left = Cartesian3.negate(left, left);\n    }\n    surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\n    finalPositions = addPosition(\n      surfacePoint,\n      left,\n      shape,\n      finalPositions,\n      ellipsoid,\n      height,\n      1,\n      1\n    );\n\n    endPoint = Cartesian3.clone(endPoint, startPointScratch);\n    left = Cartesian3.subtract(endPoint, pivot, scratch1);\n    left = Cartesian3.normalize(left, left);\n    if (!leftIsOutside) {\n      left = Cartesian3.negate(left, left);\n    }\n    surfacePoint = ellipsoid.scaleToGeodeticSurface(endPoint, scratch2);\n    finalPositions = addPosition(\n      surfacePoint,\n      left,\n      shape,\n      finalPositions,\n      ellipsoid,\n      height,\n      1,\n      1\n    );\n  }\n\n  return finalPositions;\n}\n\nPolylineVolumeGeometryLibrary.removeDuplicatesFromShape = function (\n  shapePositions\n) {\n  var length = shapePositions.length;\n  var cleanedPositions = [];\n  for (var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\n    var v0 = shapePositions[i0];\n    var v1 = shapePositions[i1];\n\n    if (!Cartesian2.equals(v0, v1)) {\n      cleanedPositions.push(v1); // Shallow copy!\n    }\n  }\n\n  return cleanedPositions;\n};\n\nPolylineVolumeGeometryLibrary.angleIsGreaterThanPi = function (\n  forward,\n  backward,\n  position,\n  ellipsoid\n) {\n  var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\n  var next = tangentPlane.projectPointOntoPlane(\n    Cartesian3.add(position, forward, nextScratch),\n    nextScratch\n  );\n  var prev = tangentPlane.projectPointOntoPlane(\n    Cartesian3.add(position, backward, prevScratch),\n    prevScratch\n  );\n\n  return prev.x * next.y - prev.y * next.x >= 0.0;\n};\n\nvar scratchForwardProjection = new Cartesian3();\nvar scratchBackwardProjection = new Cartesian3();\n\nPolylineVolumeGeometryLibrary.computePositions = function (\n  positions,\n  shape2D,\n  boundingRectangle,\n  geometry,\n  duplicatePoints\n) {\n  var ellipsoid = geometry._ellipsoid;\n  var heights = scaleToSurface(positions, ellipsoid);\n  var granularity = geometry._granularity;\n  var cornerType = geometry._cornerType;\n  var shapeForSides = duplicatePoints\n    ? convertShapeTo3DDuplicate(shape2D, boundingRectangle)\n    : convertShapeTo3D(shape2D, boundingRectangle);\n  var shapeForEnds = duplicatePoints\n    ? convertShapeTo3D(shape2D, boundingRectangle)\n    : undefined;\n  var heightOffset = boundingRectangle.height / 2;\n  var width = boundingRectangle.width / 2;\n  var length = positions.length;\n  var finalPositions = [];\n  var ends = duplicatePoints ? [] : undefined;\n\n  var forward = scratchCartesian1;\n  var backward = scratchCartesian2;\n  var cornerDirection = scratchCartesian3;\n  var surfaceNormal = scratchCartesian4;\n  var pivot = scratchCartesian5;\n  var start = scratchCartesian6;\n  var end = scratchCartesian7;\n  var left = scratchCartesian8;\n  var previousPosition = scratchCartesian9;\n\n  var position = positions[0];\n  var nextPosition = positions[1];\n  surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\n  forward = Cartesian3.subtract(nextPosition, position, forward);\n  forward = Cartesian3.normalize(forward, forward);\n  left = Cartesian3.cross(surfaceNormal, forward, left);\n  left = Cartesian3.normalize(left, left);\n  var h0 = heights[0];\n  var h1 = heights[1];\n  if (duplicatePoints) {\n    ends = addPosition(\n      position,\n      left,\n      shapeForEnds,\n      ends,\n      ellipsoid,\n      h0 + heightOffset,\n      1,\n      1\n    );\n  }\n  previousPosition = Cartesian3.clone(position, previousPosition);\n  position = nextPosition;\n  backward = Cartesian3.negate(forward, backward);\n  var subdividedHeights;\n  var subdividedPositions;\n  for (var i = 1; i < length - 1; i++) {\n    var repeat = duplicatePoints ? 2 : 1;\n    nextPosition = positions[i + 1];\n    if (position.equals(nextPosition)) {\n      oneTimeWarning(\n        \"Positions are too close and are considered equivalent with rounding error.\"\n      );\n      continue;\n    }\n    forward = Cartesian3.subtract(nextPosition, position, forward);\n    forward = Cartesian3.normalize(forward, forward);\n    cornerDirection = Cartesian3.add(forward, backward, cornerDirection);\n    cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n    surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\n\n    var forwardProjection = Cartesian3.multiplyByScalar(\n      surfaceNormal,\n      Cartesian3.dot(forward, surfaceNormal),\n      scratchForwardProjection\n    );\n    Cartesian3.subtract(forward, forwardProjection, forwardProjection);\n    Cartesian3.normalize(forwardProjection, forwardProjection);\n\n    var backwardProjection = Cartesian3.multiplyByScalar(\n      surfaceNormal,\n      Cartesian3.dot(backward, surfaceNormal),\n      scratchBackwardProjection\n    );\n    Cartesian3.subtract(backward, backwardProjection, backwardProjection);\n    Cartesian3.normalize(backwardProjection, backwardProjection);\n\n    var doCorner = !CesiumMath.equalsEpsilon(\n      Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)),\n      1.0,\n      CesiumMath.EPSILON7\n    );\n\n    if (doCorner) {\n      cornerDirection = Cartesian3.cross(\n        cornerDirection,\n        surfaceNormal,\n        cornerDirection\n      );\n      cornerDirection = Cartesian3.cross(\n        surfaceNormal,\n        cornerDirection,\n        cornerDirection\n      );\n      cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n      var scalar =\n        1 /\n        Math.max(\n          0.25,\n          Cartesian3.magnitude(\n            Cartesian3.cross(cornerDirection, backward, scratch1)\n          )\n        );\n      var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(\n        forward,\n        backward,\n        position,\n        ellipsoid\n      );\n      if (leftIsOutside) {\n        pivot = Cartesian3.add(\n          position,\n          Cartesian3.multiplyByScalar(\n            cornerDirection,\n            scalar * width,\n            cornerDirection\n          ),\n          pivot\n        );\n        start = Cartesian3.add(\n          pivot,\n          Cartesian3.multiplyByScalar(left, width, start),\n          start\n        );\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n        scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\n        subdividedHeights = subdivideHeights(\n          scratch2Array,\n          h0 + heightOffset,\n          h1 + heightOffset,\n          granularity\n        );\n        subdividedPositions = PolylinePipeline.generateArc({\n          positions: scratch2Array,\n          granularity: granularity,\n          ellipsoid: ellipsoid,\n        });\n        finalPositions = addPositions(\n          subdividedPositions,\n          left,\n          shapeForSides,\n          finalPositions,\n          ellipsoid,\n          subdividedHeights,\n          1\n        );\n        left = Cartesian3.cross(surfaceNormal, forward, left);\n        left = Cartesian3.normalize(left, left);\n        end = Cartesian3.add(\n          pivot,\n          Cartesian3.multiplyByScalar(left, width, end),\n          end\n        );\n        if (\n          cornerType === CornerType.ROUNDED ||\n          cornerType === CornerType.BEVELED\n        ) {\n          computeRoundCorner(\n            pivot,\n            start,\n            end,\n            cornerType,\n            leftIsOutside,\n            ellipsoid,\n            finalPositions,\n            shapeForSides,\n            h1 + heightOffset,\n            duplicatePoints\n          );\n        } else {\n          cornerDirection = Cartesian3.negate(cornerDirection, cornerDirection);\n          finalPositions = addPosition(\n            position,\n            cornerDirection,\n            shapeForSides,\n            finalPositions,\n            ellipsoid,\n            h1 + heightOffset,\n            scalar,\n            repeat\n          );\n        }\n        previousPosition = Cartesian3.clone(end, previousPosition);\n      } else {\n        pivot = Cartesian3.add(\n          position,\n          Cartesian3.multiplyByScalar(\n            cornerDirection,\n            scalar * width,\n            cornerDirection\n          ),\n          pivot\n        );\n        start = Cartesian3.add(\n          pivot,\n          Cartesian3.multiplyByScalar(left, -width, start),\n          start\n        );\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n        scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\n        subdividedHeights = subdivideHeights(\n          scratch2Array,\n          h0 + heightOffset,\n          h1 + heightOffset,\n          granularity\n        );\n        subdividedPositions = PolylinePipeline.generateArc({\n          positions: scratch2Array,\n          granularity: granularity,\n          ellipsoid: ellipsoid,\n        });\n        finalPositions = addPositions(\n          subdividedPositions,\n          left,\n          shapeForSides,\n          finalPositions,\n          ellipsoid,\n          subdividedHeights,\n          1\n        );\n        left = Cartesian3.cross(surfaceNormal, forward, left);\n        left = Cartesian3.normalize(left, left);\n        end = Cartesian3.add(\n          pivot,\n          Cartesian3.multiplyByScalar(left, -width, end),\n          end\n        );\n        if (\n          cornerType === CornerType.ROUNDED ||\n          cornerType === CornerType.BEVELED\n        ) {\n          computeRoundCorner(\n            pivot,\n            start,\n            end,\n            cornerType,\n            leftIsOutside,\n            ellipsoid,\n            finalPositions,\n            shapeForSides,\n            h1 + heightOffset,\n            duplicatePoints\n          );\n        } else {\n          finalPositions = addPosition(\n            position,\n            cornerDirection,\n            shapeForSides,\n            finalPositions,\n            ellipsoid,\n            h1 + heightOffset,\n            scalar,\n            repeat\n          );\n        }\n        previousPosition = Cartesian3.clone(end, previousPosition);\n      }\n      backward = Cartesian3.negate(forward, backward);\n    } else {\n      finalPositions = addPosition(\n        previousPosition,\n        left,\n        shapeForSides,\n        finalPositions,\n        ellipsoid,\n        h0 + heightOffset,\n        1,\n        1\n      );\n      previousPosition = position;\n    }\n    h0 = h1;\n    h1 = heights[i + 1];\n    position = nextPosition;\n  }\n\n  scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n  scratch2Array[1] = Cartesian3.clone(position, scratch2Array[1]);\n  subdividedHeights = subdivideHeights(\n    scratch2Array,\n    h0 + heightOffset,\n    h1 + heightOffset,\n    granularity\n  );\n  subdividedPositions = PolylinePipeline.generateArc({\n    positions: scratch2Array,\n    granularity: granularity,\n    ellipsoid: ellipsoid,\n  });\n  finalPositions = addPositions(\n    subdividedPositions,\n    left,\n    shapeForSides,\n    finalPositions,\n    ellipsoid,\n    subdividedHeights,\n    1\n  );\n  if (duplicatePoints) {\n    ends = addPosition(\n      position,\n      left,\n      shapeForEnds,\n      ends,\n      ellipsoid,\n      h1 + heightOffset,\n      1,\n      1\n    );\n  }\n\n  length = finalPositions.length;\n  var posLength = duplicatePoints ? length + ends.length : length;\n  var combinedPositions = new Float64Array(posLength);\n  combinedPositions.set(finalPositions);\n  if (duplicatePoints) {\n    combinedPositions.set(ends, length);\n  }\n\n  return combinedPositions;\n};\nexport default PolylineVolumeGeometryLibrary;\n"],"names":["Object","freeze","ROUNDED","MITERED","BEVELED","warnings","oneTimeWarning","identifier","message","defined","DeveloperError","console","warn","defaultValue","geometryOutlines","geometryZIndex","geometryHeightReference","geometryExtrudedHeightReference","scratch2Array","Cartesian3","scratchCartesian1","scratchCartesian2","scratchCartesian3","scratchCartesian4","scratchCartesian5","scratchCartesian6","scratchCartesian7","scratchCartesian8","scratchCartesian9","scratch1","scratch2","PolylineVolumeGeometryLibrary","cartographic","Cartographic","subdivideHeights","points","h0","h1","granularity","i","p0","p1","angleBetween","numPoints","Math","ceil","heights","Array","push","heightPerVertex","h","nextScratch","prevScratch","negativeX","transform","Matrix4","translation","rotationZ","Matrix3","scaleMatrix","IDENTITY","clone","westScratch","finalPosScratch","Cartesian4","heightCartesian","addPosition","center","left","shape","finalPositions","ellipsoid","height","xScalar","repeat","west","finalPosition","Transforms","eastNorthUpToFixedFrame","multiplyByPointAsVector","angle","start","end","position","tangentPlane","EllipsoidTangentPlane","next","projectPointOntoPlane","add","prev","Cartesian2","x","y","computeRotationAngle","normalize","fromRotationZ","z","multiplyTransformation","fromRotationTranslation","scale","j","length","fromArray","multiplyByVector","multiplyByPoint","centerScratch","addPositions","centers","convertShapeTo3D","shape2D","boundingRectangle","index","xOffset","width","yOffset","quaterion","Quaternion","startPointScratch","rotMatrix","computeRoundCorner","pivot","startPoint","endPoint","cornerType","leftIsOutside","duplicatePoints","m","subtract","CornerType","CesiumMath","toRadians","fromQuaternion","fromAxisAngle","negate","scaleToGeodeticSurface","removeDuplicatesFromShape","shapePositions","cleanedPositions","i0","i1","v0","v1","equals","angleIsGreaterThanPi","forward","backward","scratchForwardProjection","scratchBackwardProjection","computePositions","positions","geometry","_ellipsoid","pos","cartesianToCartographic","scaleToSurface","_granularity","_cornerType","shapeForSides","point","convertShapeTo3DDuplicate","shapeForEnds","undefined","heightOffset","ends","cornerDirection","surfaceNormal","previousPosition","nextPosition","geodeticSurfaceNormal","cross","subdividedHeights","forwardProjection","multiplyByScalar","dot","backwardProjection","equalsEpsilon","abs","EPSILON7","scalar","max","magnitude","PolylinePipeline","generateArc","posLength","combinedPositions","Float64Array","set"],"mappings":"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"}