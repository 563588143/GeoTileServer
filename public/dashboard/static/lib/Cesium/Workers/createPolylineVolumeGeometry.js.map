{"version":3,"file":"createPolylineVolumeGeometry.js","sources":["../../../../Source/Core/PolylineVolumeGeometry.js","../../../../Source/WorkersES6/createPolylineVolumeGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CornerType from \"./CornerType.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport oneTimeWarning from \"./oneTimeWarning.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nfunction computeAttributes(\n  combinedPositions,\n  shape,\n  boundingRectangle,\n  vertexFormat\n) {\n  var attributes = new GeometryAttributes();\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: combinedPositions,\n    });\n  }\n  var shapeLength = shape.length;\n  var vertexCount = combinedPositions.length / 3;\n  var length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\n  var firstEndIndices = PolygonPipeline.triangulate(shape);\n\n  var indicesCount =\n    (length - 1) * shapeLength * 6 + firstEndIndices.length * 2;\n  var indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\n  var i, j;\n  var ll, ul, ur, lr;\n  var offset = shapeLength * 2;\n  var index = 0;\n  for (i = 0; i < length - 1; i++) {\n    for (j = 0; j < shapeLength - 1; j++) {\n      ll = j * 2 + i * shapeLength * 2;\n      lr = ll + offset;\n      ul = ll + 1;\n      ur = ul + offset;\n\n      indices[index++] = ul;\n      indices[index++] = ll;\n      indices[index++] = ur;\n      indices[index++] = ur;\n      indices[index++] = ll;\n      indices[index++] = lr;\n    }\n    ll = shapeLength * 2 - 2 + i * shapeLength * 2;\n    ul = ll + 1;\n    ur = ul + offset;\n    lr = ll + offset;\n\n    indices[index++] = ul;\n    indices[index++] = ll;\n    indices[index++] = ur;\n    indices[index++] = ur;\n    indices[index++] = ll;\n    indices[index++] = lr;\n  }\n\n  if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) {\n    // st required for tangent/bitangent calculation\n    var st = new Float32Array(vertexCount * 2);\n    var lengthSt = 1 / (length - 1);\n    var heightSt = 1 / boundingRectangle.height;\n    var heightOffset = boundingRectangle.height / 2;\n    var s, t;\n    var stindex = 0;\n    for (i = 0; i < length; i++) {\n      s = i * lengthSt;\n      t = heightSt * (shape[0].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n      for (j = 1; j < shapeLength; j++) {\n        t = heightSt * (shape[j].y + heightOffset);\n        st[stindex++] = s;\n        st[stindex++] = t;\n        st[stindex++] = s;\n        st[stindex++] = t;\n      }\n      t = heightSt * (shape[0].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n    for (j = 0; j < shapeLength; j++) {\n      s = 0;\n      t = heightSt * (shape[j].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n    for (j = 0; j < shapeLength; j++) {\n      s = (length - 1) * lengthSt;\n      t = heightSt * (shape[j].y + heightOffset);\n      st[stindex++] = s;\n      st[stindex++] = t;\n    }\n\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: new Float32Array(st),\n    });\n  }\n\n  var endOffset = vertexCount - shapeLength * 2;\n  for (i = 0; i < firstEndIndices.length; i += 3) {\n    var v0 = firstEndIndices[i] + endOffset;\n    var v1 = firstEndIndices[i + 1] + endOffset;\n    var v2 = firstEndIndices[i + 2] + endOffset;\n\n    indices[index++] = v0;\n    indices[index++] = v1;\n    indices[index++] = v2;\n    indices[index++] = v2 + shapeLength;\n    indices[index++] = v1 + shapeLength;\n    indices[index++] = v0 + shapeLength;\n  }\n\n  var geometry = new Geometry({\n    attributes: attributes,\n    indices: indices,\n    boundingSphere: BoundingSphere.fromVertices(combinedPositions),\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n\n  if (vertexFormat.normal) {\n    geometry = GeometryPipeline.computeNormal(geometry);\n  }\n\n  if (vertexFormat.tangent || vertexFormat.bitangent) {\n    try {\n      geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\n    } catch (e) {\n      oneTimeWarning(\n        \"polyline-volume-tangent-bitangent\",\n        \"Unable to compute tangents and bitangents for polyline volume geometry\"\n      );\n      //TODO https://github.com/CesiumGS/cesium/issues/3609\n    }\n\n    if (!vertexFormat.tangent) {\n      geometry.attributes.tangent = undefined;\n    }\n    if (!vertexFormat.bitangent) {\n      geometry.attributes.bitangent = undefined;\n    }\n    if (!vertexFormat.st) {\n      geometry.attributes.st = undefined;\n    }\n  }\n\n  return geometry;\n}\n\n/**\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n *\n * @alias PolylineVolumeGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesian3} positions that define the center of the polyline volume.\n * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n *\n * @see PolylineVolumeGeometry#createGeometry\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\n *\n * @example\n * function computeCircle(radius) {\n *   var positions = [];\n *   for (var i = 0; i < 360; i++) {\n *     var radians = Cesium.Math.toRadians(i);\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n *   }\n *   return positions;\n * }\n *\n * var volume = new Cesium.PolylineVolumeGeometry({\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0\n *   ]),\n *   shapePositions : computeCircle(100000.0)\n * });\n */\nfunction PolylineVolumeGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var positions = options.polylinePositions;\n  var shape = options.shapePositions;\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(positions)) {\n    throw new DeveloperError(\"options.polylinePositions is required.\");\n  }\n  if (!defined(shape)) {\n    throw new DeveloperError(\"options.shapePositions is required.\");\n  }\n  //>>includeEnd('debug');\n\n  this._positions = positions;\n  this._shape = shape;\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n  this._vertexFormat = VertexFormat.clone(\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\n  );\n  this._granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  this._workerName = \"createPolylineVolumeGeometry\";\n\n  var numComponents = 1 + positions.length * Cartesian3.packedLength;\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\n}\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolylineVolumeGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolylineVolumeGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(value)) {\n    throw new DeveloperError(\"value is required\");\n  }\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var positions = value._positions;\n  var length = positions.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    Cartesian3.pack(positions[i], array, startingIndex);\n  }\n\n  var shape = value._shape;\n  length = shape.length;\n  array[startingIndex++] = length;\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    Cartesian2.pack(shape[i], array, startingIndex);\n  }\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._cornerType;\n  array[startingIndex] = value._granularity;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  polylinePositions: undefined,\n  shapePositions: undefined,\n  ellipsoid: scratchEllipsoid,\n  vertexFormat: scratchVertexFormat,\n  cornerType: undefined,\n  granularity: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\n * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\n */\nPolylineVolumeGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(array)) {\n    throw new DeveloperError(\"array is required\");\n  }\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var i;\n\n  var length = array[startingIndex++];\n  var positions = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n    positions[i] = Cartesian3.unpack(array, startingIndex);\n  }\n\n  length = array[startingIndex++];\n  var shape = new Array(length);\n\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n    shape[i] = Cartesian2.unpack(array, startingIndex);\n  }\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  var cornerType = array[startingIndex++];\n  var granularity = array[startingIndex];\n\n  if (!defined(result)) {\n    scratchOptions.polylinePositions = positions;\n    scratchOptions.shapePositions = shape;\n    scratchOptions.cornerType = cornerType;\n    scratchOptions.granularity = granularity;\n    return new PolylineVolumeGeometry(scratchOptions);\n  }\n\n  result._positions = positions;\n  result._shape = shape;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._cornerType = cornerType;\n  result._granularity = granularity;\n\n  return result;\n};\n\nvar brScratch = new BoundingRectangle();\n\n/**\n * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolylineVolumeGeometry.createGeometry = function (polylineVolumeGeometry) {\n  var positions = polylineVolumeGeometry._positions;\n  var cleanPositions = arrayRemoveDuplicates(\n    positions,\n    Cartesian3.equalsEpsilon\n  );\n  var shape2D = polylineVolumeGeometry._shape;\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\n    return undefined;\n  }\n\n  if (\n    PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE\n  ) {\n    shape2D.reverse();\n  }\n  var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n  var computedPositions = PolylineVolumeGeometryLibrary.computePositions(\n    cleanPositions,\n    shape2D,\n    boundingRectangle,\n    polylineVolumeGeometry,\n    true\n  );\n  return computeAttributes(\n    computedPositions,\n    shape2D,\n    boundingRectangle,\n    polylineVolumeGeometry._vertexFormat\n  );\n};\nexport default PolylineVolumeGeometry;\n","import defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport PolylineVolumeGeometry from \"../Core/PolylineVolumeGeometry.js\";\n\nfunction createPolylineVolumeGeometry(polylineVolumeGeometry, offset) {\n  if (defined(offset)) {\n    polylineVolumeGeometry = PolylineVolumeGeometry.unpack(\n      polylineVolumeGeometry,\n      offset\n    );\n  }\n  polylineVolumeGeometry._ellipsoid = Ellipsoid.clone(\n    polylineVolumeGeometry._ellipsoid\n  );\n  return PolylineVolumeGeometry.createGeometry(polylineVolumeGeometry);\n}\nexport default createPolylineVolumeGeometry;\n"],"names":["PolylineVolumeGeometry","options","positions","defaultValue","EMPTY_OBJECT","polylinePositions","shape","shapePositions","defined","DeveloperError","this","_positions","_shape","_ellipsoid","Ellipsoid","clone","ellipsoid","WGS84","_cornerType","cornerType","CornerType","ROUNDED","_vertexFormat","VertexFormat","vertexFormat","DEFAULT","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_workerName","numComponents","length","Cartesian3","packedLength","Cartesian2","pack","value","array","startingIndex","i","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","undefined","unpack","result","Array","brScratch","BoundingRectangle","createGeometry","polylineVolumeGeometry","cleanPositions","arrayRemoveDuplicates","equalsEpsilon","shape2D","PolylineVolumeGeometryLibrary","removeDuplicatesFromShape","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","reverse","boundingRectangle","fromPoints","combinedPositions","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","j","ll","ul","ur","lr","shapeLength","vertexCount","firstEndIndices","triangulate","indicesCount","indices","IndexDatatype","createTypedArray","offset","index","st","tangent","bitangent","s","t","Float32Array","lengthSt","heightSt","height","heightOffset","stindex","y","FLOAT","endOffset","v0","v1","v2","geometry","Geometry","boundingSphere","BoundingSphere","fromVertices","primitiveType","PrimitiveType","TRIANGLES","normal","GeometryPipeline","computeNormal","computeTangentAndBitangent","e","oneTimeWarning","computeAttributes","computePositions"],"mappings":"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"}