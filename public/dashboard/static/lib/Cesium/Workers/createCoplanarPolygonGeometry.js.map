{"version":3,"file":"createCoplanarPolygonGeometry.js","sources":["../../../../Source/Core/CoplanarPolygonGeometry.js","../../../../Source/WorkersES6/createCoplanarPolygonGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nvar scratchPosition = new Cartesian3();\nvar scratchBR = new BoundingRectangle();\nvar stScratch = new Cartesian2();\nvar textureCoordinatesOrigin = new Cartesian2();\nvar scratchNormal = new Cartesian3();\nvar scratchTangent = new Cartesian3();\nvar scratchBitangent = new Cartesian3();\nvar centerScratch = new Cartesian3();\nvar axis1Scratch = new Cartesian3();\nvar axis2Scratch = new Cartesian3();\nvar quaternionScratch = new Quaternion();\nvar textureMatrixScratch = new Matrix3();\nvar tangentRotationScratch = new Matrix3();\nvar surfaceNormalScratch = new Cartesian3();\n\nfunction createGeometryFromPolygon(\n  polygon,\n  vertexFormat,\n  boundingRectangle,\n  stRotation,\n  projectPointTo2D,\n  normal,\n  tangent,\n  bitangent\n) {\n  var positions = polygon.positions;\n  var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n  /* If polygon is completely unrenderable, just use the first three vertices */\n  if (indices.length < 3) {\n    indices = [0, 1, 2];\n  }\n\n  var newIndices = IndexDatatype.createTypedArray(\n    positions.length,\n    indices.length\n  );\n  newIndices.set(indices);\n\n  var textureMatrix = textureMatrixScratch;\n  if (stRotation !== 0.0) {\n    var rotation = Quaternion.fromAxisAngle(\n      normal,\n      stRotation,\n      quaternionScratch\n    );\n    textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n    if (vertexFormat.tangent || vertexFormat.bitangent) {\n      rotation = Quaternion.fromAxisAngle(\n        normal,\n        -stRotation,\n        quaternionScratch\n      );\n      var tangentRotation = Matrix3.fromQuaternion(\n        rotation,\n        tangentRotationScratch\n      );\n\n      tangent = Cartesian3.normalize(\n        Matrix3.multiplyByVector(tangentRotation, tangent, tangent),\n        tangent\n      );\n      if (vertexFormat.bitangent) {\n        bitangent = Cartesian3.normalize(\n          Cartesian3.cross(normal, tangent, bitangent),\n          bitangent\n        );\n      }\n    }\n  } else {\n    textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n  }\n\n  var stOrigin = textureCoordinatesOrigin;\n  if (vertexFormat.st) {\n    stOrigin.x = boundingRectangle.x;\n    stOrigin.y = boundingRectangle.y;\n  }\n\n  var length = positions.length;\n  var size = length * 3;\n  var flatPositions = new Float64Array(size);\n  var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n  var textureCoordinates = vertexFormat.st\n    ? new Float32Array(length * 2)\n    : undefined;\n\n  var positionIndex = 0;\n  var normalIndex = 0;\n  var bitangentIndex = 0;\n  var tangentIndex = 0;\n  var stIndex = 0;\n\n  for (var i = 0; i < length; i++) {\n    var position = positions[i];\n    flatPositions[positionIndex++] = position.x;\n    flatPositions[positionIndex++] = position.y;\n    flatPositions[positionIndex++] = position.z;\n\n    if (vertexFormat.st) {\n      var p = Matrix3.multiplyByVector(\n        textureMatrix,\n        position,\n        scratchPosition\n      );\n      var st = projectPointTo2D(p, stScratch);\n      Cartesian2.subtract(st, stOrigin, st);\n\n      var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n      var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n      textureCoordinates[stIndex++] = stx;\n      textureCoordinates[stIndex++] = sty;\n    }\n\n    if (vertexFormat.normal) {\n      normals[normalIndex++] = normal.x;\n      normals[normalIndex++] = normal.y;\n      normals[normalIndex++] = normal.z;\n    }\n\n    if (vertexFormat.tangent) {\n      tangents[tangentIndex++] = tangent.x;\n      tangents[tangentIndex++] = tangent.y;\n      tangents[tangentIndex++] = tangent.z;\n    }\n\n    if (vertexFormat.bitangent) {\n      bitangents[bitangentIndex++] = bitangent.x;\n      bitangents[bitangentIndex++] = bitangent.y;\n      bitangents[bitangentIndex++] = bitangent.z;\n    }\n  }\n\n  var attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: flatPositions,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: newIndices,\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n}\n\n/**\n * A description of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n *\n * @example\n * var polygonGeometry = new Cesium.CoplanarPolygonGeometry({\n *  polygonHierarchy: new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 300000.0,\n *      -80.0, 30.0, 300000.0,\n *      -80.0, 30.0, 0.0\n *   ]))\n * });\n *\n */\nfunction CoplanarPolygonGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  var polygonHierarchy = options.polygonHierarchy;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\n  //>>includeEnd('debug');\n\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._polygonHierarchy = polygonHierarchy;\n  this._stRotation = defaultValue(options.stRotation, 0.0);\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._workerName = \"createCoplanarPolygonGeometry\";\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) +\n    VertexFormat.packedLength +\n    Ellipsoid.packedLength +\n    2;\n}\n\n/**\n * A description of a coplanar polygon from an array of positions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @returns {CoplanarPolygonGeometry}\n *\n * @example\n * // create a polygon from points\n * var polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nCoplanarPolygonGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  var newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    ellipsoid: options.ellipsoid,\n  };\n  return new CoplanarPolygonGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCoplanarPolygonGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex\n  );\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._stRotation;\n  array[startingIndex] = value.packedLength;\n\n  return array;\n};\n\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nvar scratchVertexFormat = new VertexFormat();\nvar scratchOptions = {\n  polygonHierarchy: {},\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\n */\nCoplanarPolygonGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  var vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  var stRotation = array[startingIndex++];\n  var packedLength = array[startingIndex];\n\n  if (!defined(result)) {\n    result = new CoplanarPolygonGeometry(scratchOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._stRotation = stRotation;\n  result.packedLength = packedLength;\n  return result;\n};\n\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCoplanarPolygonGeometry.createGeometry = function (polygonGeometry) {\n  var vertexFormat = polygonGeometry._vertexFormat;\n  var polygonHierarchy = polygonGeometry._polygonHierarchy;\n  var stRotation = polygonGeometry._stRotation;\n\n  var outerPositions = polygonHierarchy.positions;\n  outerPositions = arrayRemoveDuplicates(\n    outerPositions,\n    Cartesian3.equalsEpsilon,\n    true\n  );\n  if (outerPositions.length < 3) {\n    return;\n  }\n\n  var normal = scratchNormal;\n  var tangent = scratchTangent;\n  var bitangent = scratchBitangent;\n  var axis1 = axis1Scratch;\n  var axis2 = axis2Scratch;\n\n  var validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(\n    outerPositions,\n    centerScratch,\n    axis1,\n    axis2\n  );\n  if (!validGeometry) {\n    return undefined;\n  }\n\n  normal = Cartesian3.cross(axis1, axis2, normal);\n  normal = Cartesian3.normalize(normal, normal);\n\n  if (\n    !Cartesian3.equalsEpsilon(\n      centerScratch,\n      Cartesian3.ZERO,\n      CesiumMath.EPSILON6\n    )\n  ) {\n    var surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(\n      centerScratch,\n      surfaceNormalScratch\n    );\n    if (Cartesian3.dot(normal, surfaceNormal) < 0) {\n      normal = Cartesian3.negate(normal, normal);\n      axis1 = Cartesian3.negate(axis1, axis1);\n    }\n  }\n\n  var projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(\n    centerScratch,\n    axis1,\n    axis2\n  );\n  var projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(\n    centerScratch,\n    axis1,\n    axis2\n  );\n\n  if (vertexFormat.tangent) {\n    tangent = Cartesian3.clone(axis1, tangent);\n  }\n  if (vertexFormat.bitangent) {\n    bitangent = Cartesian3.clone(axis2, bitangent);\n  }\n\n  var results = PolygonGeometryLibrary.polygonsFromHierarchy(\n    polygonHierarchy,\n    projectPoints,\n    false\n  );\n  var hierarchy = results.hierarchy;\n  var polygons = results.polygons;\n\n  if (hierarchy.length === 0) {\n    return;\n  }\n  outerPositions = hierarchy[0].outerRing;\n\n  var boundingSphere = BoundingSphere.fromPoints(outerPositions);\n  var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\n    normal,\n    projectPoint,\n    outerPositions,\n    stRotation,\n    scratchBR\n  );\n\n  var geometries = [];\n  for (var i = 0; i < polygons.length; i++) {\n    var geometryInstance = new GeometryInstance({\n      geometry: createGeometryFromPolygon(\n        polygons[i],\n        vertexFormat,\n        boundingRectangle,\n        stRotation,\n        projectPoint,\n        normal,\n        tangent,\n        bitangent\n      ),\n    });\n\n    geometries.push(geometryInstance);\n  }\n\n  var geometry = GeometryPipeline.combineInstances(geometries)[0];\n  geometry.attributes.position.values = new Float64Array(\n    geometry.attributes.position.values\n  );\n  geometry.indices = IndexDatatype.createTypedArray(\n    geometry.attributes.position.values.length / 3,\n    geometry.indices\n  );\n\n  var attributes = geometry.attributes;\n  if (!vertexFormat.position) {\n    delete attributes.position;\n  }\n  return new Geometry({\n    attributes: attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n  });\n};\nexport default CoplanarPolygonGeometry;\n","import CoplanarPolygonGeometry from \"../Core/CoplanarPolygonGeometry.js\";\nimport defined from \"../Core/defined.js\";\n\nfunction createCoplanarPolygonGeometry(polygonGeometry, offset) {\n  if (defined(offset)) {\n    polygonGeometry = CoplanarPolygonGeometry.unpack(polygonGeometry, offset);\n  }\n  return CoplanarPolygonGeometry.createGeometry(polygonGeometry);\n}\nexport default createCoplanarPolygonGeometry;\n"],"names":["scratchPosition","Cartesian3","scratchBR","BoundingRectangle","stScratch","Cartesian2","textureCoordinatesOrigin","scratchNormal","scratchTangent","scratchBitangent","centerScratch","axis1Scratch","axis2Scratch","quaternionScratch","Quaternion","textureMatrixScratch","Matrix3","tangentRotationScratch","surfaceNormalScratch","createGeometryFromPolygon","polygon","vertexFormat","boundingRectangle","stRotation","projectPointTo2D","normal","tangent","bitangent","positions","indices","PolygonPipeline","triangulate","positions2D","holes","length","newIndices","IndexDatatype","createTypedArray","set","textureMatrix","rotation","fromAxisAngle","fromQuaternion","tangentRotation","normalize","multiplyByVector","cross","clone","IDENTITY","stOrigin","st","x","y","size","flatPositions","Float64Array","normals","Float32Array","undefined","tangents","bitangents","textureCoordinates","positionIndex","normalIndex","bitangentIndex","tangentIndex","stIndex","i","position","z","subtract","stx","CesiumMath","clamp","width","sty","height","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","FLOAT","Geometry","primitiveType","PrimitiveType","TRIANGLES","CoplanarPolygonGeometry","options","polygonHierarchy","defaultValue","EMPTY_OBJECT","Check","defined","VertexFormat","DEFAULT","this","_vertexFormat","_polygonHierarchy","_stRotation","_ellipsoid","Ellipsoid","ellipsoid","WGS84","_workerName","packedLength","PolygonGeometryLibrary","computeHierarchyPackedLength","fromPositions","pack","value","array","startingIndex","typeOf","object","packPolygonHierarchy","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","unpack","result","unpackPolygonHierarchy","createGeometry","polygonGeometry","outerPositions","arrayRemoveDuplicates","equalsEpsilon","axis1","axis2","CoplanarPolygonGeometryLibrary","computeProjectTo2DArguments","ZERO","EPSILON6","surfaceNormal","geodeticSurfaceNormal","dot","negate","projectPoints","createProjectPointsTo2DFunction","projectPoint","createProjectPointTo2DFunction","results","polygonsFromHierarchy","hierarchy","polygons","outerRing","boundingSphere","BoundingSphere","fromPoints","computeBoundingRectangle","geometries","geometryInstance","GeometryInstance","geometry","push","GeometryPipeline","combineInstances","offset"],"mappings":"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"}