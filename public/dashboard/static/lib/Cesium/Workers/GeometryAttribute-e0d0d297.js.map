{"version":3,"file":"GeometryAttribute-e0d0d297.js","sources":["../../../../Source/Core/GeometryType.js","../../../../Source/Core/PrimitiveType.js","../../../../Source/Core/Geometry.js","../../../../Source/Core/GeometryAttribute.js"],"sourcesContent":["/**\n * @private\n */\nvar GeometryType = {\n  NONE: 0,\n  TRIANGLES: 1,\n  LINES: 2,\n  POLYLINES: 3,\n};\nexport default Object.freeze(GeometryType);\n","import WebGLConstants from \"./WebGLConstants.js\";\n\n/**\n * The type of a geometric primitive, i.e., points, lines, and triangles.\n *\n * @enum {Number}\n */\nvar PrimitiveType = {\n  /**\n   * Points primitive where each vertex (or index) is a separate point.\n   *\n   * @type {Number}\n   * @constant\n   */\n  POINTS: WebGLConstants.POINTS,\n\n  /**\n   * Lines primitive where each two vertices (or indices) is a line segment.  Line segments are not necessarily connected.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINES: WebGLConstants.LINES,\n\n  /**\n   * Line loop primitive where each vertex (or index) after the first connects a line to\n   * the previous vertex, and the last vertex implicitly connects to the first.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINE_LOOP: WebGLConstants.LINE_LOOP,\n\n  /**\n   * Line strip primitive where each vertex (or index) after the first connects a line to the previous vertex.\n   *\n   * @type {Number}\n   * @constant\n   */\n  LINE_STRIP: WebGLConstants.LINE_STRIP,\n\n  /**\n   * Triangles primitive where each three vertices (or indices) is a triangle.  Triangles do not necessarily share edges.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TRIANGLES: WebGLConstants.TRIANGLES,\n\n  /**\n   * Triangle strip primitive where each vertex (or index) after the first two connect to\n   * the previous two vertices forming a triangle.  For example, this can be used to model a wall.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TRIANGLE_STRIP: WebGLConstants.TRIANGLE_STRIP,\n\n  /**\n   * Triangle fan primitive where each vertex (or index) after the first two connect to\n   * the previous vertex and the first vertex forming a triangle.  For example, this can be used\n   * to model a cone or circle.\n   *\n   * @type {Number}\n   * @constant\n   */\n  TRIANGLE_FAN: WebGLConstants.TRIANGLE_FAN,\n};\n\n/**\n * @private\n */\nPrimitiveType.validate = function (primitiveType) {\n  return (\n    primitiveType === PrimitiveType.POINTS ||\n    primitiveType === PrimitiveType.LINES ||\n    primitiveType === PrimitiveType.LINE_LOOP ||\n    primitiveType === PrimitiveType.LINE_STRIP ||\n    primitiveType === PrimitiveType.TRIANGLES ||\n    primitiveType === PrimitiveType.TRIANGLE_STRIP ||\n    primitiveType === PrimitiveType.TRIANGLE_FAN\n  );\n};\n\nexport default Object.freeze(PrimitiveType);\n","import Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport GeometryType from \"./GeometryType.js\";\nimport Matrix2 from \"./Matrix2.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport Matrix4 from \"./Matrix4.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport Transforms from \"./Transforms.js\";\n\n/**\n * A geometry representation with attributes forming vertices and optional index data\n * defining primitives.  Geometries and an {@link Appearance}, which describes the shading,\n * can be assigned to a {@link Primitive} for visualization.  A <code>Primitive</code> can\n * be created from many heterogeneous - in many cases - geometries for performance.\n * <p>\n * Geometries can be transformed and optimized using functions in {@link GeometryPipeline}.\n * </p>\n *\n * @alias Geometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {GeometryAttributes} options.attributes Attributes, which make up the geometry's vertices.\n * @param {PrimitiveType} [options.primitiveType=PrimitiveType.TRIANGLES] The type of primitives in the geometry.\n * @param {Uint16Array|Uint32Array} [options.indices] Optional index data that determines the primitives in the geometry.\n * @param {BoundingSphere} [options.boundingSphere] An optional bounding sphere that fully enclosed the geometry.\n *\n * @see PolygonGeometry\n * @see RectangleGeometry\n * @see EllipseGeometry\n * @see CircleGeometry\n * @see WallGeometry\n * @see SimplePolylineGeometry\n * @see BoxGeometry\n * @see EllipsoidGeometry\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Geometry%20and%20Appearances.html|Geometry and Appearances Demo}\n *\n * @example\n * // Create geometry with a position attribute and indexed lines.\n * var positions = new Float64Array([\n *   0.0, 0.0, 0.0,\n *   7500000.0, 0.0, 0.0,\n *   0.0, 7500000.0, 0.0\n * ]);\n *\n * var geometry = new Cesium.Geometry({\n *   attributes : {\n *     position : new Cesium.GeometryAttribute({\n *       componentDatatype : Cesium.ComponentDatatype.DOUBLE,\n *       componentsPerAttribute : 3,\n *       values : positions\n *     })\n *   },\n *   indices : new Uint16Array([0, 1, 1, 2, 2, 0]),\n *   primitiveType : Cesium.PrimitiveType.LINES,\n *   boundingSphere : Cesium.BoundingSphere.fromVertices(positions)\n * });\n */\nfunction Geometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options.attributes\", options.attributes);\n  //>>includeEnd('debug');\n\n  /**\n   * Attributes, which make up the geometry's vertices.  Each property in this object corresponds to a\n   * {@link GeometryAttribute} containing the attribute's data.\n   * <p>\n   * Attributes are always stored non-interleaved in a Geometry.\n   * </p>\n   * <p>\n   * There are reserved attribute names with well-known semantics.  The following attributes\n   * are created by a Geometry (depending on the provided {@link VertexFormat}.\n   * <ul>\n   *    <li><code>position</code> - 3D vertex position.  64-bit floating-point (for precision).  3 components per attribute.  See {@link VertexFormat#position}.</li>\n   *    <li><code>normal</code> - Normal (normalized), commonly used for lighting.  32-bit floating-point.  3 components per attribute.  See {@link VertexFormat#normal}.</li>\n   *    <li><code>st</code> - 2D texture coordinate.  32-bit floating-point.  2 components per attribute.  See {@link VertexFormat#st}.</li>\n   *    <li><code>bitangent</code> - Bitangent (normalized), used for tangent-space effects like bump mapping.  32-bit floating-point.  3 components per attribute.  See {@link VertexFormat#bitangent}.</li>\n   *    <li><code>tangent</code> - Tangent (normalized), used for tangent-space effects like bump mapping.  32-bit floating-point.  3 components per attribute.  See {@link VertexFormat#tangent}.</li>\n   * </ul>\n   * </p>\n   * <p>\n   * The following attribute names are generally not created by a Geometry, but are added\n   * to a Geometry by a {@link Primitive} or {@link GeometryPipeline} functions to prepare\n   * the geometry for rendering.\n   * <ul>\n   *    <li><code>position3DHigh</code> - High 32 bits for encoded 64-bit position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\n   *    <li><code>position3DLow</code> - Low 32 bits for encoded 64-bit position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\n   *    <li><code>position3DHigh</code> - High 32 bits for encoded 64-bit 2D (Columbus view) position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\n   *    <li><code>position2DLow</code> - Low 32 bits for encoded 64-bit 2D (Columbus view) position computed with {@link GeometryPipeline.encodeAttribute}.  32-bit floating-point.  4 components per attribute.</li>\n   *    <li><code>color</code> - RGBA color (normalized) usually from {@link GeometryInstance#color}.  32-bit floating-point.  4 components per attribute.</li>\n   *    <li><code>pickColor</code> - RGBA color used for picking.  32-bit floating-point.  4 components per attribute.</li>\n   * </ul>\n   * </p>\n   *\n   * @type GeometryAttributes\n   *\n   * @default undefined\n   *\n   *\n   * @example\n   * geometry.attributes.position = new Cesium.GeometryAttribute({\n   *   componentDatatype : Cesium.ComponentDatatype.FLOAT,\n   *   componentsPerAttribute : 3,\n   *   values : new Float32Array(0)\n   * });\n   *\n   * @see GeometryAttribute\n   * @see VertexFormat\n   */\n  this.attributes = options.attributes;\n\n  /**\n   * Optional index data that - along with {@link Geometry#primitiveType} -\n   * determines the primitives in the geometry.\n   *\n   * @type Array\n   *\n   * @default undefined\n   */\n  this.indices = options.indices;\n\n  /**\n   * The type of primitives in the geometry.  This is most often {@link PrimitiveType.TRIANGLES},\n   * but can varying based on the specific geometry.\n   *\n   * @type PrimitiveType\n   *\n   * @default undefined\n   */\n  this.primitiveType = defaultValue(\n    options.primitiveType,\n    PrimitiveType.TRIANGLES\n  );\n\n  /**\n   * An optional bounding sphere that fully encloses the geometry.  This is\n   * commonly used for culling.\n   *\n   * @type BoundingSphere\n   *\n   * @default undefined\n   */\n  this.boundingSphere = options.boundingSphere;\n\n  /**\n   * @private\n   */\n  this.geometryType = defaultValue(options.geometryType, GeometryType.NONE);\n\n  /**\n   * @private\n   */\n  this.boundingSphereCV = options.boundingSphereCV;\n\n  /**\n   * Used for computing the bounding sphere for geometry using the applyOffset vertex attribute\n   * @private\n   */\n  this.offsetAttribute = options.offsetAttribute;\n}\n\n/**\n * Computes the number of vertices in a geometry.  The runtime is linear with\n * respect to the number of attributes in a vertex, not the number of vertices.\n *\n * @param {Geometry} geometry The geometry.\n * @returns {Number} The number of vertices in the geometry.\n *\n * @example\n * var numVertices = Cesium.Geometry.computeNumberOfVertices(geometry);\n */\nGeometry.computeNumberOfVertices = function (geometry) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"geometry\", geometry);\n  //>>includeEnd('debug');\n\n  var numberOfVertices = -1;\n  for (var property in geometry.attributes) {\n    if (\n      geometry.attributes.hasOwnProperty(property) &&\n      defined(geometry.attributes[property]) &&\n      defined(geometry.attributes[property].values)\n    ) {\n      var attribute = geometry.attributes[property];\n      var num = attribute.values.length / attribute.componentsPerAttribute;\n      //>>includeStart('debug', pragmas.debug);\n      if (numberOfVertices !== num && numberOfVertices !== -1) {\n        throw new DeveloperError(\n          \"All attribute lists must have the same number of attributes.\"\n        );\n      }\n      //>>includeEnd('debug');\n      numberOfVertices = num;\n    }\n  }\n\n  return numberOfVertices;\n};\n\nvar rectangleCenterScratch = new Cartographic();\nvar enuCenterScratch = new Cartesian3();\nvar fixedFrameToEnuScratch = new Matrix4();\nvar boundingRectanglePointsCartographicScratch = [\n  new Cartographic(),\n  new Cartographic(),\n  new Cartographic(),\n];\nvar boundingRectanglePointsEnuScratch = [\n  new Cartesian2(),\n  new Cartesian2(),\n  new Cartesian2(),\n];\nvar points2DScratch = [new Cartesian2(), new Cartesian2(), new Cartesian2()];\nvar pointEnuScratch = new Cartesian3();\nvar enuRotationScratch = new Quaternion();\nvar enuRotationMatrixScratch = new Matrix4();\nvar rotation2DScratch = new Matrix2();\n\n/**\n * For remapping texture coordinates when rendering GroundPrimitives with materials.\n * GroundPrimitive texture coordinates are computed to align with the cartographic coordinate system on the globe.\n * However, EllipseGeometry, RectangleGeometry, and PolygonGeometry all bake rotations to per-vertex texture coordinates\n * using different strategies.\n *\n * This method is used by EllipseGeometry and PolygonGeometry to approximate the same visual effect.\n * We encapsulate rotation and scale by computing a \"transformed\" texture coordinate system and computing\n * a set of reference points from which \"cartographic\" texture coordinates can be remapped to the \"transformed\"\n * system using distances to lines in 2D.\n *\n * This approximation becomes less accurate as the covered area increases, especially for GroundPrimitives near the poles,\n * but is generally reasonable for polygons and ellipses around the size of USA states.\n *\n * RectangleGeometry has its own version of this method that computes remapping coordinates using cartographic space\n * as an intermediary instead of local ENU, which is more accurate for large-area rectangles.\n *\n * @param {Cartesian3[]} positions Array of positions outlining the geometry\n * @param {Number} stRotation Texture coordinate rotation.\n * @param {Ellipsoid} ellipsoid Ellipsoid for projecting and generating local vectors.\n * @param {Rectangle} boundingRectangle Bounding rectangle around the positions.\n * @returns {Number[]} An array of 6 numbers specifying [minimum point, u extent, v extent] as points in the \"cartographic\" system.\n * @private\n */\nGeometry._textureCoordinateRotationPoints = function (\n  positions,\n  stRotation,\n  ellipsoid,\n  boundingRectangle\n) {\n  var i;\n\n  // Create a local east-north-up coordinate system centered on the polygon's bounding rectangle.\n  // Project the southwest, northwest, and southeast corners of the bounding rectangle into the plane of ENU as 2D points.\n  // These are the equivalents of (0,0), (0,1), and (1,0) in the texture coordiante system computed in ShadowVolumeAppearanceFS,\n  // aka \"ENU texture space.\"\n  var rectangleCenter = Rectangle.center(\n    boundingRectangle,\n    rectangleCenterScratch\n  );\n  var enuCenter = Cartographic.toCartesian(\n    rectangleCenter,\n    ellipsoid,\n    enuCenterScratch\n  );\n  var enuToFixedFrame = Transforms.eastNorthUpToFixedFrame(\n    enuCenter,\n    ellipsoid,\n    fixedFrameToEnuScratch\n  );\n  var fixedFrameToEnu = Matrix4.inverse(\n    enuToFixedFrame,\n    fixedFrameToEnuScratch\n  );\n\n  var boundingPointsEnu = boundingRectanglePointsEnuScratch;\n  var boundingPointsCarto = boundingRectanglePointsCartographicScratch;\n\n  boundingPointsCarto[0].longitude = boundingRectangle.west;\n  boundingPointsCarto[0].latitude = boundingRectangle.south;\n\n  boundingPointsCarto[1].longitude = boundingRectangle.west;\n  boundingPointsCarto[1].latitude = boundingRectangle.north;\n\n  boundingPointsCarto[2].longitude = boundingRectangle.east;\n  boundingPointsCarto[2].latitude = boundingRectangle.south;\n\n  var posEnu = pointEnuScratch;\n\n  for (i = 0; i < 3; i++) {\n    Cartographic.toCartesian(boundingPointsCarto[i], ellipsoid, posEnu);\n    posEnu = Matrix4.multiplyByPointAsVector(fixedFrameToEnu, posEnu, posEnu);\n    boundingPointsEnu[i].x = posEnu.x;\n    boundingPointsEnu[i].y = posEnu.y;\n  }\n\n  // Rotate each point in the polygon around the up vector in the ENU by -stRotation and project into ENU as 2D.\n  // Compute the bounding box of these rotated points in the 2D ENU plane.\n  // Rotate the corners back by stRotation, then compute their equivalents in the ENU texture space using the corners computed earlier.\n  var rotation = Quaternion.fromAxisAngle(\n    Cartesian3.UNIT_Z,\n    -stRotation,\n    enuRotationScratch\n  );\n  var textureMatrix = Matrix3.fromQuaternion(\n    rotation,\n    enuRotationMatrixScratch\n  );\n\n  var positionsLength = positions.length;\n  var enuMinX = Number.POSITIVE_INFINITY;\n  var enuMinY = Number.POSITIVE_INFINITY;\n  var enuMaxX = Number.NEGATIVE_INFINITY;\n  var enuMaxY = Number.NEGATIVE_INFINITY;\n  for (i = 0; i < positionsLength; i++) {\n    posEnu = Matrix4.multiplyByPointAsVector(\n      fixedFrameToEnu,\n      positions[i],\n      posEnu\n    );\n    posEnu = Matrix3.multiplyByVector(textureMatrix, posEnu, posEnu);\n\n    enuMinX = Math.min(enuMinX, posEnu.x);\n    enuMinY = Math.min(enuMinY, posEnu.y);\n    enuMaxX = Math.max(enuMaxX, posEnu.x);\n    enuMaxY = Math.max(enuMaxY, posEnu.y);\n  }\n\n  var toDesiredInComputed = Matrix2.fromRotation(stRotation, rotation2DScratch);\n\n  var points2D = points2DScratch;\n  points2D[0].x = enuMinX;\n  points2D[0].y = enuMinY;\n\n  points2D[1].x = enuMinX;\n  points2D[1].y = enuMaxY;\n\n  points2D[2].x = enuMaxX;\n  points2D[2].y = enuMinY;\n\n  var boundingEnuMin = boundingPointsEnu[0];\n  var boundingPointsWidth = boundingPointsEnu[2].x - boundingEnuMin.x;\n  var boundingPointsHeight = boundingPointsEnu[1].y - boundingEnuMin.y;\n\n  for (i = 0; i < 3; i++) {\n    var point2D = points2D[i];\n    // rotate back\n    Matrix2.multiplyByVector(toDesiredInComputed, point2D, point2D);\n\n    // Convert point into east-north texture coordinate space\n    point2D.x = (point2D.x - boundingEnuMin.x) / boundingPointsWidth;\n    point2D.y = (point2D.y - boundingEnuMin.y) / boundingPointsHeight;\n  }\n\n  var minXYCorner = points2D[0];\n  var maxYCorner = points2D[1];\n  var maxXCorner = points2D[2];\n  var result = new Array(6);\n  Cartesian2.pack(minXYCorner, result);\n  Cartesian2.pack(maxYCorner, result, 2);\n  Cartesian2.pack(maxXCorner, result, 4);\n\n  return result;\n};\nexport default Geometry;\n","import defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Values and type information for geometry attributes.  A {@link Geometry}\n * generally contains one or more attributes.  All attributes together form\n * the geometry's vertices.\n *\n * @alias GeometryAttribute\n * @constructor\n *\n * @param {Object} [options] Object with the following properties:\n * @param {ComponentDatatype} [options.componentDatatype] The datatype of each component in the attribute, e.g., individual elements in values.\n * @param {Number} [options.componentsPerAttribute] A number between 1 and 4 that defines the number of components in an attributes.\n * @param {Boolean} [options.normalize=false] When <code>true</code> and <code>componentDatatype</code> is an integer format, indicate that the components should be mapped to the range [0, 1] (unsigned) or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n * @param {number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} [options.values] The values for the attributes stored in a typed array.\n *\n * @exception {DeveloperError} options.componentsPerAttribute must be between 1 and 4.\n *\n *\n * @example\n * var geometry = new Cesium.Geometry({\n *   attributes : {\n *     position : new Cesium.GeometryAttribute({\n *       componentDatatype : Cesium.ComponentDatatype.FLOAT,\n *       componentsPerAttribute : 3,\n *       values : new Float32Array([\n *         0.0, 0.0, 0.0,\n *         7500000.0, 0.0, 0.0,\n *         0.0, 7500000.0, 0.0\n *       ])\n *     })\n *   },\n *   primitiveType : Cesium.PrimitiveType.LINE_LOOP\n * });\n *\n * @see Geometry\n */\nfunction GeometryAttribute(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(options.componentDatatype)) {\n    throw new DeveloperError(\"options.componentDatatype is required.\");\n  }\n  if (!defined(options.componentsPerAttribute)) {\n    throw new DeveloperError(\"options.componentsPerAttribute is required.\");\n  }\n  if (\n    options.componentsPerAttribute < 1 ||\n    options.componentsPerAttribute > 4\n  ) {\n    throw new DeveloperError(\n      \"options.componentsPerAttribute must be between 1 and 4.\"\n    );\n  }\n  if (!defined(options.values)) {\n    throw new DeveloperError(\"options.values is required.\");\n  }\n  //>>includeEnd('debug');\n\n  /**\n   * The datatype of each component in the attribute, e.g., individual elements in\n   * {@link GeometryAttribute#values}.\n   *\n   * @type ComponentDatatype\n   *\n   * @default undefined\n   */\n  this.componentDatatype = options.componentDatatype;\n\n  /**\n   * A number between 1 and 4 that defines the number of components in an attributes.\n   * For example, a position attribute with x, y, and z components would have 3 as\n   * shown in the code example.\n   *\n   * @type Number\n   *\n   * @default undefined\n   *\n   * @example\n   * attribute.componentDatatype = Cesium.ComponentDatatype.FLOAT;\n   * attribute.componentsPerAttribute = 3;\n   * attribute.values = new Float32Array([\n   *   0.0, 0.0, 0.0,\n   *   7500000.0, 0.0, 0.0,\n   *   0.0, 7500000.0, 0.0\n   * ]);\n   */\n  this.componentsPerAttribute = options.componentsPerAttribute;\n\n  /**\n   * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n   * indicate that the components should be mapped to the range [0, 1] (unsigned)\n   * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n   * <p>\n   * This is commonly used when storing colors using {@link ComponentDatatype.UNSIGNED_BYTE}.\n   * </p>\n   *\n   * @type Boolean\n   *\n   * @default false\n   *\n   * @example\n   * attribute.componentDatatype = Cesium.ComponentDatatype.UNSIGNED_BYTE;\n   * attribute.componentsPerAttribute = 4;\n   * attribute.normalize = true;\n   * attribute.values = new Uint8Array([\n   *   Cesium.Color.floatToByte(color.red),\n   *   Cesium.Color.floatToByte(color.green),\n   *   Cesium.Color.floatToByte(color.blue),\n   *   Cesium.Color.floatToByte(color.alpha)\n   * ]);\n   */\n  this.normalize = defaultValue(options.normalize, false);\n\n  /**\n   * The values for the attributes stored in a typed array.  In the code example,\n   * every three elements in <code>values</code> defines one attributes since\n   * <code>componentsPerAttribute</code> is 3.\n   *\n   * @type {number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array}\n   *\n   * @default undefined\n   *\n   * @example\n   * attribute.componentDatatype = Cesium.ComponentDatatype.FLOAT;\n   * attribute.componentsPerAttribute = 3;\n   * attribute.values = new Float32Array([\n   *   0.0, 0.0, 0.0,\n   *   7500000.0, 0.0, 0.0,\n   *   0.0, 7500000.0, 0.0\n   * ]);\n   */\n  this.values = options.values;\n}\nexport default GeometryAttribute;\n"],"names":["Object","freeze","NONE","TRIANGLES","LINES","POLYLINES","PrimitiveType","POINTS","WebGLConstants","LINE_LOOP","LINE_STRIP","TRIANGLE_STRIP","TRIANGLE_FAN","primitiveType","Geometry","options","defaultValue","EMPTY_OBJECT","Check","typeOf","object","attributes","this","indices","boundingSphere","geometryType","GeometryType","boundingSphereCV","offsetAttribute","computeNumberOfVertices","geometry","numberOfVertices","property","hasOwnProperty","defined","values","attribute","num","length","componentsPerAttribute","DeveloperError","rectangleCenterScratch","Cartographic","enuCenterScratch","Cartesian3","fixedFrameToEnuScratch","Matrix4","boundingRectanglePointsCartographicScratch","boundingRectanglePointsEnuScratch","Cartesian2","points2DScratch","pointEnuScratch","enuRotationScratch","Quaternion","enuRotationMatrixScratch","rotation2DScratch","Matrix2","_textureCoordinateRotationPoints","positions","stRotation","ellipsoid","boundingRectangle","i","rectangleCenter","Rectangle","center","enuCenter","toCartesian","enuToFixedFrame","Transforms","eastNorthUpToFixedFrame","fixedFrameToEnu","inverse","boundingPointsEnu","boundingPointsCarto","longitude","west","latitude","south","north","east","posEnu","multiplyByPointAsVector","x","y","rotation","fromAxisAngle","UNIT_Z","textureMatrix","Matrix3","fromQuaternion","positionsLength","enuMinX","Number","POSITIVE_INFINITY","enuMinY","enuMaxX","NEGATIVE_INFINITY","enuMaxY","multiplyByVector","Math","min","max","toDesiredInComputed","fromRotation","points2D","boundingEnuMin","boundingPointsWidth","boundingPointsHeight","point2D","minXYCorner","maxYCorner","maxXCorner","result","Array","pack","componentDatatype","normalize"],"mappings":"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"}