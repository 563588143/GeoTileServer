{"version":3,"file":"EllipsoidTangentPlane-164dcfc9.js","sources":["../../../../Source/Core/EllipsoidTangentPlane.js"],"sourcesContent":["import AxisAlignedBoundingBox from \"./AxisAlignedBoundingBox.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartesian4 from \"./Cartesian4.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport IntersectionTests from \"./IntersectionTests.js\";\nimport Matrix4 from \"./Matrix4.js\";\nimport Plane from \"./Plane.js\";\nimport Ray from \"./Ray.js\";\nimport Transforms from \"./Transforms.js\";\n\nvar scratchCart4 = new Cartesian4();\n/**\n * A plane tangent to the provided ellipsoid at the provided origin.\n * If origin is not on the surface of the ellipsoid, it's surface projection will be used.\n * If origin is at the center of the ellipsoid, an exception will be thrown.\n * @alias EllipsoidTangentPlane\n * @constructor\n *\n * @param {Cartesian3} origin The point on the surface of the ellipsoid where the tangent plane touches.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\n *\n * @exception {DeveloperError} origin must not be at the center of the ellipsoid.\n */\nfunction EllipsoidTangentPlane(origin, ellipsoid) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"origin\", origin);\n  //>>includeEnd('debug');\n\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n  origin = ellipsoid.scaleToGeodeticSurface(origin);\n\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(origin)) {\n    throw new DeveloperError(\n      \"origin must not be at the center of the ellipsoid.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  var eastNorthUp = Transforms.eastNorthUpToFixedFrame(origin, ellipsoid);\n  this._ellipsoid = ellipsoid;\n  this._origin = origin;\n  this._xAxis = Cartesian3.fromCartesian4(\n    Matrix4.getColumn(eastNorthUp, 0, scratchCart4)\n  );\n  this._yAxis = Cartesian3.fromCartesian4(\n    Matrix4.getColumn(eastNorthUp, 1, scratchCart4)\n  );\n\n  var normal = Cartesian3.fromCartesian4(\n    Matrix4.getColumn(eastNorthUp, 2, scratchCart4)\n  );\n  this._plane = Plane.fromPointNormal(origin, normal);\n}\n\nObject.defineProperties(EllipsoidTangentPlane.prototype, {\n  /**\n   * Gets the ellipsoid.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @type {Ellipsoid}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n  },\n\n  /**\n   * Gets the origin.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @type {Cartesian3}\n   */\n  origin: {\n    get: function () {\n      return this._origin;\n    },\n  },\n\n  /**\n   * Gets the plane which is tangent to the ellipsoid.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @readonly\n   * @type {Plane}\n   */\n  plane: {\n    get: function () {\n      return this._plane;\n    },\n  },\n\n  /**\n   * Gets the local X-axis (east) of the tangent plane.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @readonly\n   * @type {Cartesian3}\n   */\n  xAxis: {\n    get: function () {\n      return this._xAxis;\n    },\n  },\n\n  /**\n   * Gets the local Y-axis (north) of the tangent plane.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @readonly\n   * @type {Cartesian3}\n   */\n  yAxis: {\n    get: function () {\n      return this._yAxis;\n    },\n  },\n\n  /**\n   * Gets the local Z-axis (up) of the tangent plane.\n   * @memberof EllipsoidTangentPlane.prototype\n   * @readonly\n   * @type {Cartesian3}\n   */\n  zAxis: {\n    get: function () {\n      return this._plane.normal;\n    },\n  },\n});\n\nvar tmp = new AxisAlignedBoundingBox();\n/**\n * Creates a new instance from the provided ellipsoid and the center\n * point of the provided Cartesians.\n *\n * @param {Cartesian3[]} cartesians The list of positions surrounding the center point.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\n * @returns {EllipsoidTangentPlane} The new instance of EllipsoidTangentPlane.\n */\nEllipsoidTangentPlane.fromPoints = function (cartesians, ellipsoid) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesians\", cartesians);\n  //>>includeEnd('debug');\n\n  var box = AxisAlignedBoundingBox.fromPoints(cartesians, tmp);\n  return new EllipsoidTangentPlane(box.center, ellipsoid);\n};\n\nvar scratchProjectPointOntoPlaneRay = new Ray();\nvar scratchProjectPointOntoPlaneCartesian3 = new Cartesian3();\n\n/**\n * Computes the projection of the provided 3D position onto the 2D plane, radially outward from the {@link EllipsoidTangentPlane.ellipsoid} coordinate system origin.\n *\n * @param {Cartesian3} cartesian The point to project.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided. Undefined if there is no intersection point\n */\nEllipsoidTangentPlane.prototype.projectPointOntoPlane = function (\n  cartesian,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  var ray = scratchProjectPointOntoPlaneRay;\n  ray.origin = cartesian;\n  Cartesian3.normalize(cartesian, ray.direction);\n\n  var intersectionPoint = IntersectionTests.rayPlane(\n    ray,\n    this._plane,\n    scratchProjectPointOntoPlaneCartesian3\n  );\n  if (!defined(intersectionPoint)) {\n    Cartesian3.negate(ray.direction, ray.direction);\n    intersectionPoint = IntersectionTests.rayPlane(\n      ray,\n      this._plane,\n      scratchProjectPointOntoPlaneCartesian3\n    );\n  }\n\n  if (defined(intersectionPoint)) {\n    var v = Cartesian3.subtract(\n      intersectionPoint,\n      this._origin,\n      intersectionPoint\n    );\n    var x = Cartesian3.dot(this._xAxis, v);\n    var y = Cartesian3.dot(this._yAxis, v);\n\n    if (!defined(result)) {\n      return new Cartesian2(x, y);\n    }\n    result.x = x;\n    result.y = y;\n    return result;\n  }\n  return undefined;\n};\n\n/**\n * Computes the projection of the provided 3D positions onto the 2D plane (where possible), radially outward from the global origin.\n * The resulting array may be shorter than the input array - if a single projection is impossible it will not be included.\n *\n * @see EllipsoidTangentPlane.projectPointOntoPlane\n *\n * @param {Cartesian3[]} cartesians The array of points to project.\n * @param {Cartesian2[]} [result] The array of Cartesian2 instances onto which to store results.\n * @returns {Cartesian2[]} The modified result parameter or a new array of Cartesian2 instances if none was provided.\n */\nEllipsoidTangentPlane.prototype.projectPointsOntoPlane = function (\n  cartesians,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesians\", cartesians);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = [];\n  }\n\n  var count = 0;\n  var length = cartesians.length;\n  for (var i = 0; i < length; i++) {\n    var p = this.projectPointOntoPlane(cartesians[i], result[count]);\n    if (defined(p)) {\n      result[count] = p;\n      count++;\n    }\n  }\n  result.length = count;\n  return result;\n};\n\n/**\n * Computes the projection of the provided 3D position onto the 2D plane, along the plane normal.\n *\n * @param {Cartesian3} cartesian The point to project.\n * @param {Cartesian2} [result] The object onto which to store the result.\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided.\n */\nEllipsoidTangentPlane.prototype.projectPointToNearestOnPlane = function (\n  cartesian,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian2();\n  }\n\n  var ray = scratchProjectPointOntoPlaneRay;\n  ray.origin = cartesian;\n  Cartesian3.clone(this._plane.normal, ray.direction);\n\n  var intersectionPoint = IntersectionTests.rayPlane(\n    ray,\n    this._plane,\n    scratchProjectPointOntoPlaneCartesian3\n  );\n  if (!defined(intersectionPoint)) {\n    Cartesian3.negate(ray.direction, ray.direction);\n    intersectionPoint = IntersectionTests.rayPlane(\n      ray,\n      this._plane,\n      scratchProjectPointOntoPlaneCartesian3\n    );\n  }\n\n  var v = Cartesian3.subtract(\n    intersectionPoint,\n    this._origin,\n    intersectionPoint\n  );\n  var x = Cartesian3.dot(this._xAxis, v);\n  var y = Cartesian3.dot(this._yAxis, v);\n\n  result.x = x;\n  result.y = y;\n  return result;\n};\n\n/**\n * Computes the projection of the provided 3D positions onto the 2D plane, along the plane normal.\n *\n * @see EllipsoidTangentPlane.projectPointToNearestOnPlane\n *\n * @param {Cartesian3[]} cartesians The array of points to project.\n * @param {Cartesian2[]} [result] The array of Cartesian2 instances onto which to store results.\n * @returns {Cartesian2[]} The modified result parameter or a new array of Cartesian2 instances if none was provided. This will have the same length as <code>cartesians</code>.\n */\nEllipsoidTangentPlane.prototype.projectPointsToNearestOnPlane = function (\n  cartesians,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesians\", cartesians);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = [];\n  }\n\n  var length = cartesians.length;\n  result.length = length;\n  for (var i = 0; i < length; i++) {\n    result[i] = this.projectPointToNearestOnPlane(cartesians[i], result[i]);\n  }\n  return result;\n};\n\nvar projectPointsOntoEllipsoidScratch = new Cartesian3();\n/**\n * Computes the projection of the provided 2D position onto the 3D ellipsoid.\n *\n * @param {Cartesian2} cartesian The points to project.\n * @param {Cartesian3} [result] The Cartesian3 instance to store result.\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\n */\nEllipsoidTangentPlane.prototype.projectPointOntoEllipsoid = function (\n  cartesian,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesian\", cartesian);\n  //>>includeEnd('debug');\n\n  if (!defined(result)) {\n    result = new Cartesian3();\n  }\n\n  var ellipsoid = this._ellipsoid;\n  var origin = this._origin;\n  var xAxis = this._xAxis;\n  var yAxis = this._yAxis;\n  var tmp = projectPointsOntoEllipsoidScratch;\n\n  Cartesian3.multiplyByScalar(xAxis, cartesian.x, tmp);\n  result = Cartesian3.add(origin, tmp, result);\n  Cartesian3.multiplyByScalar(yAxis, cartesian.y, tmp);\n  Cartesian3.add(result, tmp, result);\n  ellipsoid.scaleToGeocentricSurface(result, result);\n\n  return result;\n};\n\n/**\n * Computes the projection of the provided 2D positions onto the 3D ellipsoid.\n *\n * @param {Cartesian2[]} cartesians The array of points to project.\n * @param {Cartesian3[]} [result] The array of Cartesian3 instances onto which to store results.\n * @returns {Cartesian3[]} The modified result parameter or a new array of Cartesian3 instances if none was provided.\n */\nEllipsoidTangentPlane.prototype.projectPointsOntoEllipsoid = function (\n  cartesians,\n  result\n) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"cartesians\", cartesians);\n  //>>includeEnd('debug');\n\n  var length = cartesians.length;\n  if (!defined(result)) {\n    result = new Array(length);\n  } else {\n    result.length = length;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    result[i] = this.projectPointOntoEllipsoid(cartesians[i], result[i]);\n  }\n\n  return result;\n};\nexport default EllipsoidTangentPlane;\n"],"names":["scratchCart4","Cartesian4","EllipsoidTangentPlane","origin","ellipsoid","Check","defined","defaultValue","Ellipsoid","WGS84","scaleToGeodeticSurface","DeveloperError","eastNorthUp","Transforms","eastNorthUpToFixedFrame","this","_ellipsoid","_origin","_xAxis","Cartesian3","fromCartesian4","Matrix4","getColumn","_yAxis","normal","_plane","Plane","fromPointNormal","Object","defineProperties","prototype","get","plane","xAxis","yAxis","zAxis","tmp","AxisAlignedBoundingBox","fromPoints","cartesians","center","scratchProjectPointOntoPlaneRay","Ray","scratchProjectPointOntoPlaneCartesian3","projectPointOntoPlane","cartesian","result","ray","normalize","direction","intersectionPoint","IntersectionTests","rayPlane","negate","v","subtract","x","dot","y","Cartesian2","projectPointsOntoPlane","count","length","i","p","projectPointToNearestOnPlane","clone","projectPointsToNearestOnPlane","projectPointsOntoEllipsoidScratch","projectPointOntoEllipsoid","multiplyByScalar","add","scaleToGeocentricSurface","projectPointsOntoEllipsoid","Array"],"mappings":"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"}