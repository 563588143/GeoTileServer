{"version":3,"file":"RectangleGeometryLibrary-b2e91b9c.js","sources":["../../../../Source/Core/RectangleGeometryLibrary.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport GeographicProjection from \"./GeographicProjection.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix2 from \"./Matrix2.js\";\nimport Rectangle from \"./Rectangle.js\";\n\nvar cos = Math.cos;\nvar sin = Math.sin;\nvar sqrt = Math.sqrt;\n\n/**\n * @private\n */\nvar RectangleGeometryLibrary = {};\n\n/**\n * @private\n */\nRectangleGeometryLibrary.computePosition = function (\n  computedOptions,\n  ellipsoid,\n  computeST,\n  row,\n  col,\n  position,\n  st\n) {\n  var radiiSquared = ellipsoid.radiiSquared;\n  var nwCorner = computedOptions.nwCorner;\n  var rectangle = computedOptions.boundingRectangle;\n\n  var stLatitude =\n    nwCorner.latitude -\n    computedOptions.granYCos * row +\n    col * computedOptions.granXSin;\n  var cosLatitude = cos(stLatitude);\n  var nZ = sin(stLatitude);\n  var kZ = radiiSquared.z * nZ;\n\n  var stLongitude =\n    nwCorner.longitude +\n    row * computedOptions.granYSin +\n    col * computedOptions.granXCos;\n  var nX = cosLatitude * cos(stLongitude);\n  var nY = cosLatitude * sin(stLongitude);\n\n  var kX = radiiSquared.x * nX;\n  var kY = radiiSquared.y * nY;\n\n  var gamma = sqrt(kX * nX + kY * nY + kZ * nZ);\n\n  position.x = kX / gamma;\n  position.y = kY / gamma;\n  position.z = kZ / gamma;\n\n  if (computeST) {\n    var stNwCorner = computedOptions.stNwCorner;\n    if (defined(stNwCorner)) {\n      stLatitude =\n        stNwCorner.latitude -\n        computedOptions.stGranYCos * row +\n        col * computedOptions.stGranXSin;\n      stLongitude =\n        stNwCorner.longitude +\n        row * computedOptions.stGranYSin +\n        col * computedOptions.stGranXCos;\n\n      st.x = (stLongitude - computedOptions.stWest) * computedOptions.lonScalar;\n      st.y = (stLatitude - computedOptions.stSouth) * computedOptions.latScalar;\n    } else {\n      st.x = (stLongitude - rectangle.west) * computedOptions.lonScalar;\n      st.y = (stLatitude - rectangle.south) * computedOptions.latScalar;\n    }\n  }\n};\n\nvar rotationMatrixScratch = new Matrix2();\nvar nwCartesian = new Cartesian3();\nvar centerScratch = new Cartographic();\nvar centerCartesian = new Cartesian3();\nvar proj = new GeographicProjection();\n\nfunction getRotationOptions(\n  nwCorner,\n  rotation,\n  granularityX,\n  granularityY,\n  center,\n  width,\n  height\n) {\n  var cosRotation = Math.cos(rotation);\n  var granYCos = granularityY * cosRotation;\n  var granXCos = granularityX * cosRotation;\n\n  var sinRotation = Math.sin(rotation);\n  var granYSin = granularityY * sinRotation;\n  var granXSin = granularityX * sinRotation;\n\n  nwCartesian = proj.project(nwCorner, nwCartesian);\n\n  nwCartesian = Cartesian3.subtract(nwCartesian, centerCartesian, nwCartesian);\n  var rotationMatrix = Matrix2.fromRotation(rotation, rotationMatrixScratch);\n  nwCartesian = Matrix2.multiplyByVector(\n    rotationMatrix,\n    nwCartesian,\n    nwCartesian\n  );\n  nwCartesian = Cartesian3.add(nwCartesian, centerCartesian, nwCartesian);\n  nwCorner = proj.unproject(nwCartesian, nwCorner);\n\n  width -= 1;\n  height -= 1;\n\n  var latitude = nwCorner.latitude;\n  var latitude0 = latitude + width * granXSin;\n  var latitude1 = latitude - granYCos * height;\n  var latitude2 = latitude - granYCos * height + width * granXSin;\n\n  var north = Math.max(latitude, latitude0, latitude1, latitude2);\n  var south = Math.min(latitude, latitude0, latitude1, latitude2);\n\n  var longitude = nwCorner.longitude;\n  var longitude0 = longitude + width * granXCos;\n  var longitude1 = longitude + height * granYSin;\n  var longitude2 = longitude + height * granYSin + width * granXCos;\n\n  var east = Math.max(longitude, longitude0, longitude1, longitude2);\n  var west = Math.min(longitude, longitude0, longitude1, longitude2);\n\n  return {\n    north: north,\n    south: south,\n    east: east,\n    west: west,\n    granYCos: granYCos,\n    granYSin: granYSin,\n    granXCos: granXCos,\n    granXSin: granXSin,\n    nwCorner: nwCorner,\n  };\n}\n\n/**\n * @private\n */\nRectangleGeometryLibrary.computeOptions = function (\n  rectangle,\n  granularity,\n  rotation,\n  stRotation,\n  boundingRectangleScratch,\n  nwCornerResult,\n  stNwCornerResult\n) {\n  var east = rectangle.east;\n  var west = rectangle.west;\n  var north = rectangle.north;\n  var south = rectangle.south;\n\n  var northCap = false;\n  var southCap = false;\n\n  if (north === CesiumMath.PI_OVER_TWO) {\n    northCap = true;\n  }\n  if (south === -CesiumMath.PI_OVER_TWO) {\n    southCap = true;\n  }\n\n  var width;\n  var height;\n  var granularityX;\n  var granularityY;\n  var dx;\n  var dy = north - south;\n  if (west > east) {\n    dx = CesiumMath.TWO_PI - west + east;\n  } else {\n    dx = east - west;\n  }\n\n  width = Math.ceil(dx / granularity) + 1;\n  height = Math.ceil(dy / granularity) + 1;\n  granularityX = dx / (width - 1);\n  granularityY = dy / (height - 1);\n\n  var nwCorner = Rectangle.northwest(rectangle, nwCornerResult);\n  var center = Rectangle.center(rectangle, centerScratch);\n  if (rotation !== 0 || stRotation !== 0) {\n    if (center.longitude < nwCorner.longitude) {\n      center.longitude += CesiumMath.TWO_PI;\n    }\n    centerCartesian = proj.project(center, centerCartesian);\n  }\n\n  var granYCos = granularityY;\n  var granXCos = granularityX;\n  var granYSin = 0.0;\n  var granXSin = 0.0;\n\n  var boundingRectangle = Rectangle.clone(rectangle, boundingRectangleScratch);\n\n  var computedOptions = {\n    granYCos: granYCos,\n    granYSin: granYSin,\n    granXCos: granXCos,\n    granXSin: granXSin,\n    nwCorner: nwCorner,\n    boundingRectangle: boundingRectangle,\n    width: width,\n    height: height,\n    northCap: northCap,\n    southCap: southCap,\n  };\n\n  if (rotation !== 0) {\n    var rotationOptions = getRotationOptions(\n      nwCorner,\n      rotation,\n      granularityX,\n      granularityY,\n      center,\n      width,\n      height\n    );\n    north = rotationOptions.north;\n    south = rotationOptions.south;\n    east = rotationOptions.east;\n    west = rotationOptions.west;\n\n    //>>includeStart('debug', pragmas.debug);\n    if (\n      north < -CesiumMath.PI_OVER_TWO ||\n      north > CesiumMath.PI_OVER_TWO ||\n      south < -CesiumMath.PI_OVER_TWO ||\n      south > CesiumMath.PI_OVER_TWO\n    ) {\n      throw new DeveloperError(\n        \"Rotated rectangle is invalid.  It crosses over either the north or south pole.\"\n      );\n    }\n    //>>includeEnd('debug')\n\n    computedOptions.granYCos = rotationOptions.granYCos;\n    computedOptions.granYSin = rotationOptions.granYSin;\n    computedOptions.granXCos = rotationOptions.granXCos;\n    computedOptions.granXSin = rotationOptions.granXSin;\n\n    boundingRectangle.north = north;\n    boundingRectangle.south = south;\n    boundingRectangle.east = east;\n    boundingRectangle.west = west;\n  }\n\n  if (stRotation !== 0) {\n    rotation = rotation - stRotation;\n    var stNwCorner = Rectangle.northwest(boundingRectangle, stNwCornerResult);\n\n    var stRotationOptions = getRotationOptions(\n      stNwCorner,\n      rotation,\n      granularityX,\n      granularityY,\n      center,\n      width,\n      height\n    );\n\n    computedOptions.stGranYCos = stRotationOptions.granYCos;\n    computedOptions.stGranXCos = stRotationOptions.granXCos;\n    computedOptions.stGranYSin = stRotationOptions.granYSin;\n    computedOptions.stGranXSin = stRotationOptions.granXSin;\n    computedOptions.stNwCorner = stNwCorner;\n    computedOptions.stWest = stRotationOptions.west;\n    computedOptions.stSouth = stRotationOptions.south;\n  }\n\n  return computedOptions;\n};\nexport default RectangleGeometryLibrary;\n"],"names":["cos","Math","sin","sqrt","RectangleGeometryLibrary","computedOptions","ellipsoid","computeST","row","col","position","st","radiiSquared","nwCorner","rectangle","boundingRectangle","stLatitude","latitude","granYCos","granXSin","cosLatitude","nZ","kZ","z","stLongitude","longitude","granYSin","granXCos","nX","nY","kX","x","kY","y","gamma","stNwCorner","defined","stGranYCos","stGranXSin","stGranYSin","stGranXCos","stWest","lonScalar","stSouth","latScalar","west","south","rotationMatrixScratch","Matrix2","nwCartesian","Cartesian3","centerScratch","Cartographic","centerCartesian","proj","GeographicProjection","getRotationOptions","rotation","granularityX","granularityY","center","width","height","cosRotation","sinRotation","project","subtract","rotationMatrix","fromRotation","multiplyByVector","add","unproject","latitude0","latitude1","latitude2","north","max","min","longitude0","longitude1","longitude2","east","computeOptions","granularity","stRotation","boundingRectangleScratch","nwCornerResult","stNwCornerResult","dx","northCap","southCap","CesiumMath","PI_OVER_TWO","dy","TWO_PI","ceil","Rectangle","northwest","clone","rotationOptions","DeveloperError","stRotationOptions"],"mappings":"+KASA,IAAIA,EAAMC,KAAKD,IACXE,EAAMD,KAAKC,IACXC,EAAOF,KAAKE,KAKZC,EAA2B,CAK/BA,gBAA2C,SACzCC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAeN,EAAUM,aACzBC,EAAWR,EAAgBQ,SAC3BC,EAAYT,EAAgBU,kBAE5BC,EACFH,EAASI,SACTZ,EAAgBa,SAAWV,EAC3BC,EAAMJ,EAAgBc,SACpBC,EAAcpB,EAAIgB,GAClBK,EAAKnB,EAAIc,GACTM,EAAKV,EAAaW,EAAIF,EAEtBG,EACFX,EAASY,UACTjB,EAAMH,EAAgBqB,SACtBjB,EAAMJ,EAAgBsB,SACpBC,EAAKR,EAAcpB,EAAIwB,GACvBK,EAAKT,EAAclB,EAAIsB,GAEvBM,EAAKlB,EAAamB,EAAIH,EACtBI,EAAKpB,EAAaqB,EAAIJ,EAEtBK,EAAQ/B,EAAK2B,EAAKF,EAAKI,EAAKH,EAAKP,EAAKD,GAM1C,GAJAX,EAASqB,EAAID,EAAKI,EAClBxB,EAASuB,EAAID,EAAKE,EAClBxB,EAASa,EAAID,EAAKY,EAEd3B,EAAW,CACb,IAAI4B,EAAa9B,EAAgB8B,WAC7BC,UAAQD,IACVnB,EACEmB,EAAWlB,SACXZ,EAAgBgC,WAAa7B,EAC7BC,EAAMJ,EAAgBiC,WACxBd,EACEW,EAAWV,UACXjB,EAAMH,EAAgBkC,WACtB9B,EAAMJ,EAAgBmC,WAExB7B,EAAGoB,GAAKP,EAAcnB,EAAgBoC,QAAUpC,EAAgBqC,UAChE/B,EAAGsB,GAAKjB,EAAaX,EAAgBsC,SAAWtC,EAAgBuC,YAEhEjC,EAAGoB,GAAKP,EAAcV,EAAU+B,MAAQxC,EAAgBqC,UACxD/B,EAAGsB,GAAKjB,EAAaF,EAAUgC,OAASzC,EAAgBuC,cAK1DG,EAAwB,IAAIC,UAC5BC,EAAc,IAAIC,aAClBC,EAAgB,IAAIC,eACpBC,EAAkB,IAAIH,aACtBI,EAAO,IAAIC,uBAEf,SAASC,EACP3C,EACA4C,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAc9D,KAAKD,IAAIyD,GACvBvC,EAAWyC,EAAeI,EAC1BpC,EAAW+B,EAAeK,EAE1BC,EAAc/D,KAAKC,IAAIuD,GACvB/B,EAAWiC,EAAeK,EAC1B7C,EAAWuC,EAAeM,EAE9Bf,EAAcK,EAAKW,QAAQpD,EAAUoC,GAErCA,EAAcC,aAAWgB,SAASjB,EAAaI,EAAiBJ,GAChE,IAAIkB,EAAiBnB,UAAQoB,aAAaX,EAAUV,GACpDE,EAAcD,UAAQqB,iBACpBF,EACAlB,EACAA,GAEFA,EAAcC,aAAWoB,IAAIrB,EAAaI,EAAiBJ,GAG3DY,GAAS,EACTC,GAAU,EAEV,IAAI7C,GALJJ,EAAWyC,EAAKiB,UAAUtB,EAAapC,IAKfI,SACpBuD,EAAYvD,EAAW4C,EAAQ1C,EAC/BsD,EAAYxD,EAAWC,EAAW4C,EAClCY,EAAYzD,EAAWC,EAAW4C,EAASD,EAAQ1C,EAEnDwD,EAAQ1E,KAAK2E,IAAI3D,EAAUuD,EAAWC,EAAWC,GACjD5B,EAAQ7C,KAAK4E,IAAI5D,EAAUuD,EAAWC,EAAWC,GAEjDjD,EAAYZ,EAASY,UACrBqD,EAAarD,EAAYoC,EAAQlC,EACjCoD,EAAatD,EAAYqC,EAASpC,EAClCsD,EAAavD,EAAYqC,EAASpC,EAAWmC,EAAQlC,EAKzD,MAAO,CACLgD,MAAOA,EACP7B,MAAOA,EACPmC,KANShF,KAAK2E,IAAInD,EAAWqD,EAAYC,EAAYC,GAOrDnC,KANS5C,KAAK4E,IAAIpD,EAAWqD,EAAYC,EAAYC,GAOrD9D,SAAUA,EACVQ,SAAUA,EACVC,SAAUA,EACVR,SAAUA,EACVN,SAAUA,GAOdT,EAAyB8E,eAAiB,SACxCpE,EACAqE,EACA1B,EACA2B,EACAC,EACAC,EACAC,GAEA,IAeI1B,EACAC,EACAJ,EACAC,EACA6B,EAnBAP,EAAOnE,EAAUmE,KACjBpC,EAAO/B,EAAU+B,KACjB8B,EAAQ7D,EAAU6D,MAClB7B,EAAQhC,EAAUgC,MAElB2C,GAAW,EACXC,GAAW,EAEXf,IAAUgB,aAAWC,cACvBH,GAAW,GAET3C,KAAW6C,aAAWC,cACxBF,GAAW,GAQb,IAAIG,EAAKlB,EAAQ7B,EASjBY,GAPE8B,EADE3C,EAAOoC,EACJU,aAAWG,OAASjD,EAAOoC,EAE3BA,EAAOpC,KAGdgB,EAAQ5D,KAAK8F,KAAKP,EAAKL,GAAe,GAET,GAC7BxB,EAAekC,IAFf/B,EAAS7D,KAAK8F,KAAKF,EAAKV,GAAe,GAET,GAE9B,IAAItE,EAAWmF,YAAUC,UAAUnF,EAAWwE,GAC1C1B,EAASoC,YAAUpC,OAAO9C,EAAWqC,GACxB,IAAbM,GAAiC,IAAf2B,IAChBxB,EAAOnC,UAAYZ,EAASY,YAC9BmC,EAAOnC,WAAakE,aAAWG,QAEjCzC,EAAkBC,EAAKW,QAAQL,EAAQP,IAGzC,IAAInC,EAAWyC,EACXhC,EAAW+B,EAIX3C,EAAoBiF,YAAUE,MAAMpF,EAAWuE,GAE/ChF,EAAkB,CACpBa,SAAUA,EACVQ,SAPa,EAQbC,SAAUA,EACVR,SARa,EASbN,SAAUA,EACVE,kBAAmBA,EACnB8C,MAAOA,EACPC,OAAQA,EACR2B,SAAUA,EACVC,SAAUA,GAGZ,GAAiB,IAAbjC,EAAgB,CAClB,IAAI0C,EAAkB3C,EACpB3C,EACA4C,EACAC,EACAC,EACAC,EACAC,EACAC,GAQF,GANAa,EAAQwB,EAAgBxB,MACxB7B,EAAQqD,EAAgBrD,MACxBmC,EAAOkB,EAAgBlB,KACvBpC,EAAOsD,EAAgBtD,KAIrB8B,GAASgB,aAAWC,aACpBjB,EAAQgB,aAAWC,aACnB9C,GAAS6C,aAAWC,aACpB9C,EAAQ6C,aAAWC,YAEnB,MAAM,IAAIQ,iBACR,kFAKJ/F,EAAgBa,SAAWiF,EAAgBjF,SAC3Cb,EAAgBqB,SAAWyE,EAAgBzE,SAC3CrB,EAAgBsB,SAAWwE,EAAgBxE,SAC3CtB,EAAgBc,SAAWgF,EAAgBhF,SAE3CJ,EAAkB4D,MAAQA,EAC1B5D,EAAkB+B,MAAQA,EAC1B/B,EAAkBkE,KAAOA,EACzBlE,EAAkB8B,KAAOA,EAG3B,GAAmB,IAAfuC,EAAkB,CACpB3B,GAAsB2B,EACtB,IAAIjD,EAAa6D,YAAUC,UAAUlF,EAAmBwE,GAEpDc,EAAoB7C,EACtBrB,EACAsB,EACAC,EACAC,EACAC,EACAC,EACAC,GAGFzD,EAAgBgC,WAAagE,EAAkBnF,SAC/Cb,EAAgBmC,WAAa6D,EAAkB1E,SAC/CtB,EAAgBkC,WAAa8D,EAAkB3E,SAC/CrB,EAAgBiC,WAAa+D,EAAkBlF,SAC/Cd,EAAgB8B,WAAaA,EAC7B9B,EAAgBoC,OAAS4D,EAAkBxD,KAC3CxC,EAAgBsC,QAAU0D,EAAkBvD,MAG9C,OAAOzC"}